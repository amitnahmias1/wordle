"""when I wrote this code only me and god knew what's going on here. now only god knows..."""

import pygame
import win32com.client as win32
import sys
import time
import random
import string
import getpass
import datetime
from pyad import aduser
from pymongo import MongoClient
import requests
import win32api
import creds

langEN = True

username = getpass.getuser()
if username[0] == 'm':
    username = 's' + username[1:]

pygame.init()
screen = pygame.display.set_mode((1000, 1100), pygame.RESIZABLE)
pygame.display.set_caption("Wordle Tzahali")



def center_pos(starting_x, rect_leng, word_leng):
    b = (rect_leng - word_leng) // 2
    return b + starting_x
def draw_starting_page():
    black = [0,0,0]
    bright_bg = pygame.image.load('images\\background3.png')
    w = pygame.image.load('images\\w.png')
    he_font240 = pygame.font.Font('fonts\\Abraham-Regular.ttf', 240)
    screen.blit(bright_bg, (0, 0))
    txt = he_font240.render('◊î◊û◊©◊ó◊ß'[::-1], True, black)
    screen.blit(txt, (center_pos(0, 1000, txt.get_rect().width), 0))
    txt = he_font240.render('◊ë◊ò◊¢◊ô◊†◊î'[::-1], True, black)
    screen.blit(txt, (center_pos(0, 1000, txt.get_rect().width), 300))
    screen.blit(w, (center_pos(0, 1000, w.get_rect().width) + 0, 670))
    pygame.display.flip()
#draw_starting_page()

today = datetime.date.today()
last = datetime.date(2022, 6, 25)

# target = random.choice(normal_words)
# target = "ALLOW"
# target = random.choice(word_list)

client = MongoClient(creds.con_string)
# db = client['wordle'] if langEN else client['hewordle']
str_today = str(today)
# collection1 = db[str_today]

green_square_emoji = "üü©"
black_square_emoji = "‚¨õ"
yellow_square_emoji = "üü®"
green_heart_emoji = "üíö"
black_heart_emoji = "üñ§"
yellow_heart_emoji = "üíõ"

clock = pygame.time.Clock()
fps = 60
sqare_size = 80
key_size = 55
weak_gray = [150,150,150]
pink = [225, 0, 255]
red = [255,0,0]
orange = [255,169,84]
black = [0,0,0]
claret = [127,23,52]
purple2 = [107,26,219]
purple = [196,88,255]
light_purple = [195,138,235]
share_color = [5,197,255]
turquoise = [20,200,178]
yellow = [217,210,15]
main_bg_color = [180,226,216]
dark_yellow = [255,255,0]
light_pink = [255,174,200]
light_yellow = [237,233,152]
light_orange = [253,189,126]
light_orange2 = [255,220,186]
light_blue = [174,221,255]
green = [47,181,83]
gray_retro = [195,195,195]
light_green = [69,255,112]
gray = [70,70,70]
white = [255,255,255]
gold = [255,215,0]
silver = [192,192,192]
bronze = [205,127,50]
light_red = [255,95,95]
light_red2 = [255,170,170]
light_blue2 = [136,136,255]
light_blue3 = [210,210,255]
l_pink = [255,95,226]
l_pink2 = [255,172,240]
l_green = [30,206,185]
l_green2 = [180,255,246]

# if str_today[5:10] == '02-14':
#    green = light_pink

# background_color = share_color
time_delay = 0.18


title_font = pygame.font.Font('fonts\\freesansbold.ttf', 115)
name_font = pygame.font.Font('fonts\\Abraham-Regular.ttf', 80)
share_your_code_font = pygame.font.Font('fonts\\Abraham-Regular.ttf', 40)
scoreboard_font = pygame.font.Font('fonts\\Abraham-Regular.ttf', 45)
score_font = pygame.font.Font('fonts\\Abraham-Regular.ttf', 70)
font = pygame.font.Font('fonts\\freesansbold.ttf', 80)
he_font = pygame.font.Font('fonts\\Abraham-Regular.ttf', 85)
font60 = pygame.font.Font('fonts\\freesansbold.ttf', 60)
font14 = pygame.font.Font('fonts\\freesansbold.ttf', 17)
ffont = pygame.font.Font('fonts\\freesansbold.ttf', 20)
ffont25 = pygame.font.Font('fonts\\freesansbold.ttf', 25)
fffont = pygame.font.Font('fonts\\freesansbold.ttf', 30)
credit_font = pygame.font.Font('fonts\\freesansbold.ttf', 26)
large_font = pygame.font.Font('fonts\\freesansbold.ttf', 130)
you_won_font = pygame.font.Font('fonts\\freesansbold.ttf', 38)
keyboard_font = pygame.font.Font('fonts\\freesansbold.ttf', 45)
he_keyboard_font = pygame.font.Font('fonts\\Abraham-Regular.ttf', 50)
he_buttons_font = pygame.font.Font('fonts\\Abraham-Regular.ttf', 30)
he_font170 = pygame.font.Font('fonts\\Abraham-Regular.ttf', 170)
he_font60 = pygame.font.Font('fonts\\Abraham-Regular.ttf', 65)
he_font45 = pygame.font.Font('fonts\\Abraham-Regular.ttf', 45)
he_font40 = pygame.font.Font('fonts\\Abraham-Regular.ttf', 40)
he_font35 = pygame.font.Font('fonts\\Abraham-Regular.ttf', 35)
he_font55 = pygame.font.Font('fonts\\Abraham-Regular.ttf', 55)
he_font80 = pygame.font.Font('fonts\\Abraham-Regular.ttf', 80)
he_font30 = pygame.font.Font('fonts\\Abraham-Regular.ttf', 30)
he_font25 = pygame.font.Font('fonts\\Abraham-Regular.ttf', 25)
he_font20 = pygame.font.Font('fonts\\Abraham-Regular.ttf', 20)
he_font110 = pygame.font.Font('fonts\\Abraham-Regular.ttf', 110)
he_you_won_font = pygame.font.Font('fonts\\Abraham-Regular.ttf', 60)

title = title_font.render('WORDLE', True, black)
delete_button = ffont.render('DELETE', True, black)
daily_button = large_font.render('DAILY GAME', True, black)
enter_button = ffont.render('ENTER', True, black)

he_title = he_font170.render('◊ï◊ï◊®◊ì◊ú'[::-1], True, black)
he_delete_button = he_buttons_font.render('◊û◊ó◊ß'[::-1], True, black)
he_enter_button = he_keyboard_font.render('-->', True, black)
"""nexttitle = title_font.render('amit baby', True, black)"""

regular_letters = ['◊õ', '◊û', '◊†', '◊§', '◊¶']
ending_letters = ['◊ö', '◊ù', '◊ü', '◊£', '◊•']


pygame.time.set_timer(pygame.USEREVENT, 250)

# ◊î◊í◊ì◊®◊ï◊™ ◊î◊™◊ó◊ú◊™◊ô◊ï◊™
def default_settings():
    if langEN:
        a = "AAHED AALII AARGH AARTI ABACA ABACI ABACK ABACS ABAFT ABAKA ABAMP ABAND ABASE ABASH ABASK ABATE ABAYA ABBAS ABBED ABBES ABBEY ABBOT ABCEE ABEAM ABEAR ABELE ABETS ABHOR ABIDE ABIES ABLED ABLER ABLES ABLET ABLOW ABMHO ABODE ABOHM ABOIL ABOMA ABOON ABORD ABORE ABORT ABOUT ABOVE ABRAM ABRAY ABRIM ABRIN ABRIS ABSEY ABSIT ABUNA ABUNE ABUSE ABUTS ABUZZ ABYES ABYSM ABYSS ACAIS ACARI ACCAS ACCOY ACERB ACERS ACETA ACHED ACHES ACHOO ACIDS ACIDY ACING ACINI ACKEE ACKER ACMES ACMIC ACNED ACNES ACOCK ACOLD ACORN ACRED ACRES ACRID ACTED ACTIN ACTON ACTOR ACUTE ACYLS ADAGE ADAPT ADAWS ADAYS ADDAX ADDED ADDER ADDIO ADDLE ADEEM ADEPT ADHAN ADIEU ADIOS ADITS ADMAN ADMEN ADMIN ADMIT ADMIX ADOBE ADOBO ADOPT ADORE ADORN ADOWN ADOZE ADRAD ADRED ADSUM ADUKI ADULT ADUNC ADUST ADVEW ADYTA ADZED ADZES AECIA AEDES AEGIS AEONS AERIE AEROS AESIR AFALD AFARA AFARS AFEAR AFFIX AFIRE AFLAJ AFOOT AFORE AFOUL AFRIT AFROS AFTER AGAIN AGAMA AGAMI AGAPE AGARS AGAST AGATE AGAVE AGAZE AGENE AGENT AGERS AGGER AGGIE AGGRI AGGRO AGGRY AGHAS AGILA AGILE AGING AGIOS AGISM AGIST AGITA AGLEE AGLET AGLEY AGLOO AGLOW AGLUS AGMAS AGOGE AGONE AGONS AGONY AGOOD AGORA AGREE AGRIA AGRIN AGUED AGUES AGUTI AHEAD AHEAP AHENT AHIGH AHIND AHING AHINT AHOLD AHULL AHURU AIDED AIDER AIDES AIDOI AIDOS AIERY AIGAS AILED AIMED AIMER AINEE AINGA AIOLI AIRED AIRER AIRNS AIRTH AIRTS AISLE AITCH AITUS AIVER AIZLE AJIVA AJUGA AJWAN AKEES AKELA AKENE AKING AKITA AKKAS ALAAP ALACK ALAMO ALAND ALANE ALANG ALANS ALANT ALAPA ALAPS ALARM ALARY ALATE ALAYS ALBAS ALBEE ALBUM ALCID ALCOS ALDEA ALDER ALDOL ALECK ALECS ALEFS ALEFT ALEPH ALERT ALEWS ALEYE ALFAS ALGAE ALGAL ALGAS ALGID ALGIN ALGOR ALGUM ALIAS ALIBI ALIEN ALIFE ALIFS ALIGN ALIKE ALINE ALIST ALIVE ALIYA ALKIE ALKOS ALKYD ALKYL ALLAY ALLEE ALLEL ALLEY ALLIS ALLOD ALLOT ALLOW ALLOY ALLYL ALMAH ALMAS ALMEH ALMES ALMUD ALMUG ALODS ALOED ALOES ALOFT ALOHA ALOIN ALONE ALONG ALOOF ALOUD ALOWE ALPHA ALTAR ALTER ALTHO ALTOS ALULA ALUMS ALURE ALWAY AMAHS AMAIN AMASS AMATE AMAUT AMAZE AMBAN AMBER AMBIT AMBLE AMBOS AMBRY AMEBA AMEER AMEND AMENE AMENS AMENT AMIAS AMICE AMICI AMIDE AMIDO AMIDS AMIES AMIGA AMIGO AMINE AMINO AMINS AMIRS AMISS AMITY AMLAS AMMAN AMMON AMMOS AMNIA AMNIC AMNIO AMOKS AMOLE AMONG AMORT AMOUR AMOVE AMOWT AMPED AMPLE AMPLY AMPUL AMRIT AMUCK AMUSE AMYLS ANANA ANATA ANCHO ANCLE ANCON ANDRO ANEAR ANELE ANENT ANGAS ANGEL ANGER ANGLE ANGLO ANGRY ANGST ANIGH ANILE ANILS ANIMA ANIME ANIMI ANION ANISE ANKER ANKHS ANKLE ANKUS ANLAS ANNAL ANNAS ANNAT ANNEX ANNOY ANNUL ANOAS ANODE ANOLE ANOMY ANSAE ANTAE ANTAR ANTAS ANTED ANTES ANTIC ANTIS ANTRA ANTRE ANTSY ANVIL ANYON AORTA APACE APAGE APAID APART APAYD APAYS APEAK APEEK APERS APERT APERY APGAR APHID APHIS APIAN APING APIOL APISH APISM APNEA APODE APODS APOOP APORT APPAL APPAY APPEL APPLE APPLY APPRO APPUI APPUY APRES APRON APSES APSIS APSOS APTED APTER APTLY AQUAE AQUAS ARABA ARAKS ARAME ARARS ARBAS ARBOR ARCED ARCUS ARDEB ARDOR ARDRI AREAD AREAE AREAL AREAR AREAS ARECA AREDD AREDE AREFY AREIC ARENA ARENE AREPA ARERE ARETE ARETS ARETT ARGAL ARGAN ARGIL ARGLE ARGOL ARGON ARGOT ARGUE ARGUS ARHAT ARIAS ARIEL ARIKI ARILS ARIOT ARISE ARISH ARKED ARLED ARLES ARMED ARMER ARMET ARMIL ARMOR ARNAS ARNUT AROBA AROHA AROID AROMA AROSE ARPAS ARPEN ARRAH ARRAS ARRAY ARRET ARRIS ARROW ARSED ARSES ARSEY ARSIS ARSON ARTAL ARTEL ARTIC ARTIS ARTSY ARUHE ARUMS ARVAL ARVOS ARYLS ASANA ASCOT ASCUS ASDIC ASHED ASHEN ASHES ASHET ASIDE ASKED ASKER ASKEW ASKOI ASKOS ASPEN ASPER ASPIC ASPIS ASPRO ASSAI ASSAM ASSAY ASSES ASSET ASSEZ ASSOT ASTER ASTIR ASTUN ASWAY ASWIM ASYLA ATAPS ATAXY ATIGI ATILT ATIMY ATLAS ATMAN ATMAS ATOCS ATOKE ATOKS ATOLL ATOMS ATOMY ATONE ATONY ATOPY ATRIA ATRIP ATTAP ATTAR ATTIC ATUAS AUDAD AUDIO AUDIT AUGER AUGHT AUGUR AULAS AULIC AULOI AULOS AUMIL AUNES AUNTS AUNTY AURAE AURAL AURAR AURAS AUREI AURES AURIC AURIS AURUM AUTOS AUXIN AVAIL AVALE AVANT AVAST AVELS AVENS AVERS AVERT AVGAS AVIAN AVINE AVION AVISE AVISO AVIZE AVOID AVOWS AVYZE AWAIT AWAKE AWARD AWARE AWARN AWASH AWATO AWAVE AWAYS AWDLS AWEEL AWETO AWFUL AWING AWMRY AWNED AWNER AWOKE AWOLS AWORK AXELS AXIAL AXILE AXILS AXING AXIOM AXION AXITE AXLED AXLES AXMAN AXMEN AXOID AXONE AXONS AYAHS AYELP AYGRE AYINS AYONT AYRES AYRIE AZANS AZIDE AZIDO AZINE AZLON AZOIC AZOLE AZONS AZOTE AZOTH AZUKI AZURE AZURN AZURY AZYGY AZYME AZYMS BAAED BAALS BABAS BABEL BABES BABKA BABOO BABUL BABUS BACCA BACCO BACCY BACHA BACHS BACKS BACON BADDY BADGE BADLY BAELS BAFFS BAFFY BAFTS BAGEL BAGGY BAGHS BAGIE BAHTS BAHUT BAILS BAIRN BAITH BAITS BAIZA BAIZE BAJAN BAJRA BAJRI BAJUS BAKED BAKEN BAKER BAKES BAKRA BALAS BALDS BALDY BALED BALER BALES BALKS BALKY BALLS BALLY BALMS BALMY BALOO BALSA BALTI BALUN BALUS BAMBI BANAK BANAL BANCO BANCS BANDA BANDH BANDS BANDY BANED BANES BANGS BANIA BANJO BANKS BANNS BANTS BANTU BANTY BAPUS BARBE BARBS BARBY BARCA BARDE BARDO BARDS BARDY BARED BARER BARES BARFS BARGE BARIC BARKS BARKY BARMS BARMY BARNS BARNY BARON BARPS BARRA BARRE BARRO BARRY BARYE BASAL BASAN BASED BASER BASES BASHO BASIC BASIL BASIN BASIS BASKS BASON BASSE BASSI BASSO BASSY BASTA BASTE BASTI BASTO BASTS BATCH BATED BATES BATHE BATHS BATIK BATON BATTA BATTS BATTU BATTY BAUDS BAUKS BAULK BAURS BAVIN BAWDS BAWDY BAWLS BAWNS BAWRS BAWTY BAYED BAYES BAYLE BAYOU BAYTS BAZAR BAZOO BEACH BEADS BEADY BEAKS BEAKY BEAMS BEAMY BEANO BEANS BEANY BEARD BEARE BEARS BEAST BEATH BEATS BEATY BEAUS BEAUT BEAUX BEBOP BECAP BECKE BECKS BEDAD BEDEL BEDES BEDEW BEDIM BEDYE BEECH BEEDI BEEFS BEEFY BEEPS BEERS BEERY BEETS BEFIT BEFOG BEGAD BEGAN BEGAR BEGAT BEGEM BEGET BEGIN BEGOT BEGUM BEGUN BEIGE BEIGY BEING BEKAH BELAH BELAR BELAY BELCH BELEE BELGA BELIE BELLE BELLS BELLY BELON BELOW BELTS BEMAD BEMAS BEMIX BEMUD BENCH BENDS BENDY BENES BENET BENIS BENNE BENNI BENNY BENTO BENTS BENTY BEPAT BERAY BERES BERET BERGS BERKO BERKS BERME BERMS BEROB BERRY BERTH BERYL BESAT BESAW BESEE BESES BESET BESIT BESOM BESOT BESTI BESTS BETAS BETED BETEL BETES BETHS BETID BETON BETTA BETTY BEVEL BEVER BEVOR BEVUE BEVVY BEWET BEWIG BEZEL BEZES BEZIL BHAJI BHANG BHELS BHOOT BHUNA BHUTS BIALI BIALY BIBBS BIBLE BICCY BICEP BICES BIDDY BIDED BIDER BIDES BIDET BIDIS BIDON BIELD BIERS BIFFO BIFFS BIFFY BIFID BIGAE BIGGS BIGGY BIGHA BIGHT BIGLY BIGOS BIGOT BIJOU BIKED BIKER BIKES BIKIE BILBO BILBY BILED BILES BILGE BILGY BILKS BILLS BILLY BIMAH BIMAS BIMBO BINAL BINDI BINDS BINER BINES BINGE BINGO BINGS BINGY BINIT BINKS BINTS BIOGS BIOME BIONT BIOTA BIPED BIPOD BIRCH BIRDS BIRKS BIRLE BIRLS BIROS BIRRS BIRSE BIRSY BIRTH BISES BISKS BISON BITCH BITER BITES BITOS BITOU BITSY BITTE BITTS BITTY BIVIA BIVVY BIZES BIZZO BIZZY BLABS BLACK BLADE BLADS BLADY BLAER BLAES BLAFF BLAGS BLAHS BLAIN BLAME BLAMS BLAND BLANK BLARE BLART BLASE BLASH BLAST BLATE BLATS BLATT BLAUD BLAWN BLAWS BLAYS BLAZE BLEAK BLEAR BLEAT BLEBS BLEED BLEEP BLEES BLEND BLENT BLERT BLESS BLEST BLETS BLEYS BLIMP BLIMY BLIND BLING BLINI BLINK BLINS BLINY BLIPS BLISS BLIST BLITE BLITZ BLIVE BLOAT BLOBS BLOCK BLOCS BLOGS BLOKE BLOND BLOOD BLOOM BLOOP BLORE BLOTS BLOWN BLOWS BLOWY BLUBS BLUDE BLUDY BLUED BLUER BLUES BLUET BLUEY BLUFF BLUID BLUME BLUNK BLUNT BLURB BLURS BLURT BLUSH BLYPE BOABS BOAKS BOARD BOARS BOART BOAST BOATS BOBAC BOBAK BOBAS BOBBY BOBOL BOCCA BOCCE BOCCI BOCHE BOCKS BODED BODES BODGE BODLE BOEPS BOETS BOEUF BOFFO BOFFS BOGAN BOGEY BOGGY BOGIE BOGLE BOGUS BOHEA BOHOS BOILS BOING BOINK BOITE BOKED BOKES BOKOS BOLAR BOLAS BOLDS BOLES BOLIX BOLLS BOLOS BOLTS BOLUS BOMAS BOMBE BOMBO BOMBS BONCE BONDS BONED BONER BONES BONEY BONGO BONGS BONIE BONKS BONNE BONNY BONUS BONZA BONZE BOOBS BOOBY BOODY BOOED BOOFY BOOGY BOOHS BOOKS BOOKY BOOLS BOOMS BOOMY BOONG BOONS BOORD BOORS BOOSE BOOST BOOTH BOOTS BOOTY BOOZE BOOZY BORAK BORAL BORAS BORAX BORDE BORDS BORED BOREE BOREL BORER BORES BORGO BORIC BORKS BORMS BORNA BORNE BORON BORTS BORTY BORTZ BOSKS BOSKY BOSOM BOSON BOSSY BOSUN BOTAS BOTCH BOTEL BOTHY BOTTE BOTTS BOTTY BOUGE BOUGH BOUKS BOULE BOULT BOUND BOUNS BOURD BOURG BOURN BOUSE BOUSY BOUTS BOVID BOWAT BOWED BOWEL BOWER BOWES BOWET BOWIE BOWLS BOWNE BOWRS BOWSE BOXED BOXEN BOXER BOXES BOYAR BOYAU BOYED BOYFS BOYGS BOYLA BOYOS BOYSY BOZOS BRAAI BRACE BRACH BRACK BRACT BRADS BRAES BRAGS BRAID BRAIL BRAIN BRAKE BRAKS BRAKY BRAME BRAND BRANK BRANS BRANT BRASH BRASS BRAST BRATS BRAVA BRAVE BRAVI BRAVO BRAWL BRAWN BRAWS BRAXY BRAYS BRAZA BRAZE BREAD BREAK BREAM BREDE BREDS BREED BREEM BREER BREES BREID BREIS BREME BRENS BRENT BRERE BRERS BREVE BREWS BREYS BRIAR BRIBE BRICK BRIDE BRIEF BRIER BRIES BRIGS BRIKS BRILL BRIMS BRINE BRING BRINK BRINS BRINY BRIOS BRISE BRISK BRISS BRITH BRITS BRITT BRIZE BROAD BROCH BROCK BRODS BROGH BROGS BROIL BROKE BROME BROMO BRONC BROND BROOD BROOK BROOL BROOM BROOS BROSE BROSY BROTH BROWN BROWS BRUGH BRUIN BRUIT BRULE BRUME BRUNG BRUNT BRUSH BRUSK BRUST BRUTE BRUTS BUATS BUAZE BUBAL BUBAS BUBBA BUBBY BUBUS BUCHU BUCKO BUCKS BUCKU BUDAS BUDDY BUDGE BUDIS BUDOS BUFFA BUFFE BUFFI BUFFO BUFFS BUFFY BUFOS BUGGY BUGLE BUHLS BUHRS BUIKS BUILD BUILT BUIST BUKES BULBS BULGE BULGY BULKS BULKY BULLA BULLS BULLY BULSE BUMBO BUMFS BUMPH BUMPS BUMPY BUNAS BUNCE BUNCH BUNCO BUNDE BUNDH BUNDS BUNDT BUNDU BUNDY BUNGS BUNGY BUNIA BUNJE BUNJY BUNKO BUNKS BUNNS BUNNY BUNTS BUNTY BUNYA BUOYS BUPPY BURAN BURAS BURBS BURDS BURET BURGH BURGS BURIN BURKA BURKE BURKS BURLS BURLY BURNS BURNT BUROO BURPS BURQA BURRO BURRS BURRY BURSA BURSE BURST BUSBY BUSED BUSES BUSHY BUSKS BUSKY BUSSU BUSTI BUSTS BUSTY BUTCH BUTEO BUTES BUTLE BUTTE BUTTS BUTTY BUTUT BUTYL BUXOM BUYER BUZZY BWANA BWAZI BYDED BYDES BYKED BYKES BYLAW BYRES BYRLS BYSSI BYTES BYWAY CAAED CABAL CABAS CABBY CABER CABIN CABLE CABOB CABOC CABRE CACAO CACAS CACHE CACKY CACTI CADDY CADEE CADES CADET CADGE CADGY CADIE CADIS CADRE CAECA CAESE CAFES CAFFS CAGED CAGER CAGES CAGEY CAGOT CAHOW CAIDS CAINS CAIRD CAIRN CAJON CAJUN CAKED CAKES CAKEY CALFS CALID CALIF CALIX CALKS CALLA CALLS CALMS CALMY CALOS CALPA CALPS CALVE CALYX CAMAN CAMAS CAMEL CAMEO CAMES CAMIS CAMOS CAMPI CAMPO CAMPS CAMPY CAMUS CANAL CANDY CANED CANEH CANER CANES CANGS CANID CANNA CANNS CANNY CANOE CANON CANSO CANST CANTO CANTS CANTY CAPAS CAPED CAPER CAPES CAPHS CAPIZ CAPLE CAPON CAPOS CAPOT CAPUL CAPUT CARAP CARAT CARBO CARBS CARBY CARDI CARDS CARDY CARED CARER CARES CARET CAREX CARGO CARKS CARLE CARLS CARNS CARNY CAROB CAROL CAROM CARPI CARPS CARRS CARRY CARSE CARTA CARTE CARTS CARVE CARVY CASAS CASCO CASED CASES CASKS CASKY CASTE CASTS CASUS CATCH CATER CATES CATTY CAUDA CAUKS CAULD CAULK CAULS CAUMS CAUPS CAUSA CAUSE CAVAS CAVED CAVEL CAVER CAVES CAVIE CAVIL CAWED CAWKS CAXON CEASE CEAZE CEBID CECAL CECUM CEDAR CEDED CEDER CEDES CEDIS CEIBA CEILI CEILS CELEB CELLA CELLI CELLO CELLS CELOM CELTS CENSE CENTO CENTS CENTU CEORL CEPES CERCI CERED CERES CERGE CERIA CERIC CERNE CEROS CERTS CESSE CESTA CESTI CETES CETYL CHACE CHACK CHACO CHADO CHADS CHAFE CHAFF CHAFT CHAIN CHAIR CHAIS CHALK CHALS CHAMP CHAMS CHANG CHANK CHANT CHAOS CHAPE CHAPS CHAPT CHARA CHARD CHARE CHARK CHARM CHARR CHARS CHART CHARY CHASE CHASM CHATS CHAVE CHAVS CHAWK CHAWS CHAYA CHAYS CHEAP CHEAT CHECK CHEEK CHEEP CHEER CHEFS CHEKA CHELA CHELP CHEMO CHERE CHERT CHESS CHEST CHETH CHEVY CHEWS CHEWY CHIAO CHIAS CHIBS CHICA CHICH CHICK CHICO CHICS CHIDE CHIEF CHIEL CHIKS CHILD CHILE CHILI CHILL CHIMB CHIME CHIMO CHIMP CHINA CHINE CHINK CHINO CHINS CHIPS CHIRK CHIRL CHIRM CHIRO CHIRP CHIRR CHIRT CHIRU CHITS CHIVE CHIVS CHIVY CHIZZ CHOCK CHOCO CHOCS CHODE CHOGS CHOIR CHOKE CHOKO CHOKY CHOLA CHOLI CHOLO CHOMP CHONS CHOOF CHOOK CHOOM CHOPS CHORD CHORE CHOSE CHOTA CHOTT CHOUT CHOUX CHOWK CHOWS CHUBS CHUCK CHUFA CHUFF CHUGS CHUMP CHUMS CHUNK CHURL CHURN CHURR CHUSE CHUTE CHYLE CHYME CHYND CIAOS CIBOL CIDED CIDER CIDES CIELS CIGAR CIGGY CILIA CILLS CIMAR CIMEX CINCH CINCT CINES CIONS CIPPI CIRCA CIRCS CIRES CIRLS CIRRI CISCO CISSY CISTS CITAL CITED CITER CITES CIVES CIVET CIVIC CIVIE CIVIL CIVVY CLACH CLACK CLADE CLADS CLAES CLAGS CLAIM CLAME CLAMP CLAMS CLANG CLANK CLANS CLAPS CLAPT CLARO CLART CLARY CLASH CLASP CLASS CLAST CLATS CLAUT CLAVE CLAVI CLAWS CLAYS CLEAN CLEAR CLEAT CLECK CLEEK CLEEP CLEFS CLEFT CLEGS CLEIK CLEMS CLEPE CLEPT CLERK CLEVE CLEWS CLICK CLIED CLIES CLIFF CLIFT CLIMB CLIME CLINE CLING CLINK CLINT CLIPE CLIPS CLIPT CLOAK CLOAM CLOCK CLODS CLOFF CLOGS CLOKE CLOMB CLOMP CLONE CLONK CLONS CLOOP CLOOT CLOPS CLOSE CLOTE CLOTH CLOTS CLOUD CLOUR CLOUS CLOUT CLOVE CLOWN CLOWS CLOYE CLOYS CLOZE CLUBS CLUCK CLUED CLUES CLUMP CLUNG CLUNK CLYPE CNIDA COACH COACT COALA COALS COALY COAPT COARB COAST COATE COATI COATS COBBS COBBY COBIA COBLE COBRA COBZA COCAS COCCI COCCO COCKS COCKY COCOA COCOS CODAS CODEC CODED CODEN CODER CODES CODEX CODON COEDS COFFS COGIE COGON COGUE COHAB COHOE COHOG COHOS COIFS COIGN COILS COINS COIRS COITS COKED COKES COLAS COLBY COLDS COLED COLES COLEY COLIC COLIN COLLS COLLY COLOG COLON COLOR COLTS COLZA COMAE COMAL COMAS COMBE COMBI COMBO COMBS COMBY COMER COMES COMET COMFY COMIC COMIX COMMA COMMO COMMS COMMY COMPO COMPS COMPT COMTE COMUS CONCH CONDO CONED CONES CONEY CONFS CONGA CONGE CONGO CONIA CONIC CONIN CONKS CONKY CONNE CONNS CONTE CONTO CONUS CONVO COOCH COOED COOEE COOER COOEY COOFS COOKS COOKY COOLS COOLY COOMB COOMS COOMY COONS COOPS COOPT COOST COOTS COOZE COPAL COPAY COPED COPEN COPER COPES COPPY COPRA COPSE COPSY CORAL CORAM CORBE CORBY CORDS CORED CORER CORES COREY CORGI CORIA CORKS CORKY CORMS CORNI CORNO CORNS CORNU CORNY CORPS CORSE CORSO COSEC COSED COSES COSET COSEY COSIE COSTA COSTE COSTS COTAN COTED COTES COTHS COTTA COTTS COUCH COUDE COUGH COULD COUNT COUPE COUPS COURB COURD COURE COURS COURT COUTH COVED COVEN COVER COVES COVET COVEY COVIN COWAL COWAN COWED COWER COWKS COWLS COWPS COWRY COXAE COXAL COXED COXES COYED COYER COYLY COYPU COZED COZEN COZES COZEY COZIE CRAAL CRABS CRACK CRAFT CRAGS CRAIC CRAIG CRAKE CRAME CRAMP CRAMS CRANE CRANK CRANS CRAPE CRAPS CRAPY CRARE CRASH CRASS CRATE CRAVE CRAWL CRAWS CRAYS CRAZE CRAZY CREAK CREAM CREDO CREDS CREED CREEK CREEL CREEP CREES CREME CREMS CRENA CREPE CREPT CREPY CRESS CREST CREWE CREWS CRIBS CRICK CRIED CRIER CRIES CRIME CRIMP CRIMS CRINE CRIOS CRIPE CRISE CRISP CRITH CRITS CROAK CROCI CROCK CROCS CROFT CROGS CROMB CROME CRONE CRONK CRONY CROOK CROOL CROON CROPS CRORE CROSS CROST CROUP CROUT CROWD CROWN CROWS CROZE CRUCK CRUDE CRUDS CRUDY CRUEL CRUES CRUET CRUMB CRUMP CRUOR CRURA CRUSE CRUSH CRUST CRUSY CRUVE CRWTH CRYPT CTENE CUBBY CUBEB CUBED CUBER CUBES CUBIC CUBIT CUDDY CUFFO CUFFS CUIFS CUING CUISH CUITS CUKES CULCH CULET CULEX CULLS CULLY CULMS CULPA CULTI CULTS CULTY CUMEC CUMIN CUNDY CUNEI CUNTS CUPEL CUPID CUPPA CUPPY CURAT CURBS CURCH CURDS CURDY CURED CURER CURES CURET CURFS CURIA CURIE CURIO CURLI CURLS CURLY CURNS CURNY CURRS CURRY CURSE CURSI CURST CURVE CURVY CUSEC CUSHY CUSKS CUSPS CUSSO CUTCH CUTER CUTES CUTEY CUTIE CUTIN CUTIS CUTTO CUTTY CUTUP CUVEE CWTCH CYANO CYANS CYBER CYCAD CYCAS CYCLE CYCLO CYDER CYLIX CYMAE CYMAR CYMAS CYMES CYMOL CYNIC CYSTS CYTES CYTON CZARS DABBA DACES DACHA DACKS DADAH DADAS DADDY DADOS DAFFS DAFFY DAGGA DAGGY DAGOS DAHLS DAILY DAINE DAINT DAIRY DAISY DAKER DALED DALES DALIS DALLE DALLY DALTS DAMAN DAMAR DAMES DAMME DAMNS DAMPS DAMPY DANCE DANDY DANGS DANIO DANKS DANNY DANTS DARAF DARBS DARCY DARED DARER DARES DARGA DARGS DARIC DARIS DARKS DARKY DARNS DARRE DARTS DARZI DASHI DASHY DATAL DATED DATER DATES DATOS DATTO DATUM DAUBE DAUBS DAUBY DAUDS DAULT DAUNT DAURS DAUTS DAVEN DAVIT DAWAH DAWDS DAWED DAWEN DAWKS DAWNS DAWTS DAYAN DAYCH DAYNT DAZED DAZER DAZES DEADS DEAIR DEALS DEALT DEANS DEARE DEARN DEARS DEARY DEASH DEATH DEAVE DEAWS DEAWY DEBAG DEBAR DEBBY DEBEL DEBES DEBIT DEBTS DEBUD DEBUG DEBUS DEBUT DEBYE DECAD DECAF DECAL DECAY DECKO DECKS DECOR DECOS DECOY DECRY DEDAL DEEDS DEEDY DEELY DEEMS DEENS DEEPS DEERE DEERS DEETS DEEVE DEEVS DEFAT DEFER DEFFO DEFIS DEFOG DEGAS DEGUM DEICE DEIDS DEIFY DEIGN DEILS DEISM DEIST DEITY DEKED DEKES DEKKO DELAY DELED DELES DELFS DELFT DELIS DELLS DELLY DELOS DELPH DELTA DELTS DELVE DEMAN DEMES DEMIC DEMIT DEMOB DEMON DEMOS DEMPT DEMUR DENAR DENAY DENES DENET DENIM DENIS DENSE DENTS DEOXY DEPOT DEPTH DERAT DERAY DERBY DERED DERES DERIG DERMA DERMS DERNS DEROS DERRO DERRY DERTH DERVS DESEX DESHI DESKS DESSE DETER DETOX DEUCE DEVAS DEVEL DEVIL DEVON DEVOT DEWAN DEWAR DEWAX DEWED DEXES DEXIE DHAKS DHALS DHOBI DHOLE DHOLL DHOLS DHOTI DHOWS DHUTI DIACT DIALS DIARY DIAZO DIBBS DICED DICER DICES DICEY DICHT DICKS DICKY DICOT DICTA DICTS DICTY DIDDY DIDIE DIDOS DIDST DIEBS DIENE DIETS DIFFS DIGHT DIGIT DIKAS DIKED DIKER DIKES DIKEY DILDO DILLI DILLS DILLY DIMER DIMES DIMLY DIMPS DINAR DINED DINER DINES DINGE DINGO DINGS DINGY DINIC DINKS DINKY DINNA DINOS DINTS DIODE DIOLS DIOTA DIPPY DIPSO DIRAM DIRER DIRGE DIRKE DIRKS DIRLS DIRTS DIRTY DISAS DISCI DISCO DISCS DISHY DISKS DISME DITAL DITAS DITCH DITED DITES DITSY DITTO DITTS DITTY DITZY DIVAN DIVAS DIVED DIVER DIVES DIVIS DIVOT DIVVY DIWAN DIXIE DIXIT DIZEN DIZZY DJINN DJINS DOABS DOATS DOBBY DOBIE DOBLA DOBRA DOBRO DOCHT DOCKS DOCOS DODDY DODGE DODGY DODOS DOEKS DOERS DOEST DOETH DOFFS DOGES DOGEY DOGGO DOGGY DOGIE DOGMA DOHYO DOILT DOILY DOING DOITS DOJOS DOLCE DOLCI DOLED DOLES DOLIA DOLLS DOLLY DOLMA DOLOR DOLOS DOLTS DOMAL DOMED DOMES DOMIC DONAH DONAS DONEE DONER DONGA DONGS DONKO DONNA DONNE DONNY DONOR DONSY DONUT DOOBS DOODY DOOKS DOOLE DOOLS DOOLY DOOMS DOOMY DOONA DOORN DOORS DOOZY DOPAS DOPED DOPER DOPES DOPEY DORAD DORBA DORBS DOREE DORIC DORIS DORKS DORKY DORMS DORMY DORPS DORRS DORSA DORSE DORTS DORTY DOSED DOSEH DOSER DOSES DOTAL DOTED DOTER DOTES DOTTY DOUAR DOUBT DOUCE DOUCS DOUGH DOUKS DOULA DOUMA DOUMS DOUPS DOURA DOUSE DOUTS DOVED DOVEN DOVER DOVES DOVIE DOWAR DOWDS DOWDY DOWED DOWEL DOWER DOWIE DOWLE DOWLS DOWLY DOWNA DOWNS DOWNY DOWPS DOWRY DOWSE DOWTS DOXIE DOYEN DOYLY DOZED DOZEN DOZER DOZES DRABS DRACK DRACO DRAFF DRAFT DRAGS DRAIL DRAIN DRAKE DRAMA DRAMS DRANK DRANT DRAPE DRAPS DRATS DRAVE DRAWL DRAWN DRAWS DRAYS DREAD DREAM DREAR DRECK DREED DREES DREGS DREKS DRENT DRERE DRESS DREST DREYS DRIBS DRICE DRIED DRIER DRIES DRIFT DRILL DRILY DRINK DRIPS DRIPT DRIVE DROID DROIL DROIT DROLE DROLL DROME DRONE DRONY DROOB DROOG DROOK DROOL DROOP DROPS DROPT DROSS DROUK DROVE DROWN DROWS DRUBS DRUGS DRUID DRUMS DRUNK DRUPE DRUSE DRUSY DRUXY DRYAD DRYER DRYLY DSOBO DSOMO DUADS DUALS DUANS DUARS DUBBO DUCAL DUCAT DUCES DUCHY DUCKS DUCKY DUCTS DUDDY DUDED DUDES DUELS DUETS DUETT DUFFS DUFUS DUING DUITS DUKAS DUKED DUKES DUKKA DULES DULIA DULLS DULLY DULSE DUMAS DUMBO DUMBS DUMKA DUMKY DUMMY DUMPS DUMPY DUNAM DUNCE DUNCH DUNES DUNGS DUNGY DUNKS DUNNO DUNNY DUNSH DUNTS DUOMI DUOMO DUPED DUPER DUPES DUPLE DUPLY DUPPY DURAL DURAS DURED DURES DURGY DURNS DUROC DUROS DUROY DURRA DURRS DURRY DURST DURUM DURZI DUSKS DUSKY DUSTS DUSTY DUTCH DUVET DUXES DWAAL DWALE DWALM DWAMS DWANG DWARF DWAUM DWEEB DWELL DWELT DWILE DWINE DYADS DYERS DYING DYKED DYKES DYKEY DYNEL DYNES DZHOS EAGER EAGLE EAGRE EALES EANED EARDS EARED EARLS EARLY EARNS EARST EARTH EASED EASEL EASER EASES EASLE EASTS EATEN EATER EATHE EAVED EAVES EBBED EBBET EBONS EBONY EBOOK ECADS ECHED ECHES ECHOS ECLAT ECRUS EDEMA EDGED EDGER EDGES EDICT EDIFY EDILE EDITS EDUCE EDUCT EEJIT EERIE EEVEN EEVNS EFFED EGADS EGERS EGEST EGGAR EGGED EGGER EGMAS EGRET EHING EIDER EIDOS EIGHT EIGNE EIKED EIKON EILDS EISEL EJECT EKING EKKAS ELAIN ELAND ELANS ELATE ELBOW ELCHI ELDER ELDIN ELECT ELEGY ELEMI ELFED ELFIN ELIAD ELIDE ELINT ELITE ELMEN ELOGE ELOGY ELOIN ELOPE ELOPS ELPEE ELSIN ELUDE ELUTE ELVAN ELVER ELVES EMACS EMAIL EMBAR EMBAY EMBED EMBER EMBOG EMBOW EMBOX EMBUS EMCEE EMEER EMEND EMERY EMEUS EMIRS EMITS EMMAS EMMER EMMET EMMEW EMMYS EMONG EMOTE EMOVE EMPTS EMPTY EMULE EMURE EMYDE EMYDS ENACT ENARM ENATE ENDED ENDER ENDEW ENDOW ENDUE ENEMA ENEMY ENEWS ENFIX ENIAC ENJOY ENLIT ENMEW ENNOG ENNUI ENOKI ENOLS ENORM ENOWS ENROL ENSEW ENSKY ENSUE ENTER ENTIA ENTRY ENURE ENVOI ENVOY ENZYM EORLS EOSIN EPACT EPEES EPHAH EPHAS EPHOD EPHOR EPICS EPOCH EPODE EPOPT EPOXY EPRIS EPROM EQUAL EQUID EQUIP ERASE ERBIA ERECT EREVS ERGON ERGOS ERGOT ERICA ERICK ERICS ERING ERNED ERNES ERODE EROSE ERRED ERROR ERSES ERUCT ERUGO ERUPT ERUVS ERVEN ERVIL ESCAR ESCOT ESILE ESKAR ESKER ESNES ESSAY ESSES ESTER ESTOC ESTOP ESTRO ETAGE ETAPE ETATS ETENS ETHAL ETHER ETHIC ETHOS ETHYL ETNAS ETTIN ETTLE ETUDE ETUIS ETWEE ETYMA EUGHS EUKED EUPAD EUROS EUSOL EVADE EVENS EVENT EVERT EVERY EVETS EVHOE EVICT EVILS EVITE EVOHE EVOKE EWERS EWEST EWHOW EWKED EXACT EXALT EXAMS EXCEL EXEAT EXECS EXEEM EXEME EXERT EXIES EXILE EXINE EXING EXIST EXITS EXODE EXONS EXPAT EXPEL EXPOS EXTOL EXTRA EXUDE EXULS EXULT EXURB EYASS EYERS EYING EYOTS EYRAS EYRES EYRIE EYRIR FABLE FACED FACER FACES FACET FACIA FACTS FADDY FADED FADER FADES FADGE FADOS FAENA FAERY FAFFS FAGGY FAGIN FAGOT FAIKS FAILS FAINE FAINS FAINT FAIRS FAIRY FAITH FAKED FAKER FAKES FAKEY FAKIR FALAJ FALLS FALSE FAMED FAMES FANAL FANCY FANDS FANES FANGA FANGO FANGS FANKS FANNY FANON FANOS FANUM FAQIR FARAD FARCE FARCI FARCY FARDS FARED FARER FARES FARLE FARLS FARMS FAROS FARSE FARTS FASCI FASTI FASTS FATAL FATED FATES FATLY FATSO FATTY FATWA FAUGH FAULD FAULT FAUNA FAUNS FAURD FAUTS FAUVE FAVAS FAVEL FAVER FAVES FAVOR FAVUS FAWNS FAWNY FAXED FAXES FAYED FAYER FAYNE FAYRE FAZED FAZES FEALS FEARE FEARS FEASE FEAST FEATS FEAZE FECAL FECES FECHT FECIT FECKS FEDEX FEEBS FEEDS FEELS FEENS FEERS FEESE FEEZE FEHME FEIGN FEINT FEIST FELID FELLA FELLS FELLY FELON FELTS FELTY FEMAL FEMES FEMME FEMMY FEMUR FENCE FENDS FENDY FENIS FENKS FENNY FENTS FEODS FEOFF FERAL FERER FERES FERIA FERLY FERMI FERMS FERNS FERNY FERRY FESSE FESTA FESTS FESTY FETAL FETAS FETCH FETED FETES FETID FETOR FETTA FETTS FETUS FETWA FEUAR FEUDS FEUED FEVER FEWER FEYED FEYER FEYLY FEZES FEZZY FIARS FIATS FIBER FIBRE FIBRO FICES FICHE FICHU FICIN FICOS FICUS FIDGE FIDOS FIEFS FIELD FIEND FIENT FIERE FIERS FIERY FIEST FIFED FIFER FIFES FIFTH FIFTY FIGHT FIGOS FIKED FIKES FILAR FILCH FILED FILER FILES FILET FILLE FILLO FILLS FILLY FILMI FILMS FILMY FILOS FILTH FILUM FINAL FINCA FINCH FINDS FINED FINER FINES FINIS FINKS FINNY FINOS FIORD FIQUE FIRED FIRER FIRES FIRIE FIRKS FIRMS FIRNS FIRRY FIRST FIRTH FISCS FISHY FISKS FISTS FISTY FITCH FITLY FITNA FITTE FITTS FIVER FIVES FIXED FIXER FIXES FIXIT FIZZY FJELD FJORD FLABS FLACK FLAFF FLAGS FLAIL FLAIR FLAKE FLAKS FLAKY FLAME FLAMM FLAMS FLAMY FLANK FLANS FLAPS FLARE FLARY FLASH FLASK FLATS FLAWN FLAWS FLAWY FLAXY FLAYS FLEAM FLEAS FLECK FLEER FLEES FLEET FLEGS FLEME FLESH FLEWS FLEXO FLEYS FLICK FLICS FLIED FLIER FLIES FLIMP FLIMS FLING FLINT FLIPS FLIRS FLIRT FLISK FLITE FLITS FLITT FLOAT FLOCK FLOCS FLOES FLOGS FLONG FLOOD FLOOR FLOPS FLORA FLORS FLORY FLOSH FLOSS FLOTA FLOTE FLOUR FLOUT FLOWN FLOWS FLUBS FLUED FLUES FLUEY FLUFF FLUID FLUKE FLUKY FLUME FLUMP FLUNG FLUNK FLUOR FLURR FLUSH FLUTE FLUTY FLUYT FLYBY FLYER FLYPE FLYTE FOALS FOAMS FOAMY FOCAL FOCUS FOEHN FOGEY FOGGY FOGIE FOGLE FOHNS FOIDS FOILS FOINS FOIST FOLDS FOLEY FOLIA FOLIC FOLIE FOLIO FOLKS FOLKY FOLLY FOMES FONDA FONDS FONDU FONLY FONTS FOODS FOODY FOOLS FOOTS FOOTY FORAM FORAY FORBS FORBY FORCE FORDO FORDS FOREL FORES FOREX FORGE FORGO FORKS FORKY FORME FORMS FORTE FORTH FORTS FORTY FORUM FORZA FORZE FOSSA FOSSE FOUAT FOUDS FOUER FOUET FOULE FOULS FOUND FOUNT FOURS FOUTH FOVEA FOWLS FOWTH FOXED FOXES FOXIE FOYER FOYLE FOYNE FRABS FRACK FRACT FRAGS FRAIL FRAIM FRAME FRANC FRANK FRAPE FRAPS FRASS FRATE FRATI FRATS FRAUD FRAUS FRAYS FREAK FREED FREER FREES FREET FREIT FREMD FRENA FREON FRERE FRESH FRETS FRIAR FRIBS FRIED FRIER FRIES FRIGS FRILL FRISE FRISK FRIST FRITH FRITS FRITT FRITZ FRIZE FRIZZ FROCK FROES FROGS FROND FRONS FRONT FRORE FRORN FRORY FROSH FROST FROTH FROWN FROWS FROWY FROZE FRUGS FRUIT FRUMP FRUSH FRUST FRYER FUBAR FUBBY FUBSY FUCKS FUCUS FUDDY FUDGE FUELS FUERO FUFFS FUFFY FUGAL FUGGY FUGIE FUGIO FUGLE FUGLY FUGUE FUGUS FUJIS FULLS FULLY FUMED FUMER FUMES FUMET FUNDI FUNDS FUNDY FUNGI FUNGO FUNGS FUNKS FUNKY FUNNY FURAL FURAN FURCA FURLS FUROL FUROR FURRS FURRY FURTH FURZE FURZY FUSED FUSEE FUSEL FUSES FUSIL FUSSY FUSTS FUSTY FUTON FUZED FUZEE FUZES FUZIL FUZZY FYCES FYKED FYKES FYLES FYRDS FYTTE GABBY GABLE GADDI GADES GADGE GADID GADIS GADJE GADJO GADSO GAFFE GAFFS GAGED GAGER GAGES GAIDS GAILY GAINS GAIRS GAITS GAITT GAJOS GALAH GALAS GALAX GALEA GALES GALLS GALLY GALOP GALUT GALVO GAMAS GAMAY GAMBA GAMBE GAMBO GAMBS GAMED GAMER GAMES GAMEY GAMIC GAMIN GAMMA GAMME GAMMY GAMPS GAMUT GANCH GANDY GANEF GANEV GANGS GANJA GANOF GANTS GAOLS GAPED GAPER GAPES GAPOS GAPPY GARBE GARBO GARBS GARDA GARIS GARNI GARRE GARTH GARUM GASES GASPS GASPY GASSY GASTS GATED GATER GATES GATHS GATOR GAUCY GAUDS GAUDY GAUGE GAUJE GAULT GAUMS GAUMY GAUNT GAUPS GAURS GAUSS GAUZE GAUZY GAVEL GAVOT GAWCY GAWDS GAWKS GAWKY GAWPS GAWSY GAYAL GAYER GAYLY GAZAL GAZAR GAZED GAZER GAZES GAZON GAZOO GEALS GEANS GEARE GEARS GEATS GEBUR GECKO GECKS GEEKS GEEKY GEEPS GEESE GEEST GEIST GEITS GELDS GELEE GELID GELLY GELTS GEMEL GEMMA GEMMY GEMOT GENAL GENAS GENES GENET GENIC GENIE GENII GENIP GENNY GENOA GENOM GENRE GENRO GENTS GENTY GENUA GENUS GEODE GEOID GERAH GERBE GERES GERLE GERMS GERMY GERNE GESSE GESSO GESTE GESTS GETAS GETUP GEUMS GEYAN GEYER GHAST GHATS GHAUT GHAZI GHEES GHEST GHOST GHOUL GHYLL GIANT GIBED GIBEL GIBER GIBES GIBLI GIBUS GIDDY GIFTS GIGAS GIGHE GIGOT GIGUE GILAS GILDS GILET GILLS GILLY GILPY GILTS GIMEL GIMME GIMPS GIMPY GINGE GINGS GINKS GINNY GINZO GIPON GIPPO GIPPY GIPSY GIRDS GIRLS GIRLY GIRNS GIRON GIROS GIRRS GIRSH GIRTH GIRTS GISMO GISMS GISTS GITES GIUST GIVED GIVEN GIVER GIVES GIZMO GLACE GLADE GLADS GLADY GLAIK GLAIR GLAMS GLAND GLANS GLARE GLARY GLASS GLAUM GLAUR GLAZE GLAZY GLEAM GLEAN GLEBA GLEBE GLEBY GLEDE GLEDS GLEED GLEEK GLEES GLEET GLEIS GLENS GLENT GLEYS GLIAL GLIAS GLIBS GLIDE GLIFF GLIFT GLIKE GLIME GLIMS GLINT GLISK GLITS GLITZ GLOAM GLOAT GLOBE GLOBI GLOBS GLOBY GLODE GLOGG GLOMS GLOOM GLOOP GLOPS GLORY GLOSS GLOST GLOUT GLOVE GLOWS GLOZE GLUED GLUER GLUES GLUEY GLUGS GLUME GLUMS GLUON GLUTE GLUTS GLYPH GNARL GNARR GNARS GNASH GNATS GNAWN GNAWS GNOME GNOWS GOADS GOAFS GOALS GOARY GOATS GOATY GOBAN GOBBI GOBBO GOBBY GOBOS GODET GODLY GODSO GOELS GOERS GOETY GOFER GOFFS GOGGA GOGOS GOIER GOING GOLDS GOLDY GOLEM GOLES GOLFS GOLLY GOLPE GOLPS GOMBO GOMER GOMPA GONAD GONEF GONER GONGS GONIA GONIF GONKS GONNA GONOF GONYS GONZO GOOBY GOODS GOODY GOOEY GOOFS GOOFY GOOGS GOOKS GOOKY GOOLD GOOLS GOOLY GOONS GOONY GOOPS GOOPY GOORS GOORY GOOSE GOOSY GOPAK GOPIK GORAL GORAS GORED GORES GORGE GORIS GORMS GORMY GORPS GORSE GORSY GOSHT GOSSE GOTHS GOTTA GOUGE GOUKS GOURA GOURD GOUTS GOUTY GOWAN GOWDS GOWFS GOWKS GOWLS GOWNS GOXES GOYIM GRAAL GRABS GRACE GRADE GRADS GRAFF GRAFT GRAIL GRAIN GRAIP GRAMA GRAME GRAMP GRAMS GRANA GRAND GRANS GRANT GRAPE GRAPH GRAPY GRASP GRASS GRATE GRAVE GRAVS GRAVY GRAYS GRAZE GREAT GREBE GRECE GREED GREEK GREEN GREES GREET GREGE GREGO GREIN GRENS GRENZ GRESE GREVE GREWS GREYS GRICE GRIDE GRIDS GRIEF GRIFF GRIFT GRIGS GRIKE GRILL GRIME GRIMY GRIND GRINS GRIOT GRIPE GRIPS GRIPT GRIPY GRISE GRIST GRISY GRITH GRITS GRIZE GROAN GROAT GRODY GROGS GROIN GROKS GROMA GRONE GROOF GROOM GROPE GROSS GROSZ GROTS GROUF GROUP GROUT GROVE GROWL GROWN GROWS GRUBS GRUED GRUEL GRUES GRUFE GRUFF GRUME GRUMP GRUNT GRYCE GRYDE GRYKE GRYPE GRYPT GUACO GUANA GUANO GUANS GUARD GUARS GUAVA GUCKS GUCKY GUDES GUESS GUEST GUFFS GUGAS GUIDE GUIDS GUILD GUILE GUILT GUIMP GUIRO GUISE GULAG GULAR GULAS GULCH GULES GULFS GULFY GULLS GULLY GULPH GULPS GULPY GUMBO GUMMA GUMMY GUMPS GUNDY GUNGE GUNGY GUNKS GUNKY GUNNY GUPPY GURGE GURLS GURLY GURNS GURRY GURSH GURUS GUSHY GUSLA GUSLE GUSLI GUSSY GUSTO GUSTS GUSTY GUTSY GUTTA GUTTY GUYED GUYLE GUYOT GUYSE GWINE GYALS GYBED GYBES GYELD GYMPS GYNAE GYNIE GYNNY GYOZA GYPPO GYPPY GYPSY GYRAL GYRED GYRES GYRON GYROS GYRUS GYTES GYVED GYVES HAAFS HAARS HABIT HABLE HABUS HACEK HACKS HADAL HADED HADES HADJI HADST HAEMS HAETS HAFFS HAFIZ HAFTS HAGGS HAHAS HAICK HAIKA HAIKS HAIKU HAILS HAILY HAINS HAINT HAIRS HAIRY HAITH HAJES HAJIS HAJJI HAKAM HAKAS HAKEA HAKES HAKIM HAKUS HALAL HALED HALER HALES HALFA HALFS HALID HALLO HALLS HALMA HALMS HALON HALOS HALSE HALTS HALVA HALVE HAMAL HAMBA HAMED HAMES HAMMY HAMZA HANAP HANCE HANCH HANDS HANDY HANGI HANGS HANKS HANKY HANSA HANSE HANTS HAOLE HAOMA HAPAX HAPLY HAPPY HAPUS HARAM HARDS HARDY HARED HAREM HARES HARIM HARKS HARLS HARMS HARNS HAROS HARPS HARPY HARRY HARSH HARTS HASHY HASKS HASPS HASTA HASTE HASTY HATCH HATED HATER HATES HATHA HAUDS HAUFS HAUGH HAULD HAULM HAULS HAULT HAUNT HAUSE HAUTE HAVEN HAVER HAVES HAVOC HAWED HAWKS HAWMS HAWSE HAYED HAYER HAYEY HAYLE HAZAN HAZED HAZEL HAZER HAZES HEADS HEADY HEALD HEALS HEAME HEAPS HEAPY HEARD HEARE HEARS HEART HEAST HEATH HEATS HEAVE HEAVY HEBEN HEBES HECHT HECKS HEDER HEDGE HEDGY HEEDS HEEDY HEELS HEEZE HEFTE HEFTS HEFTY HEIDS HEIGH HEILS HEIRS HEIST HEJAB HEJRA HELED HELES HELIO HELIX HELLO HELLS HELMS HELOS HELOT HELPS HELVE HEMAL HEMES HEMIC HEMIN HEMPS HEMPY HENCE HENDS HENGE HENNA HENNY HENRY HENTS HEPAR HERBS HERBY HERDS HERES HERLS HERMA HERMS HERNS HEROE HERON HEROS HERRY HERSE HERTZ HERYE HESPS HESTS HETES HETHS HEUCH HEUGH HEVEA HEWED HEWER HEWGH HEXAD HEXED HEXER HEXES HEXYL HEYED HIANT HICKS HIDED HIDER HIDES HIEMS HIGHS HIGHT HIJAB HIJRA HIKED HIKER HIKES HIKOI HILAR HILCH HILLO HILLS HILLY HILTS HILUM HILUS HIMBO HINAU HINDS HINGE HINGS HINKY HINNY HINTS HIOIS HIPLY HIPPO HIPPY HIRED HIREE HIRER HIRES HISSY HISTS HITCH HITHE HIVED HIVER HIVES HIZEN HOAED HOAGY HOARD HOARS HOARY HOAST HOBBY HOBOS HOCKS HOCUS HODAD HODJA HOERS HOGAN HOGEN HOGGS HOGHS HOHED HOICK HOIKS HOING HOISE HOIST HOKED HOKES HOKEY HOKIS HOKKU HOKUM HOLDS HOLED HOLES HOLEY HOLKS HOLLA HOLLO HOLLY HOLMS HOLON HOLTS HOMAS HOMED HOMER HOMES HOMEY HOMIE HOMME HOMOS HONAN HONDA HONDS HONED HONER HONES HONEY HONGI HONGS HONKS HONKY HONOR HOOCH HOODS HOODY HOOEY HOOFS HOOKA HOOKS HOOKY HOOLY HOONS HOOPS HOORD HOOSH HOOTS HOOTY HOOVE HOPED HOPER HOPES HOPPY HORAH HORAL HORAS HORDE HORIS HORME HORNS HORNY HORSE HORST HORSY HOSED HOSEL HOSEN HOSER HOSES HOSEY HOSTA HOSTS HOTCH HOTEL HOTEN HOTLY HOTTY HOUFF HOUFS HOUGH HOUND HOURI HOURS HOUSE HOUTS HOVEA HOVED HOVEL HOVEN HOVER HOVES HOWBE HOWDY HOWES HOWFF HOWFS HOWKS HOWLS HOWRE HOWSO HOXED HOXES HOYAS HOYED HOYLE HUBBY HUCKS HUDNA HUDUD HUERS HUFFS HUFFY HUGER HUGGY HUHUS HUIAS HULAS HULES HULKS HULKY HULLO HULLS HULLY HUMAN HUMAS HUMFS HUMIC HUMID HUMOR HUMPH HUMPS HUMPY HUMUS HUNCH HUNKS HUNKY HUNTS HURDS HURLS HURLY HURRA HURRY HURST HURTS HUSHY HUSKS HUSKY HUSOS HUSSY HUTCH HUTIA HUZZA HUZZY HWYLS HYDRA HYDRO HYENA HYENS HYING HYKES HYLAS HYLEG HYLES HYLIC HYMEN HYMNS HYNDE HYOID HYPED HYPER HYPES HYPHA HYPOS HYRAX HYSON HYTHE IAMBI IAMBS ICERS ICHED ICHES ICHOR ICIER ICILY ICING ICKER ICKLE ICONS ICTAL ICTIC ICTUS IDANT IDEAL IDEAS IDEES IDENT IDIOM IDIOT IDLED IDLER IDLES IDOLA IDOLS IDYLL IDYLS IFTAR IGAPO IGGED IGLOO IGLUS IHRAM IKANS IKATS IKONS ILEAC ILEAL ILEUM ILEUS ILIAC ILIAD ILIAL ILIUM ILLER ILLTH IMAGE IMAGO IMAMS IMARI IMAUM IMBAR IMBED IMBUE IMIDE IMIDO IMIDS IMINE IMINO IMMEW IMMIT IMMIX IMPED IMPEL IMPIS IMPLY IMPOT IMSHI IMSHY INANE INAPT INARM INBYE INCLE INCOG INCUR INCUS INCUT INDEW INDEX INDIE INDOL INDOW INDRI INDUE INEPT INERM INERT INFER INFIX INFOS INFRA INGAN INGLE INGOT INION INKED INKER INKLE INLAY INLET INNED INNER INORB INPUT INRUN INSET INTEL INTER INTIL INTIS INTRA INTRO INULA INURE INURN INUST INVAR INWIT IODIC IODID IODIN IONIC IOTAS IPPON IRADE IRATE IRIDS IRING IRKED IROKO IRONE IRONS IRONY ISBAS ISHES ISLED ISLES ISLET ISNAE ISSEI ISSUE ISTLE ITCHY ITEMS ITHER IVIED IVIES IVORY IXIAS IXORA IXTLE IZARD IZARS IZZAT JAAPS JABOT JACAL JACKS JACKY JADED JADES JAFAS JAGAS JAGER JAGGS JAGGY JAGIR JAGRA JAILS JAKES JAKEY JALAP JALOP JAMBE JAMBO JAMBS JAMBU JAMES JAMMY JANES JANNS JANNY JANTY JAPAN JAPED JAPER JAPES JARKS JARLS JARPS JARTA JARUL JASEY JASPE JASPS JATOS JAUKS JAUNT JAUPS JAVAS JAVEL JAWAN JAWED JAXIE JAZZY JEANS JEATS JEBEL JEDIS JEELS JEELY JEEPS JEERS JEFES JEFFS JEHAD JEHUS JELAB JELLO JELLS JELLY JEMBE JEMMY JENNY JERID JERKS JERKY JERRY JESSE JESTS JESUS JETES JETON JETTY JEUNE JEWED JEWEL JEWIE JHALA JIAOS JIBBS JIBED JIBER JIBES JIFFS JIFFY JIGGY JIGOT JIHAD JILLS JILTS JIMMY JIMPY JINGO JINKS JINNE JINNI JINNS JIRDS JIRGA JIRRE JISMS JIVED JIVER JIVES JIVEY JNANA JOBED JOBES JOCKO JOCKS JODEL JOEYS JOHNS JOINS JOINT JOIST JOKED JOKER JOKES JOKEY JOKOL JOLED JOLES JOLLS JOLLY JOLTS JOLTY JOMON JOMOS JONES JONGS JONTY JOOKS JORAM JORUM JOTAS JOTTY JOTUN JOUAL JOUGS JOUKS JOULE JOURS JOUST JOWAR JOWED JOWLS JOWLY JOYED JUBAS JUBES JUCOS JUDAS JUDGE JUDOS JUGAL JUGUM JUICE JUICY JUJUS JUKED JUKES JUKUS JULEP JUMAR JUMBO JUMBY JUMPS JUMPY JUNCO JUNKS JUNKY JUNTA JUNTO JUPES JUPON JURAL JURAT JUREL JUROR JUSTS JUTES JUTTY JUVES KAAMA KABAB KABAR KABOB KACHA KADES KADIS KAFIR KAGOS KAGUS KAHAL KAIAK KAIDS KAIES KAIFS KAIKA KAIKS KAILS KAIMS KAING KAINS KAKAS KAKIS KALAM KALES KALIF KALIS KALPA KAMAS KAMES KAMIK KAMIS KAMME KANAE KANAS KANDY KANEH KANES KANGA KANGS KANJI KANTS KANZU KAONS KAPAS KAPHS KAPOK KAPPA KAPUT KARAS KARAT KARKS KARMA KARNS KAROO KARRI KARST KARSY KARTS KARZY KASHA KASME KATAS KATIS KATTI KAUGH KAURI KAURU KAURY KAVAS KAWAS KAWAU KAWED KAYAK KAYLE KAYOS KAZIS KAZOO KBARS KEBAB KEBAR KEBOB KECKS KEDGE KEDGY KEECH KEEFS KEEKS KEELS KEENO KEENS KEEPS KEETS KEEVE KEFIR KEHUA KEIRS KELEP KELIM KELLS KELLY KELPS KELPY KELTS KELTY KEMBO KEMBS KEMPS KEMPT KEMPY KENAF KENCH KENDO KENOS KENTE KENTS KEPIS KERBS KEREL KERFS KERKY KERMA KERNE KERNS KEROS KERRY KERVE KESAR KESTS KETAS KETCH KETOL KEVEL KEVIL KEXES KEYED KHADI KHAFS KHAKI KHANS KHAPH KHATS KHAYA KHAZI KHEDA KHETH KHETS KHOJA KHORS KHOUM KHUDS KIAAT KIANG KIBBE KIBBI KIBEI KIBES KIBLA KICKS KICKY KIDDO KIDDY KIDEL KIDGE KIEFS KIERS KIEVE KIGHT KIKES KIKOI KILEY KILIM KILLS KILNS KILOS KILPS KILTS KILTY KIMBO KINAS KINDA KINDS KINDY KINES KINGS KININ KINKS KINKY KINOS KIORE KIOSK KIPES KIPPA KIPPS KIRBY KIRKS KIRNS KIRRI KISAN KISSY KISTS KITED KITER KITES KITHE KITHS KITTY KIVAS KIWIS KLANG KLAPS KLETT KLICK KLIEG KLIKS KLONG KLOOF KLUGE KLUTZ KNACK KNAGS KNAPS KNARL KNARS KNAUR KNAVE KNAWE KNEAD KNEED KNEEL KNEES KNELL KNELT KNIFE KNISH KNITS KNIVE KNOBS KNOCK KNOLL KNOPS KNOSP KNOTS KNOUT KNOWE KNOWN KNOWS KNUBS KNURL KNURR KNURS KNUTS KOALA KOANS KOAPS KOBAN KOBOS KOELS KOFFS KOFTA KOHAS KOHLS KOINE KOJIS KOKER KOKRA KOKUM KOLAS KOLOS KOMBU KONBU KONDO KONKS KOOKS KOOKY KOORI KOPEK KOPHS KOPJE KOPPA KORAI KORAS KORAT KORES KORMA KORUN KORUS KOSES KOTCH KOTOS KOTOW KOURA KRAAL KRABS KRAFT KRAIT KRANG KRANS KRANZ KRAUT KREEP KRENG KREWE KRILL KRONA KRONE KROON KRUBI KSARS KUDOS KUDUS KUDZU KUFIS KUGEL KUIAS KUKRI KUKUS KULAK KULAN KULAS KULFI KUMYS KURIS KURRE KURTA KURUS KUSSO KUTAS KUTCH KUTIS KUTUS KUZUS KVASS KVELL KWELA KYACK KYAKS KYANG KYARS KYATS KYBOS KYDST KYLES KYLIE KYLIN KYLIX KYLOE KYNDE KYNDS KYPES KYRIE KYTES KYTHE LAARI LABDA LABEL LABIA LABIS LABOR LABRA LACED LACER LACES LACET LACEY LACKS LADED LADEN LADER LADES LADLE LAERS LAEVO LAGAN LAGER LAHAR LAICH LAICS LAIDS LAIGH LAIKA LAIKS LAIRD LAIRS LAIRY LAITH LAITY LAKED LAKER LAKES LAKHS LAKIN LAKSA LALDY LALLS LAMAS LAMBS LAMBY LAMED LAMER LAMES LAMIA LAMMY LAMPS LANAI LANAS LANCE LANCH LANDE LANDS LANES LANKS LANKY LANTS LAPEL LAPIN LAPIS LAPJE LAPSE LARCH LARDS LARDY LAREE LARES LARGE LARGO LARIS LARKS LARKY LARNS LARUM LARVA LASED LASER LASES LASSI LASSO LASSU LASTS LATAH LATCH LATED LATEN LATER LATEX LATHE LATHI LATHS LATHY LATKE LATTE LAUAN LAUCH LAUDS LAUFS LAUGH LAUND LAURA LAVAS LAVED LAVER LAVES LAVRA LAWED LAWER LAWIN LAWKS LAWNS LAWNY LAXER LAXES LAXLY LAYED LAYER LAYIN LAYUP LAZAR LAZED LAZES LAZOS LAZZI LAZZO LEACH LEADS LEADY LEAFS LEAFY LEAKS LEAKY LEAMS LEANS LEANT LEANY LEAPS LEAPT LEARE LEARN LEARS LEARY LEASE LEASH LEAST LEATS LEAVE LEAVY LEAZE LEBEN LECCY LEDGE LEDGY LEDUM LEEAR LEECH LEEKS LEEPS LEERS LEERY LEESE LEETS LEFTE LEFTS LEFTY LEGAL LEGER LEGES LEGGE LEGGY LEGIT LEHRS LEHUA LEIRS LEISH LEMAN LEMED LEMEL LEMES LEMMA LEMON LEMUR LENDS LENES LENGS LENIS LENOS LENSE LENTI LENTO LEONE LEPER LEPID LEPRA LEPTA LERED LERES LERPS LESBO LESES LESTS LETCH LETHE LETUP LEUCH LEUCO LEUDS LEUGH LEVEE LEVEL LEVER LEVIN LEVIS LEWIS LEXES LEXIS LEZES LEZZA LEZZY LIANA LIANE LIANG LIARD LIARS LIART LIBEL LIBER LIBRA LIBRI LICHI LICHT LICIT LICKS LIDAR LIDOS LIEFS LIEGE LIENS LIERS LIEUS LIEVE LIFER LIFES LIFTS LIGAN LIGER LIGGE LIGHT LIGNE LIKED LIKEN LIKER LIKES LIKIN LILAC LILLS LILOS LILTS LIMAN LIMAS LIMAX LIMBA LIMBI LIMBO LIMBS LIMBY LIMED LIMEN LIMES LIMEY LIMIT LIMMA LIMNS LIMOS LIMPA LIMPS LINAC LINCH LINDS LINDY LINED LINEN LINER LINES LINEY LINGA LINGO LINGS LINGY LININ LINKS LINKY LINNS LINNY LINOS LINTS LINTY LINUM LINUX LIONS LIPID LIPIN LIPOS LIPPY LIRAS LIRKS LIROT LISKS LISLE LISPS LISTS LITAI LITAS LITED LITER LITES LITHE LITHO LITHS LITRE LIVED LIVEN LIVER LIVES LIVID LIVOR LIVRE LLAMA LLANO LOACH LOADS LOAFS LOAMS LOAMY LOANS LOAST LOATH LOAVE LOBAR LOBBY LOBED LOBES LOBOS LOBUS LOCAL LOCHS LOCKS LOCOS LOCUM LOCUS LODEN LODES LODGE LOESS LOFTS LOFTY LOGAN LOGES LOGGY LOGIA LOGIC LOGIE LOGIN LOGOI LOGON LOGOS LOHAN LOIDS LOINS LOIPE LOIRS LOKES LOLLS LOLLY LOLOG LOMAS LOMED LOMES LONER LONGA LONGE LONGS LOOBY LOOED LOOEY LOOFA LOOFS LOOIE LOOKS LOOMS LOONS LOONY LOOPS LOOPY LOORD LOOSE LOOTS LOPED LOPER LOPES LOPPY LORAL LORAN LORDS LORDY LOREL LORES LORIC LORIS LORRY LOSED LOSEL LOSEN LOSER LOSES LOSSY LOTAH LOTAS LOTES LOTIC LOTOS LOTTE LOTTO LOTUS LOUED LOUGH LOUIE LOUIS LOUMA LOUND LOUNS LOUPE LOUPS LOURE LOURS LOURY LOUSE LOUSY LOUTS LOVAT LOVED LOVER LOVES LOVEY LOWAN LOWED LOWER LOWES LOWLY LOWND LOWNE LOWNS LOWPS LOWRY LOWSE LOWTS LOXED LOXES LOYAL LOZEN LUACH LUAUS LUBED LUBES LUBRA LUCES LUCID LUCKS LUCKY LUCRE LUDES LUDIC LUDOS LUFFA LUFFS LUGED LUGER LUGES LULLS LULUS LUMAS LUMEN LUMME LUMMY LUMPS LUMPY LUNAR LUNAS LUNCH LUNES LUNET LUNGE LUNGI LUNGS LUNKS LUNTS LUPIN LUPUS LURCH LURED LURER LURES LUREX LURGI LURGY LURID LURKS LURRY LURVE LUSER LUSHY LUSKS LUSTS LUSTY LUSUS LUTEA LUTED LUTER LUTES LUVVY LUXES LWEIS LYAMS LYARD LYART LYASE LYCEA LYCEE LYCRA LYING LYMES LYMPH LYNCH LYNES LYRES LYRIC LYSED LYSES LYSIN LYSIS LYSOL LYSSA LYTED LYTES LYTHE LYTIC LYTTA MAAED MAARE MAARS MABES MACAW MACED MACER MACES MACHE MACHI MACHO MACHS MACKS MACLE MACON MACRO MADAM MADGE MADID MADLY MADRE MAFIA MAFIC MAGES MAGGS MAGIC MAGMA MAGOT MAGUS MAHOE MAHUA MAHWA MAIDS MAIKO MAIKS MAILE MAILL MAILS MAIMS MAINS MAIRE MAIRS MAISE MAIST MAIZE MAJOR MAKAR MAKER MAKES MAKIS MAKOS MALAM MALAR MALAS MALAX MALES MALIC MALIK MALIS MALLS MALMS MALMY MALTS MALTY MALVA MALWA MAMAS MAMBA MAMBO MAMEE MAMEY MAMIE MAMMA MAMMY MANAS MANAT MANDI MANED MANEH MANES MANET MANGA MANGE MANGO MANGS MANGY MANIA MANIC MANIS MANKY MANLY MANNA MANOR MANOS MANSE MANTA MANTO MANTY MANUL MANUS MAPAU MAPLE MAQUI MARAE MARAH MARAS MARCH MARCS MARDY MARES MARGE MARGS MARIA MARID MARKA MARKS MARLE MARLS MARLY MARMS MARON MAROR MARRI MARRY MARSE MARSH MARTS MARVY MASAS MASED MASER MASES MASHY MASKS MASON MASSA MASSE MASSY MASTS MASTY MASUS MATAI MATCH MATED MATER MATES MATEY MATHS MATIN MATLO MATTE MATTS MATZA MATZO MAUBY MAUDS MAULS MAUND MAURI MAUTS MAUVE MAVEN MAVIE MAVIN MAVIS MAWED MAWKS MAWKY MAWRS MAXED MAXES MAXIM MAXIS MAYAN MAYAS MAYBE MAYED MAYOR MAYOS MAYST MAZED MAZER MAZES MAZEY MAZUT MBIRA MEADS MEALS MEALY MEANE MEANS MEANT MEANY MEARE MEASE MEATH MEATS MEATY MEBOS MECCA MECKS MEDAL MEDIA MEDIC MEDII MEDLE MEEDS MEERS MEETS MEFFS MEINS MEINT MEINY MEITH MEKKA MELAS MELDS MELEE MELIC MELIK MELLS MELON MELTS MELTY MEMES MEMOS MENAD MENDS MENED MENES MENGE MENGS MENSA MENSE MENSH MENTA MENTO MENUS MEOUS MEOWS MERCH MERCS MERCY MERDE MERED MEREL MERER MERES MERGE MERIL MERIS MERIT MERKS MERLE MERLS MERRY MERSE MESAL MESAS MESEL MESES MESHY MESIC MESNE MESON MESSY MESTO METAL METED METER METES METHO METHS METIC METIF METIS METOL METRE METRO MEUSE MEVED MEVES MEWED MEWLS MEYNT MEZES MEZZE MEZZO MHORR MIAOU MIAOW MIASM MIAUL MICAS MICHE MICHT MICKS MICKY MICOS MICRA MICRO MIDDY MIDGE MIDGY MIDIS MIDST MIENS MIEVE MIFFS MIFFY MIFTY MIGGS MIGHT MIHIS MIKED MIKES MIKRA MILCH MILDS MILER MILES MILIA MILKO MILKS MILKY MILLE MILLS MILOR MILOS MILPA MILTS MILTY MILTZ MIMED MIMEO MIMER MIMES MIMIC MIMSY MINAE MINAR MINAS MINCE MINCY MINDS MINED MINER MINES MINGE MINGS MINGY MINIM MINIS MINKE MINKS MINNY MINOR MINOS MINTS MINTY MINUS MIRED MIRES MIREX MIRIN MIRKS MIRKY MIRLY MIRTH MIRVS MIRZA MISCH MISDO MISER MISES MISGO MISOS MISSA MISSY MISTS MISTY MITCH MITER MITES MITIS MITRE MITTS MIXED MIXEN MIXER MIXES MIXTE MIXUP MIZEN MIZZY MNEME MOANS MOATS MOBBY MOBES MOBIE MOBLE MOCHA MOCHS MOCHY MOCKS MODAL MODEL MODEM MODER MODES MODGE MODII MODUS MOERS MOFOS MOGGY MOGUL MOHEL MOHRS MOHUA MOHUR MOILS MOIRA MOIRE MOIST MOITS MOJOS MOKES MOKIS MOKOS MOLAL MOLAR MOLAS MOLDS MOLDY MOLES MOLLA MOLLS MOLLY MOLTO MOLTS MOMES MOMMA MOMMY MOMUS MONAD MONAL MONAS MONDE MONDO MONER MONEY MONGO MONGS MONIE MONKS MONOS MONTE MONTH MONTY MOOCH MOODS MOODY MOOED MOOKS MOOLA MOOLI MOOLS MOOLY MOONS MOONY MOOPS MOORS MOORY MOOSE MOOTS MOOVE MOPED MOPER MOPES MOPEY MOPPY MOPSY MOPUS MORAE MORAL MORAS MORAT MORAY MOREL MORES MORIA MORNE MORNS MORON MORPH MORRA MORRO MORSE MORTS MOSED MOSES MOSEY MOSKS MOSSO MOSSY MOSTE MOSTS MOTED MOTEL MOTEN MOTES MOTET MOTEY MOTHS MOTHY MOTIF MOTIS MOTOR MOTTE MOTTO MOTTS MOTTY MOTUS MOTZA MOUCH MOUES MOULD MOULS MOULT MOUND MOUNT MOUPS MOURN MOUSE MOUST MOUSY MOUTH MOVED MOVER MOVES MOVIE MOWAS MOWED MOWER MOWRA MOXAS MOXIE MOYAS MOYLE MOYLS MOZED MOZES MOZOS MPRET MUCHO MUCIC MUCID MUCIN MUCKS MUCKY MUCOR MUCRO MUCUS MUDDY MUDGE MUDIR MUDRA MUFFS MUFTI MUGGA MUGGS MUGGY MUHLY MUIDS MUILS MUIRS MUIST MUJIK MULCH MULCT MULED MULES MULEY MULGA MULLA MULLS MULSE MULSH MUMMS MUMMY MUMPS MUMSY MUMUS MUNCH MUNGA MUNGO MUNGS MUNIS MUNTS MUNTU MUONS MURAL MURAS MURED MURES MUREX MURID MURKS MURKY MURLS MURLY MURRA MURRE MURRI MURRS MURRY MURTI MURVA MUSAR MUSCA MUSED MUSER MUSES MUSET MUSHA MUSHY MUSIC MUSIT MUSKS MUSKY MUSOS MUSSE MUSSY MUSTH MUSTS MUSTY MUTCH MUTED MUTER MUTES MUTHA MUTIS MUTON MUTTS MUXED MUXES MUZZY MVULE MYALL MYLAR MYNAH MYNAS MYOID MYOMA MYOPE MYOPS MYOPY MYRRH MYSID MYTHI MYTHS MYTHY MYXOS MZEES NAAMS NAANS NABES NABIS NABKS NABLA NABOB NACHE NACHO NACRE NADAS NADIR NAEVE NAEVI NAFFS NAGAS NAGGY NAGOR NAHAL NAIAD NAIFS NAIKS NAILS NAIRA NAIRU NAIVE NAKED NAKER NAKFA NALAS NALED NALLA NAMED NAMER NAMES NAMMA NANAS NANCE NANCY NANDU NANNA NANNY NANUA NAPAS NAPED NAPES NAPOO NAPPA NAPPE NAPPY NARAS NARCO NARCS NARDS NARES NARIC NARIS NARKS NARKY NARRE NASAL NASHI NASTY NATAL NATCH NATES NATIS NATTY NAUCH NAUNT NAVAL NAVAR NAVEL NAVES NAVEW NAVVY NAWAB NAZES NAZIR NAZIS NEAFE NEALS NEAPS NEARS NEATH NEATS NEBEK NEBEL NECKS NEDDY NEEDS NEEDY NEELD NEELE NEEMB NEEMS NEEPS NEESE NEEZE NEGRO NEGUS NEIFS NEIGH NEIST NEIVE NELIS NELLY NEMAS NEMNS NEMPT NENES NEONS NEPER NEPIT NERAL NERDS NERDY NERKA NERKS NEROL NERTS NERTZ NERVE NERVY NESTS NETES NETOP NETTS NETTY NEUKS NEUME NEUMS NEVEL NEVER NEVES NEVUS NEWED NEWEL NEWER NEWIE NEWLY NEWSY NEWTS NEXTS NEXUS NGAIO NGANA NGATI NGOMA NGWEE NICAD NICER NICHE NICHT NICKS NICKY NICOL NIDAL NIDED NIDES NIDOR NIDUS NIECE NIEFS NIEVE NIFES NIFFS NIFFY NIFTY NIGER NIGHS NIGHT NIHIL NIKAU NILLS NIMBI NIMBS NIMPS NINES NINJA NINNY NINON NINTH NIPAS NIPPY NIQAB NIRLS NIRLY NISEI NISSE NISUS NITER NITES NITID NITON NITRE NITRO NITRY NITTY NIVAL NIXED NIXER NIXES NIXIE NIZAM NKOSI NOAHS NOBBY NOBLE NOBLY NOCKS NODAL NODDY NODES NODUS NOELS NOGGS NOHOW NOILS NOILY NOINT NOIRS NOISE NOISY NOLES NOLLS NOLOS NOMAD NOMAS NOMEN NOMES NOMIC NOMOI NOMOS NONAS NONCE NONES NONET NONGS NONIS NONNY NONYL NOOIT NOOKS NOOKY NOONS NOOPS NOOSE NOPAL NORIA NORIS NORKS NORMA NORMS NORTH NOSED NOSER NOSES NOSEY NOTAL NOTCH NOTED NOTER NOTES NOTUM NOULD NOULE NOULS NOUNS NOUNY NOUPS NOVAE NOVAS NOVEL NOVUM NOWAY NOWED NOWLS NOWTS NOWTY NOXAL NOXES NOYAU NOYED NOYES NUBBY NUBIA NUCHA NUDDY NUDER NUDES NUDGE NUDIE NUDZH NUFFS NUGAE NUKED NUKES NULLA NULLS NUMBS NUMEN NUNNY NURDS NURDY NURLS NURRS NURSE NUTSO NUTSY NUTTY NYAFF NYALA NYING NYLON NYMPH NYSSA OAKED OAKEN OAKER OAKUM OARED OASES OASIS OASTS OATEN OATER OATHS OAVES OBANG OBEAH OBELI OBESE OBEYS OBIAS OBIED OBIIT OBITS OBJET OBOES OBOLE OBOLI OBOLS OCCAM OCCUR OCEAN OCHER OCHES OCHRE OCHRY OCKER OCREA OCTAD OCTAL OCTAN OCTAS OCTET OCTYL OCULI ODAHS ODALS ODDER ODDLY ODEON ODEUM ODISM ODIST ODIUM ODORS ODOUR ODSOS ODYLE ODYLS OFAYS OFFAL OFFED OFFER OFLAG OFTEN OFTER OGAMS OGEES OGGIN OGHAM OGIVE OGLED OGLER OGLES OGMIC OGRES OHIAS OHING OHMIC OHONE OIDIA OILED OILER OINKS OINTS OJIME OKAPI OKAYS OKEHS OKRAS OKTAS OLDEN OLDER OLDIE OLEIC OLEIN OLENT OLEOS OLEUM OLIOS OLIVE OLLAS OLLAV OLLER OLLIE OLOGY OLPAE OLPES OMASA OMBER OMBRE OMBUS OMEGA OMENS OMERS OMITS OMLAH OMOVS OMRAH ONCER ONCES ONCET ONCUS ONELY ONERS ONERY ONION ONIUM ONKUS ONLAY ONNED ONSET ONTIC OOBIT OOHED OOMPH OONTS OOPED OORIE OOSES OOTID OOZED OOZES OPAHS OPALS OPENS OPEPE OPERA OPINE OPING OPIUM OPPOS OPSIN OPTED OPTER OPTIC ORACH ORACY ORALS ORANG ORANT ORATE ORBED ORBIT ORCAS ORCIN ORDER ORDOS OREAD ORFES ORGAN ORGIA ORGIC ORGUE ORIBI ORIEL ORIXA ORLES ORLON ORLOP ORMER ORNIS ORPIN ORRIS ORTHO ORVAL ORZOS OSCAR OSHAC OSIER OSMIC OSMOL OSSIA OSTIA OTAKU OTARY OTHER OTTAR OTTER OTTOS OUBIT OUCHT OUGHT OUIJA OULKS OUMAS OUNCE OUNDY OUPAS OUPED OUPHE OUPHS OURIE OUSEL OUSTS OUTBY OUTDO OUTED OUTER OUTGO OUTRE OUTRO OUZEL OUZOS OVALS OVARY OVATE OVELS OVENS OVERS OVERT OVINE OVIST OVOID OVOLI OVOLO OVULE OWCHE OWING OWLED OWLER OWLET OWNED OWNER OWRES OWRIE OWSEN OXBOW OXERS OXEYE OXIDE OXIDS OXIME OXIMS OXLIP OXTER OYERS OZEKI OZONE OZZIE PAALS PACAS PACED PACER PACES PACEY PACHA PACKS PACOS PACTA PACTS PADDY PADIS PADLE PADMA PADRE PADRI PAEAN PAEON PAGAN PAGED PAGER PAGES PAGLE PAGOD PAGRI PAIKS PAILS PAINS PAINT PAIRE PAIRS PAISA PAISE PAKKA PALAS PALAY PALEA PALED PALER PALES PALET PALKI PALLA PALLS PALLY PALMS PALMY PALPI PALPS PALSY PAMPA PANAX PANCE PANDA PANDS PANDY PANED PANEL PANES PANGA PANGS PANIC PANIM PANNE PANSY PANTO PANTS PANTY PAOLI PAOLO PAPAL PAPAS PAPAW PAPER PAPES PAPPI PAPPY PARAE PARAS PARCH PARDI PARDS PARDY PARED PAREO PARER PARES PAREU PAREV PARGE PARGO PARIS PARKA PARKI PARKS PARKY PARLE PARLY PAROL PARPS PARRA PARRS PARRY PARSE PARTI PARTS PARTY PARVE PARVO PASEO PASES PASHA PASHM PASPY PASSE PASTA PASTE PASTS PASTY PATCH PATED PATEN PATER PATES PATHS PATIN PATIO PATLY PATSY PATTE PATTY PATUS PAUAS PAULS PAUSE PAVAN PAVED PAVEN PAVER PAVES PAVID PAVIN PAVIS PAWAS PAWAW PAWED PAWER PAWKS PAWKY PAWLS PAWNS PAXES PAYED PAYEE PAYER PAYOR PAYSD PEACE PEACH PEAGE PEAGS PEAKS PEAKY PEALS PEANS PEARE PEARL PEARS PEART PEASE PEATS PEATY PEAVY PEAZE PEBAS PECAN PECHS PECKE PECKS PECKY PEDAL PEDES PEDRO PEECE PEEKS PEELS PEENS PEEOY PEEPE PEEPS PEERS PEERY PEEVE PEGGY PEGHS PEINS PEISE PEIZE PEKAN PEKES PEKIN PEKOE PELAS PELES PELFS PELLS PELMA PELON PELTA PELTS PENAL PENCE PENDS PENDU PENED PENES PENGO PENIE PENIS PENKS PENNA PENNE PENNI PENNY PENTS PEONS PEONY PEPLA PEPOS PEPPY PERAI PERCE PERCH PERDU PERDY PEREA PERES PERIL PERIS PERKS PERKY PERMS PERNS PERPS PERRY PERSE PERST PERTS PERVE PERVS PESKY PESOS PESTO PESTS PESTY PETAL PETAR PETER PETIT PETRE PETTI PETTO PETTY PEWEE PEWIT PEYSE PHAGE PHANG PHARE PHASE PHEER PHENE PHEON PHESE PHIAL PHLOX PHOCA PHOHS PHONE PHONO PHONS PHONY PHOTO PHOTS PHPHT PHUTS PHYLA PHYLE PIANO PIANS PIBAL PICAL PICAS PICCY PICKS PICKY PICOT PICRA PICUL PIECE PIEND PIERS PIERT PIETA PIETS PIETY PIEZO PIGGY PIGHT PIGMY PIING PIKAS PIKAU PIKED PIKER PIKES PIKEY PIKIS PIKUL PILAF PILAO PILAR PILAU PILAW PILCH PILEA PILED PILEI PILER PILES PILIS PILLS PILOT PILOW PILUM PILUS PIMAS PIMPS PINAS PINCH PINED PINES PINEY PINGO PINGS PINKO PINKS PINKY PINNA PINNY PINON PINOT PINTA PINTO PINTS PINUP PIONS PIONY PIOUS PIOYE PIOYS PIPAL PIPAS PIPED PIPER PIPES PIPET PIPIS PIPIT PIPPY PIPUL PIQUE PIRAI PIRLS PIRNS PIROG PISCO PISES PISKY PISOS PISTE PITAS PITCH PITHS PITHY PITON PITTA PIUMS PIVOT PIXEL PIXES PIXIE PIZED PIZES PIZZA PLAAS PLACE PLACK PLAGE PLAID PLAIN PLAIT PLANE PLANK PLANS PLANT PLAPS PLASH PLASM PLAST PLATE PLATS PLATY PLAYA PLAYS PLAZA PLEAD PLEAS PLEAT PLEBE PLEBS PLENA PLEON PLESH PLEWS PLICA PLIED PLIER PLIES PLIMS PLING PLINK PLOAT PLODS PLONG PLONK PLOOK PLOPS PLOTS PLOTZ PLOUK PLOWS PLOYS PLUCK PLUES PLUFF PLUGS PLUMB PLUME PLUMP PLUMS PLUMY PLUNK PLUSH PLYER POACH POAKA POAKE POBOY POCKS POCKY PODAL PODDY PODEX PODGE PODGY PODIA POEMS POEPS POESY POETS POGEY POGGE POGOS POILU POIND POINT POISE POKAL POKED POKER POKES POKEY POKIE POLAR POLED POLER POLES POLEY POLIO POLIS POLJE POLKA POLKS POLLS POLLY POLOS POLTS POLYP POLYS POMBE POMES POMMY POMOS POMPS PONCE PONCY PONDS PONES PONEY PONGA PONGO PONGS PONGY PONKS PONTS PONTY PONZU POOCH POODS POOED POOFS POOFY POOHS POOJA POOKA POOKS POOLS POONS POOPS POORI POORT POOTS POOVE POOVY POPES POPPA POPPY POPSY PORAE PORAL PORCH PORED PORER PORES PORGE PORGY PORKS PORKY PORNO PORNS PORNY PORTA PORTS PORTY POSED POSER POSES POSEY POSHO POSIT POSSE POSTS POTAE POTCH POTED POTES POTIN POTOO POTSY POTTO POTTS POTTY POUCH POUFF POUFS POUKE POUKS POULE POULP POULT POUND POUPE POUPT POURS POUTS POUTY POWAN POWER POWIN POWND POWNS POWNY POWRE POXED POXES POYNT POYOU POYSE POZZY PRAAM PRADS PRAHU PRAMS PRANA PRANG PRANK PRAOS PRASE PRATE PRATS PRATT PRATY PRAUS PRAWN PRAYS PREDY PREED PREEN PREES PREIF PREMS PREMY PRENT PREOP PREPS PRESA PRESE PRESS PREST PREVE PREXY PREYS PRIAL PRICE PRICK PRICY PRIDE PRIED PRIEF PRIER PRIES PRIGS PRILL PRIMA PRIME PRIMI PRIMO PRIMP PRIMS PRIMY PRINK PRINT PRION PRIOR PRISE PRISM PRISS PRIVY PRIZE PROAS PROBE PROBS PRODS PROEM PROFS PROGS PROIN PROKE PROLE PROLL PROMO PROMS PRONE PRONG PRONK PROOF PROPS PRORE PROSE PROSO PROSS PROST PROSY PROUD PROUL PROVE PROWL PROWS PROXY PROYN PRUDE PRUNE PRUNT PRUTA PRYER PRYSE PSALM PSEUD PSHAW PSION PSOAE PSOAI PSOAS PSORA PSYCH PSYOP PUBES PUBIC PUBIS PUCAN PUCER PUCES PUCKA PUCKS PUDDY PUDGE PUDGY PUDIC PUDOR PUDSY PUDUS PUERS PUFFS PUFFY PUGGY PUGIL PUHAS PUJAH PUJAS PUKED PUKER PUKES PUKKA PUKUS PULAO PULAS PULED PULER PULES PULIK PULIS PULKA PULKS PULLI PULLS PULMO PULPS PULPY PULSE PULUS PUMAS PUMIE PUMPS PUNAS PUNCE PUNCH PUNGA PUNGS PUNJI PUNKA PUNKS PUNKY PUNNY PUNTO PUNTS PUNTY PUPAE PUPAL PUPAS PUPIL PUPPY PUPUS PURDA PURED PUREE PURER PURES PURGE PURIM PURIN PURIS PURLS PURPY PURRS PURSE PURSY PURTY PUSES PUSHY PUSLE PUSSY PUTID PUTON PUTTI PUTTO PUTTS PUTTY PUZEL PYATS PYETS PYGAL PYGMY PYINS PYLON PYNED PYNES PYOID PYOTS PYRAL PYRAN PYRES PYREX PYRIC PYROS PYXED PYXES PYXIE PYXIS PZAZZ QADIS QAIDS QANAT QIBLA QOPHS QORMA QUACK QUADS QUAFF QUAGS QUAIL QUAIR QUAIS QUAKE QUAKY QUALE QUALM QUANT QUARE QUARK QUART QUASH QUASI QUASS QUATE QUATS QUAYD QUAYS QUBIT QUEAN QUEEN QUEER QUELL QUEME QUENA QUERN QUERY QUEST QUEUE QUEYN QUEYS QUICH QUICK QUIDS QUIET QUIFF QUILL QUILT QUIMS QUINA QUINE QUINO QUINS QUINT QUIPO QUIPS QUIPU QUIRE QUIRK QUIRT QUIST QUITE QUITS QUOAD QUODS QUOIF QUOIN QUOIT QUOLL QUONK QUOPS QUOTA QUOTE QUOTH QURSH QUYTE RABAT RABBI RABIC RABID RABIS RACED RACER RACES RACHE RACKS RACON RADAR RADGE RADII RADIO RADIX RADON RAFFS RAFTS RAGAS RAGDE RAGED RAGEE RAGER RAGES RAGGA RAGGS RAGGY RAGIS RAHED RAHUI RAIAS RAIDS RAIKS RAILE RAILS RAINE RAINS RAINY RAIRD RAISE RAITA RAITS RAJAH RAJAS RAJES RAKED RAKEE RAKER RAKES RAKIS RAKUS RALES RALLY RALPH RAMAL RAMEE RAMEN RAMET RAMIE RAMIN RAMIS RAMMY RAMPS RAMUS RANAS RANCE RANCH RANDS RANDY RANEE RANGE RANGI RANGY RANID RANIS RANKE RANKS RANTS RAPED RAPER RAPES RAPHE RAPID RAPPE RARED RAREE RARER RARES RARKS RASED RASER RASES RASPS RASPY RASSE RASTA RATAL RATAN RATAS RATCH RATED RATEL RATER RATES RATHA RATHE RATHS RATIO RATOO RATOS RATTY RATUS RAUNS RAUPO RAVED RAVEL RAVEN RAVER RAVES RAVIN RAWER RAWIN RAWLY RAWNS RAXED RAXES RAYAH RAYAS RAYED RAYLE RAYNE RAYON RAZED RAZEE RAZER RAZES RAZOO RAZOR REACH REACT READD READS READY REAKS REALM REALO REALS REAME REAMS REAMY REANS REAPS REARM REARS REAST REATA REATE REAVE REBAR REBBE REBEC REBEL REBID REBIT REBOP REBUS REBUT REBUY RECAL RECAP RECCE RECCO RECCY RECIT RECKS RECON RECTA RECTI RECTO RECUR RECUT REDAN REDDS REDDY REDED REDES REDIA REDID REDIP REDLY REDON REDOS REDOX REDRY REDUB REDUX REDYE REECH REEDE REEDS REEDY REEFS REEFY REEKS REEKY REELS REENS REEST REEVE REFED REFEL REFER REFFO REFIT REFIX REFLY REFRY REGAL REGAR REGES REGGO REGIE REGMA REGNA REGOS REGUR REHAB REHEM REIFS REIFY REIGN REIKI REIKS REINK REINS REIRD REIST REIVE REJIG REJON REKED REKES REKEY RELAX RELAY RELET RELIC RELIE RELIT REMAN REMAP REMEN REMET REMEX REMIT REMIX RENAL RENAY RENDS RENEW RENEY RENGA RENIG RENIN RENNE RENTE RENTS REOIL REPAY REPEG REPEL REPIN REPLA REPLY REPOS REPOT REPPS REPRO RERAN RERIG RERUN RESAT RESAW RESAY RESEE RESES RESET RESEW RESID RESIN RESIT RESOD RESOW RESTO RESTS RESTY RETAG RETAX RETCH RETEM RETES RETIA RETIE RETRO RETRY REUSE REVEL REVET REVIE REVUE REWAN REWAX REWED REWET REWIN REWON REWTH REXES RHEAS RHEME RHEUM RHIES RHIME RHINE RHINO RHODY RHOMB RHONE RHUMB RHYME RHYNE RHYTA RIALS RIANT RIATA RIBAS RIBBY RIBES RICED RICER RICES RICEY RICHT RICIN RICKS RIDER RIDES RIDGE RIDGY RIELS RIEMS RIEVE RIFER RIFFS RIFLE RIFTE RIFTS RIFTY RIGGS RIGHT RIGID RIGOL RIGOR RILED RILES RILEY RILLE RILLS RIMAE RIMED RIMER RIMES RIMUS RINDS RINDY RINES RINGS RINKS RINSE RIOJA RIOTS RIPED RIPEN RIPER RIPES RIPPS RISEN RISER RISES RISHI RISKS RISKY RISPS RISUS RITES RITTS RITZY RIVAL RIVAS RIVED RIVEL RIVEN RIVER RIVES RIVET RIVOS RIYAL RIZAS ROACH ROADS ROAMS ROANS ROARS ROARY ROAST ROATE ROBED ROBES ROBIN ROBLE ROBOT ROCKS ROCKY RODED RODEO RODES ROGER ROGUE ROGUY ROILS ROILY ROINS ROIST ROJAK ROJIS ROKED ROKER ROKES ROLAG ROLES ROLFS ROLLS ROMAL ROMAN ROMAS ROMEO ROMPS RONDE RONDO RONEO RONES RONIN RONNE RONTE RONTS ROODS ROOFS ROOFY ROOKS ROOKY ROOMS ROOMY ROONS ROOPS ROOPY ROOSA ROOSE ROOST ROOTS ROOTY ROPED ROPER ROPES ROPEY ROQUE RORAL RORES RORIC RORID RORIE RORTS RORTY ROSED ROSES ROSET ROSHI ROSIN ROSIT ROSTI ROSTS ROTAL ROTAN ROTAS ROTCH ROTED ROTES ROTIS ROTLS ROTON ROTOR ROTOS ROTTE ROUEN ROUES ROUGE ROUGH ROULE ROULS ROUMS ROUND ROUPS ROUPY ROUSE ROUST ROUTE ROUTH ROUTS ROVED ROVEN ROVER ROVES ROWAN ROWDY ROWED ROWEL ROWEN ROWER ROWME ROWND ROWTH ROWTS ROYAL ROYNE ROYST ROZET ROZIT RUANA RUBAI RUBBY RUBEL RUBES RUBIN RUBLE RUBUS RUCHE RUCKS RUDAS RUDDS RUDDY RUDER RUDES RUDIE RUERS RUFFE RUFFS RUGAE RUGAL RUGBY RUGGY RUING RUINS RUKHS RULED RULER RULES RUMAL RUMBA RUMBO RUMEN RUMES RUMLY RUMMY RUMOR RUMPO RUMPS RUMPY RUNCH RUNDS RUNED RUNES RUNGS RUNIC RUNNY RUNTS RUNTY RUPEE RUPIA RURAL RURPS RURUS RUSAS RUSES RUSHY RUSKS RUSMA RUSSE RUSTS RUSTY RUTHS RUTIN RUTTY RYALS RYBAT RYKED RYKES RYMME RYNDS RYOTS RYPER SABAL SABED SABER SABES SABIN SABIR SABLE SABOT SABRA SABRE SACKS SACRA SADDO SADES SADHE SADHU SADIS SADLY SADOS SADZA SAFED SAFER SAFES SAGAS SAGER SAGES SAGGY SAGOS SAGUM SAHEB SAHIB SAICE SAICK SAICS SAIDS SAIGA SAILS SAIMS SAINE SAINS SAINT SAIRS SAIST SAITH SAJOU SAKAI SAKER SAKES SAKIA SAKIS SALAD SALAL SALEP SALES SALET SALIC SALIX SALLE SALLY SALMI SALOL SALON SALOP SALPA SALPS SALSA SALSE SALTO SALTS SALTY SALUE SALVE SALVO SAMAN SAMAS SAMBA SAMBO SAMEK SAMEL SAMEN SAMES SAMEY SAMFU SAMMY SAMPI SAMPS SANDS SANDY SANED SANER SANES SANGA SANGH SANGO SANGS SANKO SANSA SANTO SANTS SAPAN SAPID SAPOR SAPPY SARAN SARDS SARED SAREE SARGE SARGO SARIN SARIS SARKS SARKY SAROD SAROS SARUS SASER SASIN SASSE SASSY SATAI SATAY SATED SATEM SATES SATIN SATIS SATYR SAUBA SAUCE SAUCH SAUCY SAUGH SAULS SAULT SAUNA SAUNT SAURY SAUTE SAUTS SAVED SAVER SAVES SAVEY SAVIN SAVOR SAVOY SAVVY SAWAH SAWED SAWER SAXES SAYED SAYER SAYID SAYNE SAYON SAYST SAZES SCABS SCADS SCAFF SCAGS SCAIL SCALA SCALD SCALE SCALL SCALP SCALY SCAMP SCAMS SCAND SCANS SCANT SCAPA SCAPE SCAPI SCARE SCARF SCARP SCARS SCART SCARY SCATH SCATS SCATT SCAUD SCAUP SCAUR SCAWS SCEAT SCENA SCEND SCENE SCENT SCHAV SCHMO SCHUL SCHWA SCION SCLIM SCODY SCOFF SCOGS SCOLD SCONE SCOOG SCOOP SCOOT SCOPA SCOPE SCOPS SCORE SCORN SCOTS SCOUG SCOUP SCOUR SCOUT SCOWL SCOWP SCOWS SCRAB SCRAE SCRAG SCRAM SCRAN SCRAP SCRAT SCRAW SCRAY SCREE SCREW SCRIM SCRIP SCROD SCROG SCROW SCRUB SCRUM SCUBA SCUDI SCUDO SCUDS SCUFF SCUFT SCUGS SCULK SCULL SCULP SCULS SCUMS SCUPS SCURF SCURS SCUSE SCUTA SCUTE SCUTS SCUZZ SCYES SDAYN SDEIN SEALS SEAME SEAMS SEAMY SEANS SEARE SEARS SEASE SEATS SEAZE SEBUM SECCO SECHS SECTS SEDAN SEDER SEDES SEDGE SEDGY SEDUM SEEDS SEEDY SEEKS SEELD SEELS SEELY SEEMS SEEPS SEEPY SEERS SEFER SEGAR SEGNI SEGNO SEGOL SEGOS SEGUE SEIFS SEILS SEINE SEIRS SEISE SEISM SEITY SEIZE SEKOS SEKTS SELAH SELES SELFS SELLA SELLE SELLS SELLY SELVA SEMEE SEMEN SEMES SEMIE SEMIS SENAS SENDS SENGI SENNA SENOR SENSA SENSE SENSI SENTE SENTI SENTS SENVY SENZA SEPAD SEPAL SEPIA SEPIC SEPOY SEPTA SEPTS SERAC SERAI SERAL SERED SERER SERES SERFS SERGE SERIC SERIF SERIN SERKS SERON SEROW SERRA SERRE SERRS SERRY SERUM SERVE SERVO SESEY SESSA SETAE SETAL SETON SETTS SETUP SEVEN SEVER SEWAN SEWAR SEWED SEWEL SEWEN SEWER SEWIN SEXED SEXER SEXES SEXTO SEXTS SEYEN SHACK SHADE SHADS SHADY SHAFT SHAGS SHAHS SHAKE SHAKO SHAKT SHAKY SHALE SHALL SHALM SHALT SHALY SHAMA SHAME SHAMS SHAND SHANK SHANS SHAPE SHAPS SHARD SHARE SHARK SHARN SHARP SHASH SHAUL SHAVE SHAWL SHAWM SHAWN SHAWS SHAYA SHAYS SHCHI SHEAF SHEAL SHEAR SHEAS SHEDS SHEEL SHEEN SHEEP SHEER SHEET SHEIK SHELF SHELL SHEND SHENT SHEOL SHERD SHERE SHETS SHEVA SHEWN SHEWS SHIAI SHIED SHIEL SHIER SHIES SHIFT SHILL SHILY SHIMS SHINE SHINS SHINY SHIPS SHIRE SHIRK SHIRR SHIRS SHIRT SHISH SHISO SHIST SHITE SHITS SHIUR SHIVA SHIVE SHIVS SHLEP SHLUB SHMEK SHOAL SHOAT SHOCK SHOED SHOER SHOES SHOGI SHOGS SHOJI SHOLA SHONE SHOOK SHOOL SHOON SHOOS SHOOT SHOPE SHOPS SHORE SHORL SHORN SHORT SHOTE SHOTS SHOTT SHOUT SHOVE SHOWD SHOWN SHOWS SHOWY SHOYU SHRED SHREW SHRIS SHROW SHRUB SHRUG SHTIK SHTUM SHTUP SHUCK SHULE SHULN SHULS SHUNS SHUNT SHURA SHUSH SHUTE SHUTS SHWAS SHYER SHYLY SIALS SIBBS SIBYL SICES SICHT SICKO SICKS SIDAS SIDED SIDER SIDES SIDHA SIDHE SIDLE SIEGE SIELD SIENS SIENT SIETH SIEUR SIEVE SIFTS SIGHS SIGHT SIGIL SIGLA SIGMA SIGNA SIGNS SIJOS SIKAS SIKER SIKES SILDS SILED SILEN SILER SILES SILEX SILKS SILKY SILLS SILLY SILOS SILTS SILTY SILVA SIMAR SIMAS SIMBA SIMIS SIMPS SIMUL SINCE SINDS SINED SINES SINEW SINGE SINGS SINHS SINKS SINKY SINUS SIPED SIPES SIPPY SIRED SIREE SIREN SIRES SIRIH SIRIS SIROC SIRRA SIRUP SISAL SISES SISSY SISTS SITAR SITED SITES SITHE SITKA SITUP SITUS SIVER SIXER SIXES SIXMO SIXTE SIXTH SIXTY SIZAR SIZED SIZEL SIZER SIZES SKAGS SKAIL SKALD SKANK SKART SKATE SKATS SKATT SKAWS SKEAN SKEAR SKEED SKEEF SKEEN SKEER SKEES SKEET SKEGG SKEGS SKEIN SKELF SKELL SKELM SKELP SKENE SKENS SKEOS SKEPS SKERS SKETS SKEWS SKIDS SKIED SKIER SKIES SKIEY SKIFF SKILL SKIMO SKIMP SKIMS SKINK SKINS SKINT SKIOS SKIPS SKIRL SKIRR SKIRT SKITE SKITS SKIVE SKIVY SKLIM SKOAL SKOFF SKOLS SKOOL SKORT SKOSH SKRAN SKRIK SKUAS SKUGS SKULK SKULL SKUNK SKYED SKYER SKYEY SKYFS SKYRE SKYRS SKYTE SLABS SLACK SLADE SLAES SLAGS SLAID SLAIN SLAKE SLAMS SLANE SLANG SLANK SLANT SLAPS SLART SLASH SLATE SLATS SLATY SLAVE SLAWS SLAYS SLEDS SLEEK SLEEP SLEER SLEET SLEPT SLEWS SLEYS SLICE SLICK SLIDE SLIER SLILY SLIME SLIMS SLIMY SLING SLINK SLIPE SLIPS SLIPT SLISH SLITS SLIVE SLOAN SLOBS SLOES SLOGS SLOID SLOJD SLOOM SLOOP SLOOT SLOPE SLOPS SLOPY SLORM SLOSH SLOTH SLOTS SLOVE SLOWS SLOYD SLUBB SLUBS SLUED SLUES SLUFF SLUGS SLUIT SLUMP SLUMS SLUNG SLUNK SLURB SLURP SLURS SLUSE SLUSH SLUTS SLYER SLYLY SLYPE SMAAK SMACK SMAIK SMALL SMALM SMALT SMARM SMART SMASH SMAZE SMEAR SMEEK SMEES SMELL SMELT SMERK SMEWS SMILE SMIRK SMIRR SMIRS SMITE SMITH SMITS SMOCK SMOGS SMOKE SMOKO SMOKY SMOLT SMOOR SMOOT SMORE SMOTE SMOUT SMOWT SMUGS SMURS SMUSH SMUTS SNABS SNACK SNAFU SNAGS SNAIL SNAKE SNAKY SNAPS SNARE SNARF SNARK SNARL SNARS SNARY SNASH SNATH SNAWS SNEAD SNEAK SNEAP SNEBS SNECK SNEDS SNEED SNEER SNEES SNELL SNIBS SNICK SNIDE SNIES SNIFF SNIFT SNIGS SNIPE SNIPS SNIPY SNIRT SNITS SNOBS SNODS SNOEK SNOEP SNOGS SNOKE SNOOD SNOOK SNOOL SNOOP SNOOT SNORE SNORT SNOTS SNOUT SNOWK SNOWS SNOWY SNUBS SNUCK SNUFF SNUGS SNUSH SNYES SOAKS SOAPS SOAPY SOARE SOARS SOAVE SOBAS SOBER SOCAS SOCKO SOCKS SOCLE SODAS SODDY SODIC SODOM SOFAR SOFAS SOFTA SOFTS SOFTY SOGER SOGGY SOILS SOILY SOJAS SOKAH SOKEN SOKES SOKOL SOLAH SOLAN SOLAR SOLAS SOLDE SOLDI SOLDO SOLDS SOLED SOLEI SOLER SOLES SOLID SOLON SOLOS SOLUM SOLUS SOLVE SOMAN SOMAS SONAR SONCE SONDE SONES SONGS SONIC SONLY SONNE SONNY SONSE SONSY SOOEY SOOKS SOOLE SOOLS SOOMS SOOPS SOOTE SOOTH SOOTS SOOTY SOPHS SOPHY SOPOR SOPPY SOPRA SORAL SORAS SORBO SORBS SORDA SORDO SORDS SORED SOREE SOREL SORER SORES SOREX SORGO SORNS SORRA SORRY SORTA SORTS SORUS SOTHS SOTOL SOUCE SOUCT SOUGH SOUKS SOULS SOUMS SOUND SOUPS SOUPY SOURS SOUSE SOUTH SOUTS SOWAR SOWCE SOWED SOWER SOWFF SOWFS SOWLE SOWLS SOWMS SOWND SOWNE SOWPS SOWSE SOWTH SOYAS SOYLE SOYUZ SOZIN SPACE SPACY SPADE SPADO SPAED SPAER SPAES SPAGS SPAHI SPAIL SPAIN SPAIT SPAKE SPALD SPALE SPALL SPALT SPAMS SPANE SPANG SPANK SPANS SPARD SPARE SPARK SPARS SPART SPASM SPATE SPATS SPAUL SPAWL SPAWN SPAWS SPAYD SPAYS SPAZA SPAZZ SPEAK SPEAL SPEAN SPEAR SPEAT SPECK SPECS SPEED SPEEL SPEER SPEIL SPEIR SPEKS SPELD SPELK SPELL SPELT SPEND SPENT SPEOS SPERM SPETS SPEUG SPEWS SPEWY SPIAL SPICA SPICE SPICK SPICS SPICY SPIDE SPIED SPIEL SPIER SPIES SPIFF SPIFS SPIKE SPIKS SPIKY SPILE SPILL SPILT SPIMS SPINA SPINE SPINK SPINS SPINY SPIRE SPIRT SPIRY SPITE SPITS SPITZ SPIVS SPLAT SPLAY SPLIT SPODE SPODS SPOIL SPOKE SPOOF SPOOK SPOOL SPOOM SPOON SPOOR SPOOT SPORE SPORT SPOSH SPOTS SPOUT SPRAD SPRAG SPRAT SPRAY SPRED SPREE SPREW SPRIG SPRIT SPROD SPROG SPRUE SPRUG SPUDS SPUED SPUER SPUES SPUGS SPULE SPUME SPUMY SPUNK SPURN SPURS SPURT SPUTA SPYAL SPYRE SQUAB SQUAD SQUAT SQUAW SQUEG SQUIB SQUID SQUIT SQUIZ STABS STACK STADE STAFF STAGE STAGS STAGY STAID STAIG STAIN STAIR STAKE STALE STALK STALL STAMP STAND STANE STANG STANK STAPH STAPS STARE STARK STARN STARR STARS START STASH STATE STATS STAUN STAVE STAWS STAYS STEAD STEAK STEAL STEAM STEAN STEAR STEDD STEDE STEDS STEED STEEK STEEL STEEM STEEN STEEP STEER STEIL STEIN STELA STELE STELL STEME STEMS STEND STENO STENS STENT STEPS STEPT STERE STERN STETS STEWS STEWY STICH STICK STIED STIES STIFF STILB STILE STILL STILT STIME STIMS STIMY STING STINK STINT STIPA STIPE STIRE STIRK STIRP STIRS STIVE STIVY STOAE STOAI STOAS STOAT STOBS STOCK STOEP STOGY STOIC STOIT STOKE STOLE STOLN STOMA STOMP STOND STONE STONG STONK STONN STONY STOOD STOOK STOOL STOOP STOOR STOPE STOPS STOPT STORE STORK STORM STORY STOSS STOTS STOTT STOUN STOUP STOUR STOUT STOVE STOWN STOWP STOWS STRAD STRAE STRAG STRAP STRAW STRAY STREP STREW STRIA STRIG STRIP STROP STROW STROY STRUM STRUT STUBS STUCK STUDS STUDY STUFF STULL STULM STUMM STUMP STUMS STUNG STUNK STUNS STUNT STUPA STUPE STURE STURT STYED STYES STYLE STYLI STYLO STYME STYMY STYRE STYTE SUAVE SUBAH SUBAS SUBBY SUBER SUBHA SUCCI SUCKS SUCKY SUCRE SUDDS SUDOR SUDSY SUEDE SUENT SUERS SUETS SUETY SUGAN SUGAR SUGHS SUIDS SUING SUINT SUITE SUITS SUJEE SUKHS SULCI SULFA SULFO SULKS SULKY SULLY SULUS SUMAC SUMMA SUMOS SUMPH SUMPS SUNKS SUNNA SUNNS SUNNY SUNUP SUPER SUPES SUPRA SURAH SURAL SURAS SURAT SURDS SURED SURER SURES SURFS SURFY SURGE SURGY SURLY SURRA SUSES SUSHI SUSUS SUTOR SUTRA SUTTA SWABS SWACK SWADS SWAGE SWAGS SWAIL SWAIN SWALE SWALY SWAMI SWAMP SWAMY SWANG SWANK SWANS SWAPS SWAPT SWARD SWARE SWARF SWARM SWART SWASH SWATH SWATS SWAYL SWAYS SWEAL SWEAR SWEAT SWEDE SWEED SWEEL SWEEP SWEER SWEES SWEET SWEIR SWELL SWELT SWEPT SWERF SWEYS SWIES SWIFT SWIGS SWILL SWIMS SWINE SWING SWINK SWIPE SWIRE SWIRL SWISH SWISS SWITH SWITS SWIVE SWIZZ SWOBS SWOLN SWONE SWOON SWOOP SWOPS SWOPT SWORD SWORE SWORN SWOTS SWOUN SWUNG SYBBE SYBIL SYBOE SYBOW SYCEE SYCES SYENS SYKER SYKES SYLIS SYLPH SYLVA SYMAR SYNCH SYNCS SYNDS SYNED SYNES SYNOD SYNTH SYPED SYPES SYPHS SYRAH SYREN SYRUP SYSOP SYTHE SYVER TAALS TAATA TABBY TABER TABES TABID TABIS TABLA TABLE TABOO TABOR TABUN TABUS TACAN TACES TACET TACHE TACHO TACHS TACIT TACKS TACKY TACOS TACTS TAELS TAFFY TAFIA TAGGY TAGMA TAHAS TAHOU TAHRS TAIGA TAIGS TAILS TAINS TAINT TAIRA TAISH TAITS TAJES TAKAS TAKEN TAKER TAKES TAKHI TAKIN TAKIS TALAK TALAQ TALAR TALAS TALCS TALCY TALEA TALER TALES TALKS TALKY TALLS TALLY TALMA TALON TALPA TALUK TALUS TAMAL TAMED TAMER TAMES TAMIN TAMIS TAMMY TAMPS TANAS TANGA TANGI TANGO TANGS TANGY TANHS TANKA TANKS TANKY TANNA TANSY TANTI TANTO TAPAS TAPED TAPEN TAPER TAPES TAPET TAPIR TAPIS TAPPA TAPUS TARAS TARDO TARDY TARED TARES TARGE TARNS TAROC TAROK TAROS TAROT TARPS TARRE TARRY TARSI TARTS TARTY TASAR TASER TASKS TASSE TASTE TASTY TATAR TATER TATES TATHS TATIE TATOU TATTS TATTY TATUS TAUBE TAULD TAUNT TAUON TAUPE TAUTS TAVAH TAVAS TAVER TAWAI TAWAS TAWED TAWER TAWIE TAWNY TAWSE TAWTS TAXED TAXER TAXES TAXIS TAXOL TAXON TAXOR TAXUS TAYRA TAZZA TAZZE TEACH TEADE TEADS TEAED TEAKS TEALS TEAMS TEARS TEARY TEASE TEATS TEAZE TECHS TECHY TECTA TEDDY TEELS TEEMS TEEND TEENE TEENS TEENY TEERS TEETH TEFFS TEGGS TEGUA TEGUS TEHRS TEIID TEILS TEIND TELAE TELCO TELES TELEX TELIA TELIC TELLS TELLY TELOI TELOS TEMED TEMES TEMPI TEMPO TEMPS TEMPT TEMSE TENCH TENDS TENDU TENES TENET TENGE TENIA TENNE TENNO TENNY TENON TENOR TENSE TENTH TENTS TENTY TENUE TEPAL TEPAS TEPEE TEPID TEPOY TERAI TERAS TERCE TEREK TERES TERFE TERFS TERGA TERMS TERNE TERNS TERRA TERRY TERSE TERTS TESLA TESTA TESTE TESTS TESTY TETES TETHS TETRA TETRI TEUCH TEUGH TEWED TEWEL TEWIT TEXAS TEXES TEXTS THACK THAGI THAIM THALI THANA THANE THANK THANS THARM THARS THAWS THAWY THEBE THECA THEED THEEK THEES THEFT THEGN THEIC THEIN THEIR THELF THEMA THEME THENS THEOW THERE THERM THESE THESP THETA THETE THEWS THEWY THICK THIEF THIGH THIGS THILK THILL THINE THING THINK THINS THIOL THIRD THIRL THOFT THOLE THOLI THONG THORN THORO THORP THOSE THOUS THOWL THRAE THRAW THREE THREW THRID THRIP THROB THROE THROW THRUM THUDS THUGS THUJA THUMB THUMP THUNK THURL THUYA THYME THYMI THYMY TIARA TIARS TIBIA TICAL TICCA TICED TICES TICHY TICKS TICKY TIDAL TIDDY TIDED TIDES TIERS TIFFS TIFTS TIGER TIGES TIGHT TIGON TIKAS TIKES TIKIS TIKKA TILAK TILDE TILED TILER TILES TILLS TILLY TILTH TILTS TIMBO TIMED TIMER TIMES TIMID TIMON TIMPS TINCT TINDS TINEA TINED TINES TINGE TINGS TINKS TINNY TINTS TINTY TIPIS TIPPY TIPSY TIRED TIRES TIRLS TIROS TIRRS TITAN TITCH TITER TITHE TITIS TITLE TITRE TITTY TITUP TIZZY TOADS TOADY TOAST TOAZE TOCKS TOCKY TOCOS TODAY TODDE TODDY TOEAS TOFFS TOFFY TOFTS TOFUS TOGAE TOGAS TOGED TOGES TOGUE TOHOS TOILE TOILS TOING TOISE TOITS TOKAY TOKED TOKEN TOKER TOKES TOKOS TOLAN TOLAR TOLAS TOLED TOLES TOLLS TOLLY TOLTS TOLUS TOLYL TOMAN TOMBS TOMES TOMIA TOMMY TOMOS TONAL TONDI TONDO TONED TONER TONES TONEY TONGA TONGS TONIC TONKA TONKS TONNE TONUS TOOLS TOOMS TOONS TOOTH TOOTS TOPAZ TOPED TOPEE TOPEK TOPER TOPES TOPHE TOPHI TOPHS TOPIC TOPIS TOPOI TOPOS TOQUE TORAH TORAN TORAS TORCH TORCS TORES TORIC TORII TOROS TOROT TORRS TORSE TORSI TORSK TORSO TORTA TORTE TORTS TORUS TOSAS TOSED TOSES TOSHY TOSSY TOTAL TOTED TOTEM TOTER TOTES TOTTY TOUCH TOUGH TOUKS TOUNS TOURS TOUSE TOUSY TOUTS TOUZE TOUZY TOWED TOWEL TOWER TOWIE TOWNS TOWNY TOWSE TOWSY TOWTS TOWZE TOWZY TOXIC TOXIN TOYED TOYER TOYON TOYOS TOZED TOZES TOZIE TRABS TRACE TRACK TRACT TRADE TRADS TRAGI TRAIK TRAIL TRAIN TRAIT TRAMP TRAMS TRANK TRANQ TRANS TRANT TRAPE TRAPS TRAPT TRASH TRASS TRATS TRATT TRAVE TRAWL TRAYS TREAD TREAT TRECK TREED TREEN TREES TREFA TREIF TREKS TREMA TREND TRESS TREST TRETS TREWS TREYS TRIAC TRIAD TRIAL TRIBE TRICE TRICK TRIDE TRIED TRIER TRIES TRIFF TRIGO TRIGS TRIKE TRILD TRILL TRIMS TRINE TRINS TRIOL TRIOR TRIOS TRIPE TRIPS TRIPY TRIST TRITE TROAD TROAK TROAT TROCK TRODE TRODS TROGS TROIS TROKE TROLL TROMP TRONA TRONC TRONE TRONK TRONS TROOP TROOZ TROPE TROTH TROTS TROUT TROVE TROWS TROYS TRUCE TRUCK TRUED TRUER TRUES TRUGO TRUGS TRULL TRULY TRUMP TRUNK TRUSS TRUST TRUTH TRYER TRYKE TRYMA TRYPS TRYST TSADE TSADI TSARS TSKED TSUBA TUANS TUART TUATH TUBAE TUBAL TUBAR TUBAS TUBBY TUBED TUBER TUBES TUCKS TUFAS TUFFE TUFFS TUFTS TUFTY TUGRA TUINA TUISM TUKTU TULES TULIP TULLE TULPA TUMID TUMMY TUMOR TUMPS TUMPY TUNAS TUNDS TUNED TUNER TUNES TUNGS TUNIC TUNNY TUPEK TUPIK TUPLE TUQUE TURBO TURDS TURFS TURFY TURKS TURME TURMS TURNS TURPS TUSHY TUSKS TUSKY TUTEE TUTOR TUTTI TUTTY TUTUS TUXES TUYER TWAES TWAIN TWALS TWANG TWANK TWATS TWAYS TWEAK TWEED TWEEL TWEEN TWEER TWEET TWERP TWICE TWIER TWIGS TWILL TWILT TWINE TWINK TWINS TWINY TWIRE TWIRL TWIRP TWIST TWITE TWITS TWIXT TWOER TWYER TYEES TYERS TYING TYIYN TYKES TYLER TYMPS TYNDE TYNED TYNES TYPAL TYPED TYPES TYPEY TYPIC TYPOS TYPPS TYPTO TYRAN TYRED TYRES TYROS TYTHE TZARS UDALS UDDER UDONS UGALI UGGED UHLAN UHURU UKASE ULAMA ULANS ULCER ULEMA ULMIN ULNAD ULNAE ULNAR ULNAS ULPAN ULTRA ULVAS ULYIE ULZIE UMAMI UMBEL UMBER UMBLE UMBOS UMBRA UMBRE UMIAC UMIAK UMIAQ UMPED UMPIE UMPTY UNAIS UNAPT UNARM UNARY UNAUS UNBAG UNBAN UNBAR UNBED UNBID UNBOX UNCAP UNCES UNCIA UNCLE UNCOS UNCOY UNCUS UNCUT UNDAM UNDEE UNDER UNDID UNDUE UNDUG UNETH UNFED UNFIT UNFIX UNGAG UNGET UNGOD UNGOT UNGUM UNHAT UNHIP UNIFY UNION UNITE UNITS UNITY UNJAM UNKED UNKET UNKID UNLAW UNLAY UNLED UNLET UNLID UNLIT UNMAN UNMET UNMEW UNMIX UNPAY UNPEG UNPEN UNPIN UNRED UNRID UNRIG UNRIP UNSAY UNSET UNSEW UNSEX UNSOD UNTAX UNTIE UNTIL UNTIN UNWED UNWET UNWIT UNWON UNZIP UPBOW UPBYE UPDOS UPDRY UPEND UPJET UPLAY UPLED UPLIT UPPED UPPER UPRAN UPRUN UPSEE UPSET UPSEY UPTAK UPTER UPTIE URAEI URALI URAOS URARE URARI URASE URATE URBAN URBIA URDEE UREAL UREAS UREDO UREIC URENA URENT URGED URGER URGES URIAL URINE URITE URMAN URNAL URNED URPED URSAE URSID URSON URUBU URVAS USAGE USERS USHER USING USNEA USQUE USUAL USURE USURP USURY UTERI UTILE UTTER UVEAL UVEAS UVULA VACUA VADED VADES VAGAL VAGUE VAGUS VAILS VAIRE VAIRS VAIRY VAKIL VALES VALET VALID VALIS VALOR VALSE VALUE VALVE VAMPS VAMPY VANDA VANED VANES VANGS VANTS VAPID VAPOR VARAN VARAS VARDY VAREC VARES VARIA VARIX VARNA VARUS VARVE VASAL VASES VASTS VASTY VATIC VATUS VAUCH VAULT VAUNT VAUTE VAUTS VAWTE VEALE VEALS VEALY VEENA VEEPS VEERS VEERY VEGAN VEGAS VEGES VEGIE VEGOS VEHME VEILS VEILY VEINS VEINY VELAR VELDS VELDT VELES VELLS VELUM VENAE VENAL VENDS VENEY VENGE VENIN VENOM VENTS VENUE VENUS VERBS VERGE VERRA VERRY VERSE VERSO VERST VERTS VERTU VERVE VESPA VESTA VESTS VETCH VEXED VEXER VEXES VEXIL VEZIR VIALS VIAND VIBES VIBEX VIBEY VICAR VICED VICES VICHY VIDEO VIERS VIEWS VIEWY VIFDA VIGAS VIGIA VIGIL VIGOR VILDE VILER VILLA VILLI VILLS VIMEN VINAL VINAS VINCA VINED VINER VINES VINEW VINIC VINOS VINTS VINYL VIOLA VIOLD VIOLS VIPER VIRAL VIRED VIREO VIRES VIRGA VIRGE VIRID VIRLS VIRTU VIRUS VISAS VISED VISES VISIE VISIT VISNE VISON VISOR VISTA VISTO VITAE VITAL VITAS VITEX VITTA VIVAS VIVAT VIVDA VIVER VIVES VIVID VIXEN VIZIR VIZOR VLEIS VLIES VOARS VOCAB VOCAL VOCES VODKA VODOU VODUN VOEMA VOGIE VOGUE VOICE VOIDS VOILA VOILE VOLAE VOLAR VOLED VOLES VOLET VOLKS VOLTA VOLTE VOLTI VOLTS VOLVA VOLVE VOMER VOMIT VOTED VOTER VOTES VOUCH VOUGE VOULU VOWED VOWEL VOWER VOXEL VOZHD VRAIC VRILS VROOM VROUS VROUW VROWS VUGGS VUGGY VUGHS VUGHY VULGO VULNS VULVA VUTTY VYING WAACS WACKE WACKO WACKS WACKY WADDS WADDY WADED WADER WADES WADIS WADTS WAFER WAFFS WAFTS WAGED WAGER WAGES WAGGA WAGON WAHOO WAIDE WAIFS WAIFT WAILS WAINS WAIRS WAIST WAITE WAITS WAIVE WAKAS WAKED WAKEN WAKER WAKES WAKFS WALDO WALDS WALED WALER WALES WALIS WALKS WALLA WALLS WALLY WALTY WALTZ WAMED WAMES WAMUS WANDS WANED WANES WANEY WANGS WANKS WANKY WANLE WANLY WANNA WANTS WANTY WANZE WAQFS WARBS WARBY WARDS WARED WARES WAREZ WARKS WARMS WARNS WARPS WARRE WARST WARTS WARTY WASES WASHY WASMS WASPS WASPY WASTE WASTS WATAP WATCH WATER WATTS WAUFF WAUGH WAUKS WAULK WAULS WAURS WAVED WAVER WAVES WAVEY WAWAS WAWES WAWLS WAXED WAXEN WAXER WAXES WAYED WAZIR WAZOO WEALD WEALS WEAMB WEANS WEARS WEARY WEAVE WEBBY WEBER WECHT WEDEL WEDGE WEDGY WEEDS WEEDY WEEKE WEEKS WEELS WEEMS WEENS WEENY WEEPS WEEPY WEEST WEETE WEETS WEFTE WEFTS WEIDS WEIGH WEILS WEIRD WEIRS WEISE WEIZE WEKAS WELCH WELDS WELKE WELKS WELKT WELLS WELLY WELSH WELTS WEMBS WENCH WENDS WENGE WENNY WENTS WEROS WERSH WESTS WETAS WETLY WEXED WEXES WHACK WHALE WHAMO WHAMS WHANG WHAPS WHARE WHARF WHATA WHATS WHAUP WHAUR WHEAL WHEAR WHEAT WHEEL WHEEN WHEEP WHEFT WHELK WHELM WHELP WHENS WHERE WHETS WHEWS WHEYS WHICH WHIDS WHIFF WHIFT WHIGS WHILE WHILK WHIMS WHINE WHINS WHINY WHIPS WHIPT WHIRL WHIRR WHIRS WHISH WHISK WHISS WHIST WHITE WHITS WHITY WHIZZ WHOLE WHOMP WHOOF WHOOP WHOOT WHOPS WHORE WHORL WHORT WHOSE WHOSO WHUMP WHUPS WICCA WICKS WICKY WIDDY WIDEN WIDER WIDES WIDOW WIDTH WIELD WIELS WIFED WIFES WIFEY WIFIE WIFTY WIGAN WIGGA WIGGY WIGHT WILCO WILDS WILED WILES WILGA WILIS WILJA WILLS WILLY WILTS WIMPS WIMPY WINCE WINCH WINDS WINDY WINED WINES WINEY WINGE WINGS WINGY WINKS WINNA WINNS WINOS WINZE WIPED WIPER WIPES WIRED WIRER WIRES WIRRA WISED WISER WISES WISHA WISHT WISPS WISPY WISTS WITAN WITCH WITED WITES WITHE WITHS WITHY WITTY WIVED WIVER WIVES WIZEN WIZES WOADS WOALD WOCKS WODGE WOFUL WOKEN WOKKA WOLDS WOLFS WOLLY WOLVE WOMAN WOMBS WOMBY WOMEN WOMYN WONGA WONGI WONKS WONKY WONTS WOODS WOODY WOOED WOOER WOOFS WOOFY WOOLD WOOLS WOOLY WOONS WOOPS WOOSE WOOSH WOOTZ WOOZY WORDS WORDY WORKS WORLD WORMS WORMY WORRY WORSE WORST WORTH WORTS WOULD WOUND WOVEN WOWED WOWEE WOXEN WRACK WRANG WRAPS WRAPT WRAST WRATE WRATH WRAWL WREAK WRECK WRENS WREST WRICK WRIED WRIER WRIES WRING WRIST WRITE WRITS WROKE WRONG WROOT WROTE WROTH WRUNG WRYER WRYLY WUDUS WULLS WURST WUSES WUSHU WUSSY WUXIA WYLED WYLES WYNDS WYNNS WYTED WYTES XEBEC XENIA XENIC XENON XERIC XEROX XERUS XOANA XYLAN XYLEM XYLIC XYLOL XYLYL XYSTI XYSTS YAARS YABBA YABBY YACCA YACHT YACKA YACKS YAFFS YAGER YAGIS YAHOO YAIRD YAKKA YAKOW YALES YAMEN YAMPY YAMUN YANGS YANKS YAPOK YAPON YAPPS YAPPY YARCO YARDS YARER YARFA YARKS YARNS YARRS YARTA YARTO YATES YAUDS YAULD YAUPS YAWED YAWEY YAWLS YAWNS YAWNY YAWPS YBORE YCLAD YCLED YCOND YDRAD YDRED YEADS YEAHS YEALM YEANS YEARD YEARN YEARS YEAST YECCH YECHS YECHY YEDES YEEDS YEESH YEGGS YELKS YELLS YELMS YELPS YELTS YENTA YENTE YERBA YERDS YERKS YESES YESKS YESTS YESTY YETIS YETTS YEUKS YEUKY YEVEN YEVES YEWEN YEXED YEXES YFERE YIELD YIKED YIKES YILLS YINCE YIPES YIPPY YIRDS YIRKS YIRRS YIRTH YITES YITIE YLEMS YLIKE YLKES YMOLT YMPES YOBBO YOCKS YODEL YODHS YODLE YOGAS YOGEE YOGHS YOGIC YOGIN YOGIS YOICK YOJAN YOKED YOKEL YOKER YOKES YOKUL YOLKS YOLKY YOMIM YOMPS YONIC YONIS YONKS YOOFS YOOPS YORES YORKS YORPS YOUKS YOUNG YOURN YOURS YOURT YOUSE YOUTH YOWED YOWES YOWIE YOWLS YRAPT YRENT YRIVD YRNEH YSAME YTOST YUANS YUCAS YUCCA YUCCH YUCKO YUCKS YUCKY YUFTS YUGAS YUKED YUKES YUKKY YUKOS YULAN YULES YUMMO YUMMY YUMPS YUPON YUPPY YURTA YURTS YUZUS ZABRA ZACKS ZAIRE ZAKAT ZAMAN ZAMBO ZAMIA ZANJA ZANTE ZANZA ZANZE ZAPPY ZARFS ZATIS ZAXES ZAYIN ZAZEN ZEALS ZEBEC ZEBRA ZEBUB ZEBUS ZEINS ZERDA ZERKS ZEROS ZESTS ZESTY ZETAS ZEXES ZEZES ZHOMO ZIBET ZIFFS ZIGAN ZILAS ZILCH ZILLA ZILLS ZIMBI ZIMBS ZINCO ZINCS ZINCY ZINEB ZINES ZINGS ZINGY ZINKE ZINKY ZIPPO ZIPPY ZIRAM ZITIS ZIZEL ZIZIT ZLOTE ZLOTY ZOAEA ZOBOS ZOBUS ZOCCO ZOEAE ZOEAL ZOEAS ZOISM ZOIST ZOMBI ZONAE ZONAL ZONDA ZONED ZONER ZONES ZONKS ZOOEA ZOOEY ZOOID ZOOKS ZOOMS ZOONS ZOOTY ZOPPA ZOPPO ZORIL ZORIS ZORRO ZOUKS ZOWIE ZULUS ZUPAN ZUPAS ZURFS ZUZIM ZYGAL ZYGON ZYMES ZYMIC"
        word_list = a.split()
        normal_words = ['ALINE', 'PAPER', 'CROSS', 'RELAX', 'PROUD', 'HULLO', 'EQUAL', 'SADLY', 'PEACE', 'VITAL',
                        'CHILD', 'AVOID', 'SHILY', 'SIXTH', 'GRANT', 'WATCH', 'INDEX', 'ABOON', 'REDLY', 'RUGBY',
                        'FIELD', 'FRONT', 'TANTO', 'DOUBT', 'PLATE', 'AMISS', 'LOWLY', 'VAGUE', 'SPARE', 'BUILD',
                        'SMALL', 'START', 'USUAL', 'CANNY', 'LEARN', 'NASTY', 'SWEET', 'POINT', 'MOTOR', 'HAPPY',
                        'MINOR', 'PRIZE', 'NORTH', 'DIRTY', 'SPEAK', 'BIRTH', 'EARTH', 'UTTER', 'ALONE', 'CREAM',
                        'HEART', 'TEACH', 'WHOLE', 'CHEAP', 'BASTA', 'ISSUE', 'PLANT', 'SCORE', 'MORAL', 'BRAVA',
                        'BADLY', 'MATCH', 'HOTLY', 'SLEEP', 'JUDGE', 'THROW', 'UNION', 'SOLVE', 'CIVIL', 'SMITH',
                        'WHICH', 'MONTH', 'FAINT', 'BUYER', 'BRIEF', 'BLOOD', 'RIVER', 'BRAVE', 'OUGHT', 'QUICK',
                        'HEAVY', 'SLASH', 'TOUCH', 'WETLY', 'BELOW', 'AREAR', 'ALOFT', 'CLIMB', 'PLAIN', 'FUNNY',
                        'SLYLY', 'TALLY', 'HARSH', 'ASIDE', 'LIMIT', 'DRYLY', 'TRIAL', 'AFOUL', 'TRACK', 'EXIST',
                        'NOVEL', 'YEESH', 'ROYAL', 'RAISE', 'PROOF', 'WOOPS', 'AGAIN', 'WHITE', 'EXACT', 'SIGHT',
                        'PLONK', 'AMPLY', 'AFOOT', 'AWARD', 'AMUCK', 'ENTER', 'GRAND', 'WHILE', 'TREAT', 'IDEAL',
                        'AMONG', 'ARISE', 'REPLY', 'PROVE', 'WOMAN', 'BREAD', 'ENJOY', 'FATLY', 'SMILE', 'ALONG',
                        'GROSS', 'ABUSE', 'PLUMB', 'APTLY', 'LEWIS', 'LARGE', 'ALLOW', 'JONES', 'CHINA', 'WIRRA',
                        'SHARP', 'ABACK', 'DITTO', 'HENCE', 'YOUNG', 'PIECE', 'SQUAD', 'SMART', 'KNIFE', 'DANCE',
                        'STONE', 'FURTH', 'BRAVO', 'ROMAN', 'SPLIT', 'FAULT', 'ADIEU', 'SHOCK', 'UNTIL', 'BLAME',
                        'SOLID', 'EMPTY', 'OWNER', 'PHONE', 'READY', 'QUEER', 'PHASE', 'BLIND', 'ALIKE', 'DRESS',
                        'ADMIT', 'LENTO', 'ROUGH', 'MARCH', 'CRIME', 'HALLO', 'MONEY', 'VALUE', 'DILDO', 'BREAK',
                        'SKILL', 'DEATH', 'SCENE', 'METAL', 'VIVAT', 'PRICE', 'NAKED', 'SPEND', 'BOARD', 'LUCKY',
                        'THING', 'SPEED', 'STILL', 'JOLLY', 'ALOHA', 'THIRD', 'HUZZA', 'UNCLE', 'SILLY', 'SOUTH',
                        'HORSE', 'STOCK', 'STAND', 'BURST', 'STEAM', 'SUGAR', 'YOURS', 'SPANG', 'DREAM', 'UNDER',
                        'HOTEL', 'OCCUR', 'PETER', 'APPLY', 'NOISE', 'CHOOK', 'DRAMA', 'WORRY', 'NIGHT', 'ODDLY',
                        'SCALE', 'OFFER', 'SERVE', 'TWIRP', 'SHORT', 'COYLY', 'GOLLY', 'MARRY', 'TRADE', 'INNER',
                        'VOICE', 'MODEL', 'QUEEN', 'BASIC', 'CLOSE', 'DEPTH', 'CLEAN', 'AWFUL', 'MOUTH', 'AFTER',
                        'HOWDY', 'FLOOR', 'AGENT', 'AARGH', 'TASTE', 'NOBLY', 'EVENT', 'NEVER', 'FRESH', 'LEVEL',
                        'QUITE', 'POWER', 'CLEAR', 'SPORT', 'SHAPE', 'INPUT', 'FIFTH', 'WOULD', 'POUND', 'CLASS',
                        'TRUTH', 'GUIDE', 'ZOWIE', 'ERROR', 'STAFF', 'APACE', 'LAYER', 'UPPER', 'YECCH', 'ASKEW',
                        'MAJOR', 'THANK', 'NEATH', 'ENEMY', 'CLOCK', 'FULLY', 'CRAZY', 'ARGUE', 'APPLE', 'BRING',
                        'AGREE', 'DAMME', 'WRITE', 'ALTER', 'ALOOF', 'WHOSO', 'JAPAN', 'AUGHT', 'PRIOR', 'SHOOT',
                        'PILOT', 'LAXLY', 'STAGE', 'ABOUT', 'APART', 'TWICE', 'ENTRY', 'ADOWN', 'COURT', 'BEACH',
                        'FORTE', 'CYCLE', 'THINK', 'WASTE', 'FAITH', 'SKOAL', 'DRAFT', 'THICK', 'ROUTE', 'JOINT',
                        'RADIO', 'IMPLY', 'EXTRA', 'SPITE', 'NAVAL', 'ALIFE', 'STARK', 'CIRCA', 'GREEN', 'CHAIR',
                        'CLAIM', 'COACH', 'FIGHT', 'ALIVE', 'RIGHT', 'JESUS', 'GRASS', 'DAILY', 'WORLD', 'VIDEO',
                        'RAPID', 'PITCH', 'STUDY', 'REFER', 'FRAME', 'DIMLY', 'FUDGE', 'BRAIN', 'PLANE', 'SLEEK',
                        'TOUGH', 'HELLO', 'ADIOS', 'MINUS', 'SHEET', 'DRIVE', 'VIOLA', 'MAYBE', 'CARRY', 'SPACE',
                        'FRUIT', 'BEGAD', 'UNITY', 'PARTY', 'CATCH', 'COAST', 'TREND', 'FORCE', 'UPSET', 'RANGE',
                        'HENRY', 'TRAIN', 'SINCE', 'FALSE', 'TITLE', 'AHULL', 'GAILY', 'CHEST', 'SORRY', 'MERCY',
                        'STUFF', 'CHECK', 'PANEL', 'WANLY', 'SOOEY', 'ALACK', 'BALLY', 'TABLE', 'PIANO', 'AVAST',
                        'INFRA', 'WRONG', 'AGONE', 'LORDY', 'DULLY', 'AHEAD', 'IMAGE', 'TIGHT', 'STOUR', 'ABOVE',
                        'ABAFT', 'NURSE', 'COUNT', 'ADULT', 'AGAPE', 'PSYCH', 'AFORE', 'CHAIN', 'STORE', 'RATIO',
                        'TOTAL', 'LOOSE', 'GLASS', 'LEGAL', 'DRILY', 'EARLY', 'ALOUD', 'SMOKE', 'WHOSE', 'HASTA',
                        'MAGIC', 'BLOCK', 'THINE', 'CAUSE', 'YOUTH', 'STYLE', 'CROWN', 'VALID', 'RURAL', 'QUIET',
                        'OFTEN', 'WHERE', 'SNIFF', 'SHEER', 'GODLY', 'STEEL', 'SHARE', 'HOUSE', 'SENSE', 'WHIST',
                        'DRINK', 'TRULY', 'TRACE', 'SELLY', 'STEEP', 'TODAY', 'SCOPE', 'FITLY', 'GUESS', 'PRESS',
                        'LAURA', 'ADOPT', 'GROUP', 'TRUST', 'SUPER', 'BASIS', 'LIGHT', 'ANGRY', 'WACKO', 'PLACE',
                        'MUSIC', 'ANGER', 'SHIRT', 'TOWER', 'BLACK', 'BROAD', 'LEAVE', 'GAYLY', 'THERE', 'HUMAN',
                        'SHEEP', 'LAUGH', 'SHYLY', 'REACH', 'FINAL', 'BROWN', 'URBAN', 'WRYLY', 'MADLY', 'VISIT',
                        'SALVE', 'HAPLY', 'TERRY', 'BLESS', 'OUTER', 'LOCAL', 'SOUND', 'FOCUS', 'FORTH', 'GIANT',
                        'THEME', 'AWARE', 'LUNCH', 'ORDER', 'COVER', 'SHIFT', 'FIRST', 'STATE', 'FEYLY', 'ACUTE',
                        'CHIEF', 'GREAT', 'NEWLY', 'PRIME', 'STICK', 'BEGIN', 'OTHER', 'VERRY', 'WATER', 'HAVOC',
                        'SHALL', 'RAMEN', 'CROWD', 'ROUND', 'PRIDE', 'ICILY', 'FRANK']
        delta = (today - last).days % 506

        letter_list1 = ["Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P"]
        letter_list2 = ["A", "S", "D", "F", "G", "H", "J", "K", "L"]
        letter_list3 = ["Z", "X", "C", "V", "B", "N", "M"]

        images = "images"
        db = client['wordle']


    else:
        b = open("fonts\\valid_words\\hebwords.txt", "r", encoding='utf-8')
        word_list2 = b.read()
        a = word_list2.split()

        word_list = []
        for word in a:
            fixed_word = ""
            for char in word:
                if ord(char) <= 1514 and ord(char) >= 1488:
                    fixed_word += char
            if len(fixed_word) == 5:
                word_list.append(fixed_word)
                # print(f'the word {fixed_word} was added')
            # else:
            # print(f'the word {fixed_word} was not added and its length is {len(fixed_word)}')
        print(len(word_list))
        normal_words = ['◊©◊í◊©◊ï◊í', '◊û◊§◊ú◊¶◊™', '◊ó◊ô◊ß◊ï◊ô', '◊î◊©◊ú◊û◊î', '◊ò◊û◊ò◊ï◊ù', '◊î◊ß◊®◊ë◊î', '◊ò◊ô◊¢◊ï◊ü', '◊©◊ß◊ì◊ô◊î', '◊®◊ô◊í◊ï◊ú', '◊™◊®◊ï◊§◊î',
                        '◊¶◊ï◊ú◊ú◊™', '◊©◊ë◊™◊ê◊ô', '◊®◊ï◊°◊ô◊î', '◊ß◊ë◊ô◊†◊ò', '◊ì◊ô◊ú◊ï◊í', '◊®◊ë◊ô◊¢◊ô', '◊û◊ï◊©◊ú◊í', '◊û◊ß◊ò◊®◊™', '◊©◊ï◊§◊ò◊™', '◊ô◊©◊©◊õ◊®',
                        '◊õ◊°◊§◊ô◊™', '◊î◊ï◊ñ◊ú◊î', '◊û◊©◊ò◊®◊î', '◊™◊í◊ë◊ï◊®', '◊û◊©◊ú◊ó◊™', '◊û◊ì◊ú◊ô◊î', '◊¢◊ë◊®◊ô◊™', '◊¶◊§◊®◊ì◊¢', '◊û◊©◊ï◊í◊¢', '◊í◊®◊¢◊ô◊ü',
                        '◊û◊©◊§◊ó◊î', '◊î◊ï◊û◊ô◊î', '◊©◊ï◊ú◊ó◊ü', '◊©◊í◊®◊ô◊®', '◊©◊õ◊ï◊†◊î', '◊ê◊®◊û◊ï◊ü', '◊í◊ú◊ë◊ï◊¢', '◊®◊¢◊ô◊ì◊î', '◊§◊ú◊ê◊§◊ú', '◊©◊û◊ô◊ô◊ù',
                        '◊û◊©◊ú◊ï◊ó', '◊ó◊©◊ë◊ï◊ü', '◊ú◊í◊û◊®◊ô', '◊™◊ó◊ß◊ô◊®', '◊©◊ú◊û◊ï◊™', '◊ë◊®◊ô◊ï◊ü', '◊û◊®◊™◊ï◊ü', '◊™◊©◊ú◊ï◊ù', '◊û◊™◊ï◊ï◊ö', '◊ê◊ß◊ú◊ô◊ù',
                        '◊§◊†◊°◊ô◊î', '◊û◊†◊î◊ô◊í', '◊™◊û◊ï◊†◊î', '◊ê◊®◊í◊û◊ü', '◊û◊¶◊§◊ï◊ü', '◊™◊®◊ô◊°◊®', '◊§◊ï◊ú◊ô◊ü', '◊ê◊ó◊®◊ô◊î', '◊û◊ß◊ú◊ó◊™', '◊û◊ú◊ß◊ï◊©',
                        '◊ô◊î◊ú◊ï◊ù', '◊ú◊ï◊ò◊®◊î', '◊™◊¢◊ì◊ï◊£', '◊ë◊†◊ñ◊ô◊ü', '◊û◊©◊ú◊ï◊ó', '◊™◊¢◊†◊ô◊™', '◊ê◊ï◊ï◊ô◊®', '◊®◊§◊ê◊ô◊ù', '◊©◊ô◊ô◊®◊î', '◊û◊°◊§◊ô◊ß',
                        '◊û◊¶◊®◊ô◊ù', '◊ê◊ú◊û◊ú◊ê', '◊ú◊ó◊ô◊ô◊ù', '◊™◊í◊ï◊ë◊î', '◊ß◊®◊ô◊¶◊î', '◊û◊™◊ï◊§◊£', '◊õ◊û◊î◊ô◊ü', '◊°◊ò◊ô◊®◊î', '◊ó◊û◊°◊ô◊ü', '◊ì◊®◊ß◊ï◊ü',
                        '◊ß◊ï◊†◊ì◊°', '◊§◊ò◊®◊ï◊ú', '◊ò◊ô◊ï◊ò◊î', '◊¢◊ô◊ô◊®◊î', '◊ê◊®◊ï◊û◊î', '◊®◊û◊ì◊ê◊ü', '◊§◊ô◊™◊ï◊™', '◊ó◊ú◊ú◊ô◊™', '◊°◊ô◊ô◊¢◊ü', '◊™◊õ◊°◊ô◊°',
                        '◊®◊ô◊ë◊ô◊™', '◊î◊®◊ô◊ï◊ü', '◊™◊®◊û◊ô◊™', '◊°◊§◊í◊ò◊ô', '◊ß◊ï◊®◊ë◊ü', '◊õ◊ï◊°◊ô◊™', '◊ó◊®◊ï◊°◊™', '◊û◊î◊ï◊û◊î', '◊ó◊ú◊ß◊ô◊™', '◊û◊ô◊ï◊™◊®',
                        '◊©◊ú◊ï◊©◊î', '◊®◊§◊ï◊ê◊î', '◊°◊ë◊ô◊ë◊î', '◊í◊ú◊ï◊ò◊ü', '◊™◊†◊ï◊¢◊î', '◊°◊ú◊û◊ï◊ü', '◊©◊¢◊ò◊†◊ñ', '◊™◊ß◊ï◊û◊î', '◊ë◊í◊®◊ï◊™', '◊û◊¢◊ò◊§◊î',
                        '◊û◊™◊†◊ß◊©', '◊ñ◊ô◊ß◊ï◊ß', '◊ê◊ô◊í◊®◊™', '◊û◊©◊ï◊ê◊î', '◊ô◊©◊®◊ê◊ú', '◊§◊ï◊ñ◊û◊ß', '◊¢◊¶◊û◊ê◊ô', '◊ê◊¶◊ô◊ú◊ô', '◊¢◊ú◊ô◊ï◊ü', '◊î◊¶◊ë◊¢◊î',
                        '◊ë◊†◊ô◊ô◊ü', '◊§◊ï◊ê◊ò◊ô', '◊§◊§◊ê◊ô◊î', '◊ó◊ú◊ô◊§◊î', '◊î◊õ◊ó◊©◊î', '◊ñ◊ô◊ï◊ï◊í', '◊§◊ô◊ú◊í◊©', '◊©◊ë◊ô◊™◊î', '◊û◊ì◊ï◊®◊î', '◊û◊©◊ï◊ú◊©',
                        '◊†◊°◊ó◊§◊î', '◊ß◊ï◊§◊ô◊ù', '◊™◊¢◊ú◊ï◊ú', '◊™◊ó◊ñ◊ô◊™', '◊û◊î◊§◊õ◊î', '◊©◊ß◊ô◊ï◊™', '◊î◊ì◊ú◊§◊î', '◊ô◊ó◊ô◊ì◊î', '◊ê◊§◊ú◊ô◊î', '◊û◊™◊°◊ô◊°',
                        '◊°◊§◊ï◊®◊ò', '◊§◊®◊°◊ï◊ù', '◊§◊®◊†◊°◊î', '◊©◊ë◊ú◊ï◊ú', '◊í◊ë◊ô◊†◊î', '◊®◊ê◊©◊ô◊™', '◊í◊§◊®◊ï◊®', '◊ó◊ô◊®◊ï◊ù', '◊ì◊ó◊ô◊ô◊î', '◊ó◊û◊ô◊©◊ô',
                        '◊í◊ê◊ï◊ï◊î', '◊û◊°◊ô◊ë◊î', '◊û◊ì◊®◊í◊î', '◊ê◊õ◊ô◊ú◊î', '◊©◊™◊ô◊ô◊ù', '◊ô◊¶◊ô◊ê◊î', '◊™◊ú◊û◊ô◊ì', '◊§◊®◊ß◊ì◊ü', '◊™◊¶◊§◊ô◊™', '◊ê◊û◊†◊ï◊™',
                        '◊©◊ó◊ô◊ô◊î', '◊û◊û◊©◊ú◊î', '◊°◊§◊®◊ï◊™', '◊ì◊ï◊í◊û◊ü', '◊ú◊¢◊®◊ï◊£', '◊§◊°◊ô◊ß◊î', '◊ê◊©◊õ◊ï◊ú', '◊í◊®◊í◊ô◊®', '◊™◊ê◊®◊ô◊ö', '◊®◊õ◊ô◊©◊î',
                        '◊™◊©◊ú◊ï◊ù', '◊®◊ê◊ô◊ï◊™', '◊†◊ë◊ó◊®◊™', '◊û◊®◊ï◊©◊¢', '◊ô◊ï◊û◊®◊î', '◊û◊ò◊®◊ô◊ì', '◊ß◊ï◊ë◊†◊ô', '◊™◊®◊ë◊ï◊™', '◊ê◊†◊í◊ú◊ô', '◊û◊™◊†◊ß◊©',
                        '◊û◊©◊™◊ú◊î', '◊û◊©◊ï◊™◊£', '◊™◊ê◊í◊ô◊ì', '◊†◊ó◊ô◊™◊î', '◊ë◊ß◊ë◊ï◊ß', '◊†◊ï◊í◊¢◊™', '◊ß◊§◊ê◊ô◊ü', '◊ë◊®◊ì◊ú◊°', '◊ú◊ï◊î◊ò◊™', '◊©◊®◊ò◊ï◊ò',
                        '◊ß◊ì◊ï◊©◊î', '◊°◊ò◊ô◊®◊î', '◊™◊°◊û◊ô◊ü', '◊ê◊ó◊®◊ê◊ô', '◊î◊§◊†◊ï◊ò', '◊ï◊†◊¶◊ô◊î', '◊¢◊ú◊ô◊ô◊î', '◊û◊ß◊°◊ô◊ù', '◊ß◊ò◊ô◊†◊î', '◊û◊¶◊ú◊ô◊ó',
                        '◊™◊ß◊®◊ô◊ë', '◊õ◊ô◊†◊®◊™', '◊ú◊ë◊†◊ï◊ü', '◊í◊ê◊ï◊ú◊î', '◊§◊ú◊ô◊ú◊ô', '◊í◊ú◊ô◊ì◊î', '◊ó◊ß◊ô◊ß◊î', '◊®◊¶◊ï◊¢◊î', '◊ó◊ï◊®◊ë◊ü', '◊©◊ì◊®◊ï◊™',
                        '◊û◊¢◊ï◊®◊ë', '◊¢◊ë◊ï◊ì◊î', '◊¢◊õ◊ë◊ô◊©', '◊ë◊¶◊ï◊®◊™', '◊™◊ê◊í◊ô◊ì', '◊ï◊ï◊ì◊ß◊î', '◊§◊ñ◊û◊ï◊ü', '◊û◊û◊ú◊õ◊î', '◊û◊ó◊°◊ï◊®', '◊ß◊†◊¶◊ú◊®',
                        '◊©◊†◊ô◊¶◊ú', '◊©◊ë◊ô◊™◊î', '◊ô◊®◊ï◊ß◊î', '◊ó◊ï◊û◊ï◊°', '◊ë◊ì◊ô◊ó◊î', '◊û◊§◊ú◊í◊î', '◊™◊ê◊ï◊®◊î', '◊û◊™◊û◊ó◊î', '◊®◊û◊ñ◊ï◊®', '◊™◊ì◊®◊ï◊ö',
                        '◊©◊®◊©◊®◊™', '◊ê◊®◊ï◊ó◊î', '◊û◊ï◊¢◊¶◊î', '◊ô◊°◊ï◊ì◊ô', '◊§◊†◊™◊®◊î', '◊™◊ß◊ï◊§◊î', '◊ì◊ú◊ô◊§◊î', '◊û◊ô◊†◊õ◊ü', '◊ì◊®◊ß◊ï◊ü', '◊õ◊ú◊†◊ô◊™',
                        '◊í◊¢◊í◊ï◊¢', '◊ó◊ë◊¶◊ú◊™', '◊û◊ú◊ï◊õ◊î', '◊û◊°◊ô◊ë◊î', '◊™◊®◊í◊ï◊ù', '◊û◊©◊û◊®◊™', '◊ó◊ï◊ú◊ï◊ü', '◊ó◊ë◊ô◊™◊î', '◊†◊ë◊ó◊®◊™', '◊¢◊ú◊ô◊ï◊ü',
                        '◊§◊°◊ô◊§◊°', '◊ë◊ï◊ú◊¢◊ü', '◊©◊¢◊ï◊ï◊î', '◊ë◊ô◊¶◊ô◊™', '◊§◊™◊®◊ï◊ü', '◊î◊¶◊î◊®◊î', '◊ë◊®◊ô◊ó◊î', '◊ê◊ô◊®◊ê◊ü', '◊õ◊®◊ô◊©◊î', '◊§◊©◊ô◊ñ◊ù',
                        '◊û◊ò◊ê◊ï◊®', '◊ò◊®◊ï◊§◊ô', '◊ì◊ï◊ï◊ß◊ê', '◊°◊ô◊§◊ï◊ó', '◊û◊õ◊ï◊¢◊®', '◊ó◊†◊ô◊†◊î', '◊ê◊ñ◊î◊®◊î', '◊†◊¢◊ô◊ú◊î', '◊û◊®◊§◊°◊™', '◊î◊¢◊®◊ï◊™',
                        '◊©◊ï◊©◊†◊î', '◊ê◊™◊®◊ï◊í', '◊ú◊í◊û◊®◊ô', '◊õ◊ï◊ú◊®◊î', '◊î◊§◊ú◊í◊î', '◊í◊ë◊ï◊ú◊ô', '◊û◊î◊ï◊û◊î', '◊í◊ú◊®◊ô◊î', '◊¢◊ô◊®◊ê◊ß', '◊ê◊®◊ë◊¢◊î',
                        '◊û◊ó◊ñ◊ï◊®', '◊û◊§◊ß◊ì◊™', '◊û◊ú◊ñ◊ô◊î', '◊ñ◊ï◊û◊ë◊ô', '◊°◊ß◊ô◊¶◊î', '◊ê◊ß◊ì◊û◊ô', '◊î◊ß◊ú◊ò◊î', '◊ó◊ú◊ï◊ß◊î', '◊û◊¢◊ë◊ì◊î', '◊™◊ß◊ï◊ï◊î',
                        '◊ô◊¶◊ô◊®◊î', '◊ó◊°◊ô◊û◊î', '◊¢◊®◊ë◊ï◊™', '◊û◊¶◊†◊§◊™', '◊§◊®◊í◊ï◊ì', '◊™◊ï◊¶◊ê◊î', '◊û◊§◊ó◊ô◊ì', '◊û◊©◊ô◊ó◊ô', '◊ê◊™◊ï◊†◊î', '◊õ◊ú◊ë◊ô◊ù',
                        '◊ó◊©◊ï◊õ◊î', '◊û◊†◊°◊®◊î', '◊™◊î◊ô◊ú◊î', '◊†◊ñ◊î◊®◊™', '◊ê◊†◊ó◊†◊ï', '◊†◊°◊ô◊í◊î', '◊õ◊®◊õ◊ï◊ù', '◊í◊ô◊©◊ï◊®', '◊ò◊ß◊°◊ô◊ù', '◊û◊¶◊ó◊ô◊ß',
                        '◊ë◊®◊ñ◊ô◊ú', '◊§◊°◊§◊ï◊°', '◊ß◊ñ◊ô◊†◊ï', '◊ó◊ë◊®◊ï◊ü', '◊ï◊¢◊ô◊ì◊î', '◊°◊ó◊ï◊®◊î', '◊™◊ó◊®◊ï◊™', '◊¶◊ì◊ì◊ô◊ù', '◊ó◊¶◊ô◊ô◊î', '◊î◊®◊í◊¢◊î',
                        '◊†◊°◊ô◊¢◊î', '◊°◊§◊®◊ì◊ô', '◊¢◊†◊ô◊ë◊î', '◊°◊ò◊ô◊ô◊ß', '◊û◊®◊ß◊ì◊™', '◊û◊í◊ë◊ú◊î', '◊õ◊ï◊ï◊®◊™', '◊î◊§◊ï◊õ◊î', '◊ê◊®◊ß◊ò◊ô', '◊§◊®◊¢◊ï◊©',
                        '◊ß◊ú◊ß◊ï◊ú', '◊™◊ï◊§◊ô◊ù', '◊õ◊ú◊©◊î◊ï', '◊ë◊ë◊ï◊ê◊î', '◊í◊®◊ô◊§◊î', '◊û◊ì◊ï◊®◊î', '◊†◊ï◊ß◊©◊î']
        delta = (today - last).days % 336

        letter_list1 = ["◊ß", "◊®", "◊ê", "◊ò", "◊ï", "◊ü", "◊ù", "◊§"]
        letter_list2 = ["◊©", "◊ì", "◊í", "◊õ", "◊¢", "◊ô", "◊ó", "◊ú", "◊ö", "◊£"]
        letter_list3 = ["◊ñ", "◊°", "◊ë", "◊î", "◊†", "◊û", "◊¶", "◊™", "◊•"]

        images = "he-images"
        db = client['hewordle']

    collection1 = db[str_today]
    last_date_won = find_last_date_won()
    todays_plays = get_todays_plays()
    best_score = find_best_score(todays_plays)
    target = normal_words[delta]

    bright_bg = pygame.image.load(f'{images}\\background3.png')
    orange_bg = pygame.image.load(f'{images}\\background4.png')
    pink_bg = pygame.image.load(f'{images}\\background5.png')
    yellow_bg = pygame.image.load(f'{images}\\background6.png')
    purple_bg = pygame.image.load(f'{images}\\background7.png')
    gray_bg = pygame.image.load(f'{images}\\background8.png')
    image = pygame.image.load(f'{images}\\image2.jpg')
    dist = pygame.image.load(f'{images}\\dist.png')

    images_array = [bright_bg, orange_bg, pink_bg, yellow_bg, purple_bg, gray_bg, image, dist]
    return [db, collection1, word_list, normal_words, letter_list1, letter_list2, letter_list3, images, target, best_score, last_date_won, images_array]

def find_best_score(plays):
    best_score = 7
    users = []
    for play in plays:
        if play['colors'][-1] == [green for i in range(5)]:
            if len(play['guesses']) == best_score:
                users.append(play['user'])
            elif len(play['guesses']) < best_score:
                users = []
                best_score = len(play['guesses'])
                users.append(play['user'])
    return [users, best_score]

def get_todays_plays():
    db = client['wordle'] if langEN else client['hewordle']
    collection1 = db[str_today]
    cursor = collection1.find({})
    todays_plays = []
    for play in cursor:
        todays_plays.append(play)
    return todays_plays
def find_last_date_won():
    db = client['wordle'] if langEN else client['hewordle']
    winners_collection = db["winners"]
    cursor = winners_collection.find({})
    date = None
    for dicti in cursor:
        if username in dicti['users']:
            if date == None or dicti['date'] > date:
                date = dicti['date']
    print(date)
    cursor = winners_collection.find({'date': date})
    for dicti in cursor:
        print(dicti)
        if username in dicti['claimed_by']:
            return None
        else:
            claimed_by = [username]
            for user in dicti['claimed_by']:
                claimed_by.append(user)

            data = {'users': dicti['users'], 'score': dicti['score'], 'date': date, 'claimed_by': claimed_by}
            winners_collection.delete_one({'date': date})
            winners_collection.insert_one(data)
            return date

def draw_congrats(date):
    date_day = date[8:10]
    date_month = date[5:7]
    date_year = date[0:4]
    date = f'{date_day}/{date_month}/{date_year}'
    pygame.draw.rect(screen, black, pygame.Rect(200, 230, 570, 170))
    pygame.draw.rect(screen, gray, pygame.Rect(210, 240, 550, 150))
    pygame.draw.line(screen, red, (705, 250), (745, 290), 13)
    pygame.draw.line(screen, red, (745, 250), (705, 290), 13)
    txt1 = he_font80.render("◊û◊ñ◊ú ◊ò◊ï◊ë!"[::-1], True, light_green)
    txt2 = he_font35.render(f'◊ë◊™◊ê◊®◊ô◊ö {date[::-1]} ◊†◊ô◊¶◊ó◊™ ◊ë◊ï◊ï◊®◊ì◊ú!'[::-1], True, light_green)
    screen.blit(txt1, ((center_pos(250, 470, txt1.get_rect().width)), 225))
    screen.blit(txt2, ((center_pos(250, 470, txt2.get_rect().width)), 325))

def draw_best_score(best_score):
    # best_score = [['s8875898', 's8764797', 's9118046'], 3]
    sht = 0
    if best_score[1] == 7:
        txt1 = he_font25.render("◊ê◊£ ◊ê◊ó◊ì ◊ú◊ê ◊î◊¶◊ú◊ô◊ó"[::-1], True, black)
        txt2 = he_font25.render("◊ê◊™ ◊î◊ï◊ï◊®◊ì◊ú ◊î◊ô◊ï◊ù!"[::-1], True, black)
        txt3 = he_font25.render("◊î◊ê◊ù ◊™◊î◊ô◊î ◊î◊®◊ê◊©◊ï◊ü?"[::-1], True, black)
        screen.blit(txt1, (center_pos(730, 300, txt1.get_rect().width), sht + 20))
        screen.blit(txt2, (center_pos(730, 300, txt2.get_rect().width), sht + 40))
        screen.blit(txt3, (center_pos(730, 300, txt3.get_rect().width), sht + 70))
    else:
        txt1 = he_font45.render("◊î◊ê◊ú◊ï◊£ ◊î◊ô◊ï◊û◊ô!"[::-1], True, black)
        screen.blit(txt1, (center_pos(730, 300, txt1.get_rect().width), sht + 20))
        for index, player in enumerate(best_score[0]):
            player_name = find_user(player)
            print(player_name)
            if len(player_name) == 0 or ord(player_name[-1]) >= 1488 and ord(player_name[-1]) <= 1514:
                txt3 = he_font35.render(player_name[::-1], True, purple2)
                screen.blit(txt3, (center_pos(730, 300, txt3.get_rect().width), sht + 70 + index * 35))
            else:
                txt3 = fffont.render(player_name, True, purple2)
                screen.blit(txt3, (center_pos(730, 300, txt3.get_rect().width), sht + 83 + index * 35))
        txt4 = he_font25.render(f'◊ï◊ñ◊î ◊ú◊ß◊ó ◊®◊ß {best_score[1]} ◊†◊°◊ô◊ï◊†◊ï◊™!'[::-1], True, black)
        screen.blit(txt4, (center_pos(730, 300, txt4.get_rect().width), sht + 70 + len(best_score[0]) * 35 + 10))

# ◊î◊®◊ó◊ë◊î ◊ú◊ú◊ï◊ë◊ô ◊©◊ú ◊î1v1
def extension():
    main_page = you_won_font.render('MAIN PAGE', True, black)
    main_page_width = main_page.get_rect().width
    pygame.draw.rect(screen, main_bg_color,
    pygame.Rect((2115 - main_page_width) // 2 + 200, 124, main_page_width + 20, 48))
    screen.blit(main_page, ((2115 - main_page_width) // 2 + 210, 131))

    create_room()

    join_room()

    regular = keyboard_font.render('REGULAR', True, black if mode_clicked == 1 else orange)
    orange_mode = keyboard_font.render('MODE', True, black if mode_clicked == 1 else orange)
    hard = keyboard_font.render('HARD', True, black if mode_clicked == 2 else light_pink)
    pink_mode = keyboard_font.render('MODE', True, black if mode_clicked == 2 else light_pink)

    regular_width = regular.get_rect().width
    hard_width = hard.get_rect().width
    mode_width = orange_mode.get_rect().width

    pygame.draw.rect(screen, black if mode_clicked == 1 else orange, pygame.Rect(950, 200, 270, 200))
    pygame.draw.rect(screen, orange if mode_clicked == 1 else white, pygame.Rect(960, 210, 250, 180))

    pygame.draw.rect(screen, black if mode_clicked == 2 else light_pink, pygame.Rect(1320, 200, 270, 200))
    pygame.draw.rect(screen, light_pink if mode_clicked == 2 else white, pygame.Rect(1330, 210, 250, 180))

    screen.blit(regular, (950 + (270 - regular_width) // 2, 255))
    screen.blit(orange_mode, (950 + (270 - mode_width) // 2, 305))
    screen.blit(hard, (1320 + (270 - hard_width) // 2, 255))
    screen.blit(pink_mode, (1320 + (270 - mode_width) // 2, 305))

    pygame.display.flip()

# ◊û◊¶◊ô◊ô◊® ◊ê◊™ ◊õ◊§◊™◊ï◊® ◊î◊î◊¶◊ò◊®◊§◊ï◊™ ◊ú◊ó◊ì◊®
def join_room():
    join_room = font.render('JOIN ROOM', True, black)
    join_room_width = join_room.get_rect().width
    pygame.draw.rect(screen, black, pygame.Rect(920, 640, 700, 130))
    pygame.draw.rect(screen, white if not joinable else light_green, pygame.Rect(930, 650, 680, 110))
    screen.blit(join_room, (920 + (700 - join_room_width)//2, 670))

    pygame.display.flip()

def switch_lang_button():
    pygame.draw.rect(screen, light_blue, pygame.Rect(10, 65, 150, 65))
    pygame.draw.rect(screen, black, pygame.Rect(13, 68, 144, 59))
    if langEN:
        txt1 = ffont.render('SWITCH TO', True, white)
        txt2 = ffont.render('HEBREW!', True, white)
        screen.blit(txt1, (center_pos(10, 150, txt1.get_rect().width), 77))
        screen.blit(txt2, (center_pos(10, 150, txt2.get_rect().width), 101))
    else:
        txt1 = he_font30.render('◊¢◊ë◊ï◊®'[::-1], True, white)
        txt2 = he_font30.render('◊ú◊ê◊†◊í◊ú◊ô◊™!'[::-1], True, white)
        screen.blit(txt1, (center_pos(10, 150, txt1.get_rect().width), 64))
        screen.blit(txt2, (center_pos(10, 150, txt2.get_rect().width), 89))

def draw_distribution_button():
    pygame.draw.rect(screen, light_pink, pygame.Rect(10, 145, 150, 65))
    pygame.draw.rect(screen, black, pygame.Rect(13, 148, 144, 59))
    if langEN:
        txt1 = ffont.render('ADD ME TO', True, white)
        txt2 = font14.render('DISTRIBUTION!', True, white)
        screen.blit(txt1, (center_pos(10, 150, txt1.get_rect().width), 159))
        screen.blit(txt2, (center_pos(10, 150, txt2.get_rect().width), 181))
    else:
        txt1 = he_font30.render('◊î◊õ◊†◊° ◊ê◊ï◊™◊ô'[::-1], True, white)
        txt2 = he_font30.render('◊ú◊™◊§◊ï◊¶◊î!'[::-1], True, white)
        screen.blit(txt1, (center_pos(10, 150, txt1.get_rect().width), 143))
        screen.blit(txt2, (center_pos(10, 150, txt2.get_rect().width), 168))

# ◊û◊¶◊ô◊ô◊®◊™ ◊û◊ì ◊ó◊ô◊ô◊ù ◊ë◊î◊ô◊†◊™◊ü ◊û◊°◊§◊®, ◊ú◊ê ◊ë◊©◊ô◊û◊ï◊©
def health_bar(num):
    x1 = 20
    y1 = 60
    length = 400
    width = 40
    multiplyer = length // 100
    r = 255
    g = 0
    b = 0
    pygame.draw.rect(screen, black, pygame.Rect(x1-3, y1-3, width+6, length+2))
    for i in range(100):
        curr_color = [r, g, b]
        length = length - multiplyer
        pygame.draw.rect(screen, curr_color, pygame.Rect(x1, y1, width, length))
        if g != 255:
            g += 5
        else:
            r -= 5
        print(curr_color)
    pygame.draw.rect(screen, black, pygame.Rect(x1, y1 - 1, width, (100 - num) * multiplyer))
    pygame.display.flip()

def find_stats(user):
    name = find_user(user)
    db = client['wordle'] if langEN else client['hewordle']
    dates = []
    for item in db.list_collection_names():
        if len(item) == 10:
            dates.append(item)
    all_dates = sorted(dates)

    plays_count = 0
    avg = 0
    wins = 0
    sum = 0
    words = {}
    most_used_word = ""
    for date in all_dates:
        date_collection = db[date]
        cursor = date_collection.find({'user': user})
        for play in cursor:
            for guess in play['guesses']:
                if guess not in words.keys():
                    words[guess] = 1
                else:
                    words[guess] += 1
            if play['colors'][-1] == [green for _ in range(5)]:
                wins += 1
                sum += len(play['colors'])
            plays_count += 1
    if wins != 0:
        avg = round(sum / wins, 2)
    if len(words.keys()) != 0:
        most_used_word = max(words, key=words.get)
    winners_collection = db["winners"]
    cursor = winners_collection.find({})
    winnings = 0
    for day in cursor:
        if user in day['users']:
            winnings += 1
    return [name, plays_count, wins, avg, most_used_word, winnings]

def draw_profile(user):
    name, plays_count, wins, avg, most_used_word, winnings = find_stats(user)
    pygame.draw.rect(screen, purple2, pygame.Rect(250, 165, 470, 590))
    pygame.draw.rect(screen, black, pygame.Rect(255, 170, 460, 580))
    pygame.draw.line(screen, red, (658, 182), (698, 222), 13)
    pygame.draw.line(screen, red, (698, 182), (658, 222), 13)
    #name = 'h0484admo'
    if name != "" and ord(name[0]) >= 1488 and ord(name[0]) <= 1514:
        reg_name = True
        name = he_font55.render(name[::-1], True, white)
    else:
        name = keyboard_font.render(name, True, white)
        reg_name = False
    screen.blit(name, (center_pos(250, 470, name.get_rect().width), 220 if reg_name else 239))

    for i in range(2):
        z = 30 if i == 0 else 0
        for j in range(2):
            pygame.draw.rect(screen, purple2, pygame.Rect(270 + j * 225, 410 + i * 150, 205, 160 - z))
            pygame.draw.rect(screen, black, pygame.Rect(275 + j * 225, 415 + i * 150, 195, 150 - z))
    pygame.draw.rect(screen, purple2, pygame.Rect(270, 310, 430, 80))
    pygame.draw.rect(screen, black, pygame.Rect(275, 315, 420, 70))

    txt = he_font45.render('◊û◊ô◊ú◊î ◊ê◊î◊ï◊ë◊î'[::-1], True, purple)
    screen.blit(txt, (470, 317))
    font = keyboard_font if langEN else he_font55
    most_used_word = most_used_word if langEN else most_used_word[::-1]
    txt1 = font.render(most_used_word, True, white)
    screen.blit(txt1, (center_pos(275, 195, txt1.get_rect().width), 330 if langEN else 310))

    txt = he_font45.render('◊û◊©◊ó◊ß◊ô◊ù'[::-1], True, purple)
    screen.blit(txt, (center_pos(495, 205, txt.get_rect().width), 410))
    txt1 = keyboard_font.render(str(plays_count), True, white)
    screen.blit(txt1, (center_pos(495, 205, txt1.get_rect().width), 480))

    txt = he_font45.render('◊†◊¶◊ó◊ï◊†◊ï◊™'[::-1], True, purple)
    screen.blit(txt, (center_pos(270, 205, txt.get_rect().width), 410))
    txt1 = keyboard_font.render(str(wins), True, white)
    screen.blit(txt1, (center_pos(270, 205, txt1.get_rect().width), 480))

    txt = he_font45.render('◊î◊ê◊ú◊ï◊£'[::-1], True, purple)
    screen.blit(txt, (center_pos(495, 205, txt.get_rect().width), 560))
    txt = he_font45.render('◊î◊ô◊ï◊û◊ô'[::-1], True, purple)
    screen.blit(txt, (center_pos(495, 205, txt.get_rect().width), 600))
    txt1 = keyboard_font.render(str(winnings), True, white)
    screen.blit(txt1, (center_pos(495, 205, txt1.get_rect().width), 665))

    txt = he_font45.render('◊û◊û◊ï◊¶◊¢'[::-1], True, purple)
    screen.blit(txt, (center_pos(270, 205, txt.get_rect().width), 560))
    txt = he_font45.render('◊†◊ô◊ó◊ï◊©◊ô◊ù'[::-1], True, purple)
    screen.blit(txt, (center_pos(270, 205, txt.get_rect().width), 597))
    txt1 = keyboard_font.render(str(avg), True, white)
    screen.blit(txt1, (center_pos(270, 205, txt1.get_rect().width), 665))

    try:
        player_image = pygame.image.load(f'\\\\hmpublicvfs\\Software\\amitt\\{user}.png')
        scaled_image = pygame.transform.scale(player_image, (50, 60))
        screen.blit(scaled_image, (273, 180))
    except:
        pass

    pygame.display.flip()

# ◊û◊¶◊ô◊ô◊® ◊ê◊™ ◊õ◊§◊™◊ï◊® ◊îcreate room
def create_room():
    create_room_bg_color = white
    if mode_clicked == 1:
        create_room_bg_color = orange
    elif mode_clicked == 2:
        create_room_bg_color = light_pink
    create_room = font.render('CREATE ROOM', True, black)
    create_room_width = create_room.get_rect().width
    pygame.draw.rect(screen, black, pygame.Rect(920, 450, 700, 130))
    pygame.draw.rect(screen, create_room_bg_color, pygame.Rect(930, 460, 680, 110))
    screen.blit(create_room, (920 + (700 - create_room_width) // 2, 480))

# ◊û◊¶◊ô◊ô◊®◊™ ◊¢◊ú ◊î◊û◊°◊ö ◊ê◊™ ◊î◊ß◊ï◊ì ◊ï◊û◊ó◊ñ◊ô◊®◊î ◊ê◊™ ◊î◊ß◊ï◊ì
def generate_code():
    if mode_clicked == 1:
        bg = orange
        code_color = claret
    else:
        bg = light_pink
        code_color = purple2
    pygame.draw.rect(screen, black, pygame.Rect(1040, 820, 480, 240))
    pygame.draw.rect(screen, bg, pygame.Rect(1055, 835, 450, 210))

    room_code = font60.render('ROOM CODE:', True, black)
    room_code_width = room_code.get_rect().width
    screen.blit(room_code, (1040 + (480 - room_code_width) // 2, 850))

    if langEN:
        code = ''.join(random.choices(string.ascii_uppercase, k=5))
        code_display = font60.render(code, True, code_color)
        code_display_width = code_display.get_rect().width
        screen.blit(code_display, (1040 + (480 - code_display_width) // 2, 925))
    else:
        code = ''.join(random.choices(["◊ê","◊ë","◊í","◊ì","◊î","◊ï","◊ñ","◊ó","◊ò","◊ô","◊õ","◊ú","◊û","◊†","◊°","◊¢","◊§","◊¶","◊ß","◊®","◊©","◊™"], k=5))
        code_display = he_font60.render(code[::-1], True, code_color)
        code_display_width = code_display.get_rect().width
        screen.blit(code_display, (1040 + (480 - code_display_width) // 2, 909))

    share_your_code = share_your_code_font.render('!◊ì◊ï◊ß◊î ◊™◊ê ◊ï◊§◊™◊©', True, black)
    share_your_code_width = share_your_code.get_rect().width
    screen.blit(share_your_code, (1040 + (480 - share_your_code_width) // 2, 990))


    pygame.display.flip()

    return code

# ◊û◊¶◊ô◊ô◊® ◊ê◊™ ◊õ◊§◊™◊ï◊® ◊îshow menu
def draw_menu_button():
    Font = ffont if langEN else he_font30
    Txt = 'SHOW MENU' if langEN else '◊™◊§◊®◊ô◊ò'[::-1]
    Height_r = 773 if langEN else 760
    Height_1 = 601 if langEN else 588
    show_menu = Font.render(Txt, True, white)
    show_menu_width = show_menu.get_rect().width
    if mode != "1v1":
        pygame.draw.rect(screen, red, pygame.Rect(391, 762, 191, 40))
        pygame.draw.rect(screen, black, pygame.Rect(395, 766, 183, 32))
        screen.blit(show_menu, (center_pos(391, 191, show_menu_width), Height_r))
    else:
        pygame.draw.rect(screen, red, pygame.Rect(789, 590, 191, 40))
        pygame.draw.rect(screen, black, pygame.Rect(793, 594, 183, 32))
        screen.blit(show_menu, (center_pos(789, 191, show_menu_width), Height_1))
    pygame.display.flip()

# ◊û◊°◊ö ◊°◊ô◊ï◊ù ◊ú◊û◊ï◊ì ◊î◊®◊ê◊©◊ô
def end_screen(status):
    pygame.draw.rect(screen, black, pygame.Rect(200, 500, 570, 490))
    pygame.draw.rect(screen, gray, pygame.Rect(210, 510, 550, 470))
    pygame.draw.line(screen, red, (705,520), (745,560) ,13)
    pygame.draw.line(screen, red, (745,520), (705,560) ,13)
    if status == 1:
        you_won2 = font.render('BIG W!', True, light_green)
        you_won2_width = you_won2.get_rect().width
        screen.blit(you_won2, ((550 - you_won2_width)//2 + 210,540))

        if langEN:
            you_won3 = you_won_font.render('YOU WON IN ' + str(word_n) + ' TRIES', True, light_green)
            you_won3_width = you_won3.get_rect().width
            screen.blit(you_won3, ((550 - you_won3_width)//2 + 210, 625))
        else:
            you_won3 = he_you_won_font.render(' ◊†◊°◊ô◊ï◊†◊ï◊™!'[::-1] + str(word_n) + '◊†◊ô◊¶◊ó◊™ ◊ë-'[::-1], True, light_green)
            you_won3_width = you_won3.get_rect().width
            screen.blit(you_won3, ((550 - you_won3_width) // 2 + 210, 600))

    if status == 2:
        you_won2 = font.render('BIG L!', True, red)
        you_won2_width = you_won2.get_rect().width
        screen.blit(you_won2, ((550 - you_won2_width)//2 + 210,540))

        if langEN:
            you_won3 = you_won_font.render('THE WORD WAS ' + target, True, red)
            you_won3_width = you_won3.get_rect().width
            screen.blit(you_won3, ((550 - you_won3_width) // 2 + 210, 625))
        else:
            you_won3 = he_you_won_font.render('!'+target[::-1] + '◊î◊û◊ô◊ú◊î ◊î◊ô◊ô◊™◊î '[::-1], True, red)
            you_won3_width = you_won3.get_rect().width
            screen.blit(you_won3, ((550 - you_won3_width) // 2 + 210, 605))

    pygame.draw.rect(screen, share_color, pygame.Rect(300, 750, 370, 50))
    pygame.draw.rect(screen, black, pygame.Rect(303, 753, 364, 44))
    share = fffont.render("SHARE YOUR SCORE!", True, share_color) if langEN else he_font45.render("◊©◊™◊§◊ï ◊ê◊™ ◊î◊™◊ï◊¶◊ê◊î!"[::-1], True, share_color)
    share_width = share.get_rect().width
    screen.blit(share, ((550 - share_width)//2 + 210, 763 if langEN else 742))

    pygame.draw.rect(screen, gray_retro, pygame.Rect(410, 680, 150, 50))
    pygame.draw.rect(screen, black, pygame.Rect(413, 683, 144, 44))
    retro_text = fffont.render("RETRO!", True, gray_retro) if langEN else he_font45.render("◊®◊ò◊®◊ï!"[::-1], True, gray_retro)
    retro_text_width = retro_text.get_rect().width
    screen.blit(retro_text, ((550 - retro_text_width) // 2 + 210, 693 if langEN else 672))

    play_unlimited = credit_font.render("PLAY UNLIMITEDLY", True, white) if langEN else he_font30.render("◊©◊ó◊ß◊ï ◊ú◊ú◊ê ◊î◊í◊ë◊ú◊î!"[::-1], True, white)
    play_unlimited_width = play_unlimited.get_rect().width
    screen.blit(play_unlimited, ((550 - play_unlimited_width)//2 + 210, 840 if langEN else 830))

    pygame.draw.rect(screen, orange, pygame.Rect(250, 878, 233, 37))
    pygame.draw.rect(screen, black, pygame.Rect(253, 881, 227, 31))
    regular_mode = credit_font.render("REGULAR MODE", True, orange) if langEN else he_font30.render("◊û◊©◊ó◊ß ◊®◊í◊ô◊ú!"[::-1], True, orange)
    screen.blit(regular_mode, (center_pos(250, 233, regular_mode.get_rect().width), 885 if langEN else 875))

    pygame.draw.rect(screen, light_pink, pygame.Rect(543, 878, 180, 37))
    pygame.draw.rect(screen, black, pygame.Rect(546, 881, 174, 31))
    hard_mode = credit_font.render("HARD MODE", True, light_pink) if langEN else he_font30.render("◊û◊©◊ó◊ß ◊ß◊©◊î!"[::-1], True, light_pink)
    screen.blit(hard_mode, (center_pos(543, 180, hard_mode.get_rect().width), 885 if langEN else 875))

    pygame.draw.rect(screen, light_yellow, pygame.Rect(271, 928, 190, 37))
    pygame.draw.rect(screen, black, pygame.Rect(274, 931, 184, 31))
    speed_mode = credit_font.render("SPEED MODE", True, light_yellow) if langEN else he_font30.render("◊û◊©◊ó◊ß ◊û◊î◊ô◊®!"[::-1], True, light_yellow)
    screen.blit(speed_mode, (center_pos(271, 190, speed_mode.get_rect().width), 935 if langEN else 925))

    pygame.draw.rect(screen, light_blue, pygame.Rect(560, 928, 145, 37))
    pygame.draw.rect(screen, black, pygame.Rect(563, 931, 139, 31))
    v1_mode = credit_font.render("1v1 MODE", True, light_blue) if langEN else he_font30.render("1 ◊†◊í◊ì 1!"[::-1], True, light_blue)
    screen.blit(v1_mode, (center_pos(560, 145, v1_mode.get_rect().width), 935 if langEN else 925))
    """
    see = fffont.render("CLICK TO SEE WHO'S THE BEST!", True, turquoise)
    screen.blit(see, (245, 820))
    soon = ffont.render("SOON!", True, white)
    screen.blit(soon, (675,855))
    """
    pygame.display.flip()

# ◊û◊°◊ö ◊°◊ô◊ï◊ù ◊ú◊û◊ï◊ì◊ô◊ù ◊î◊†◊ï◊°◊§◊ô◊ù
def end_screen2(status):
    pygame.draw.rect(screen, black, pygame.Rect(200, 590, 570, 320))
    pygame.draw.rect(screen, gray, pygame.Rect(210, 600, 550, 300))
    pygame.draw.line(screen, red, (705, 610), (745, 650), 13)
    pygame.draw.line(screen, red, (745, 610), (705, 650), 13)
    """
    pygame.draw.line(screen, red, (707, 612), (743, 648), 5)
    pygame.draw.line(screen, red, (743, 612), (707, 648), 5)
    """
    if status == 1:
        if langEN:
            you_won3 = you_won_font.render('YOU WON IN ' + str(word_n) + ' TRIES', True, light_green)
            you_won3_width = you_won3.get_rect().width
            screen.blit(you_won3, ((550 - you_won3_width)//2 + 210, 840))
        else:
            you_won3 = he_you_won_font.render(' ◊†◊°◊ô◊ï◊†◊ï◊™!'[::-1] + str(word_n) + '◊†◊ô◊¶◊ó◊™ ◊ë-'[::-1], True, light_green)
            you_won3_width = you_won3.get_rect().width
            screen.blit(you_won3, ((550 - you_won3_width) // 2 + 210, 810))
    if status == 2:
        if langEN:
            you_won3 = you_won_font.render('THE WORD WAS ' + target, True, red)
            you_won3_width = you_won3.get_rect().width
            screen.blit(you_won3, ((550 - you_won3_width) // 2 + 210, 840))
        else:
            you_won3 = he_you_won_font.render('!'+target[::-1] + '◊î◊û◊ô◊ú◊î ◊î◊ô◊ô◊™◊î '[::-1], True, red)
            you_won3_width = you_won3.get_rect().width
            screen.blit(you_won3, ((550 - you_won3_width) // 2 + 210, 810))

    pygame.draw.rect(screen, dark_yellow, pygame.Rect(322, 715, 326, 80))
    pygame.draw.rect(screen, gray, pygame.Rect(329, 722, 312, 66))
    if langEN:
        continue_button = keyboard_font.render('CONTINUE!', True, dark_yellow)
        continue_width = continue_button.get_rect().width
        screen.blit(continue_button, ((550 - continue_width) // 2 + 210, 735))
    else:
        continue_button = he_you_won_font.render('◊©◊ó◊ß ◊©◊ï◊ë!'[::-1], True, dark_yellow)
        continue_width = continue_button.get_rect().width
        screen.blit(continue_button, ((550 - continue_width) // 2 + 210, 710))

    if langEN:
        main_page = you_won_font.render('MAIN PAGE', True, gray)
        main_page_width = main_page.get_rect().width
        pygame.draw.rect(screen, main_bg_color, pygame.Rect((550 - main_page_width) // 2 + 200, 633, main_page_width + 20, 48))
        screen.blit(main_page, ((550 - main_page_width) // 2 + 210, 640))
    else:
        main_page = he_font45.render('◊ú◊¢◊û◊ï◊ì ◊î◊®◊ê◊©◊ô'[::-1], True, gray)
        main_page_width = main_page.get_rect().width
        pygame.draw.rect(screen, main_bg_color, pygame.Rect((550 - main_page_width) // 2 + 200, 633, main_page_width + 20, 48))
        screen.blit(main_page, ((550 - main_page_width) // 2 + 210, 623))
    pygame.display.flip()

# ◊û◊°◊ö ◊°◊ô◊ï◊ù ◊ú1v1
def end_screen_1v1(status):
    pygame.draw.rect(screen, black, pygame.Rect(600, 400, 570, 320))
    pygame.draw.rect(screen, share_color, pygame.Rect(610, 410, 550, 300))
    pygame.draw.rect(screen, black, pygame.Rect(620, 420, 530, 280))
    pygame.draw.line(screen, red, (1095, 425), (1135, 465), 13)
    pygame.draw.line(screen, red, (1135, 425), (1095, 465), 13)
    if langEN:
        if status == 1:
            if len_colors != 6:
                you_won3 = you_won_font.render('YOU WON IN ' + str(word_n) + ' TRIES', True, light_green)
                you_won3_width = you_won3.get_rect().width
                screen.blit(you_won3, ((570 - you_won3_width)//2 + 600, 650))
            else:
                you_won3 = you_won_font.render('THE WORD WAS ' + target, True, light_green)
                you_won3_width = you_won3.get_rect().width
                screen.blit(you_won3, ((570 - you_won3_width) // 2 + 600, 650))
        if status == 2:
            you_won3 = you_won_font.render('THE WORD WAS ' + target, True, red)
            you_won3_width = you_won3.get_rect().width
            screen.blit(you_won3, ((570 - you_won3_width) // 2 + 600, 650))
    else:
        if status == 1:
            if len_colors != 6:
                you_won3 = he_you_won_font.render(' ◊†◊°◊ô◊ï◊†◊ï◊™!'[::-1] + str(word_n) + '◊†◊ô◊¶◊ó◊™ ◊ë-'[::-1], True, light_green)
                you_won3_width = you_won3.get_rect().width
                screen.blit(you_won3, ((570 - you_won3_width) // 2 + 600, 620))
            else:
                you_won3 = he_you_won_font.render('!' + target[::-1] + '◊î◊û◊ô◊ú◊î ◊î◊ô◊ô◊™◊î '[::-1], True, red)
                you_won3_width = you_won3.get_rect().width
                screen.blit(you_won3, ((570 - you_won3_width) // 2 + 600, 620))
        if status == 2:
            you_won3 = he_you_won_font.render('!' + target[::-1] + '◊î◊û◊ô◊ú◊î ◊î◊ô◊ô◊™◊î '[::-1], True, red)
            you_won3_width = you_won3.get_rect().width
            screen.blit(you_won3, ((570 - you_won3_width) // 2 + 600, 620))

    pygame.draw.rect(screen, dark_yellow, pygame.Rect((570-326)//2 + 600, 525, 326, 80))
    pygame.draw.rect(screen, black, pygame.Rect((570-326)//2 + 607, 532, 312, 66))
    if langEN:
        continue_button = keyboard_font.render('CONTINUE!', True, dark_yellow)
        continue_width = continue_button.get_rect().width
        screen.blit(continue_button, ((570 - continue_width) // 2 + 600, 545))
    else:
        continue_button = he_you_won_font.render('◊©◊ó◊ß ◊©◊ï◊ë!'[::-1], True, dark_yellow)
        continue_width = continue_button.get_rect().width
        screen.blit(continue_button, ((570 - continue_width) // 2 + 600, 520))

    if langEN:
        main_page = you_won_font.render('MAIN PAGE', True, black)
        main_page_width = main_page.get_rect().width
        pygame.draw.rect(screen, main_bg_color, pygame.Rect((570 - main_page_width) // 2 + 592, 450, main_page_width + 20, 48))
        screen.blit(main_page, ((570 - main_page_width) // 2 + 600, 457))
    else:
        main_page = he_font45.render('◊ú◊¢◊û◊ï◊ì ◊î◊®◊ê◊©◊ô'[::-1], True, black)
        main_page_width = main_page.get_rect().width
        pygame.draw.rect(screen, main_bg_color, pygame.Rect((570 - main_page_width) // 2 + 592, 450, main_page_width + 20, 48))
        screen.blit(main_page, ((570 - main_page_width) // 2 + 600, 440))

    pygame.display.flip()

# ◊û◊¶◊ô◊ô◊® ◊ê◊™ ◊î◊û◊°◊ö ◊©◊û◊ó◊õ◊î ◊ú◊ô◊®◊ô◊ë
def waiting_screen():
    pygame.draw.rect(screen, black, pygame.Rect(600, 400, 570, 320))
    pygame.draw.rect(screen, red, pygame.Rect(610, 410, 550, 300))
    pygame.draw.rect(screen, black, pygame.Rect(620, 420, 530, 280))
    pygame.draw.line(screen, red, (1095, 425), (1135, 465), 13)
    pygame.draw.line(screen, red, (1135, 425), (1095, 465), 13)

    if langEN:
        waiting_for = keyboard_font.render('WAITING FOR', True, red)
        waiting_for_width = waiting_for.get_rect().width
        screen.blit(waiting_for, ((570 - waiting_for_width) // 2 + 600, 465))

        the_opponent = keyboard_font.render('THE OPPONENT', True, red)
        the_opponent_width = the_opponent.get_rect().width
        screen.blit(the_opponent, ((570 - the_opponent_width) // 2 + 600, 540))

        to_continue = keyboard_font.render('TO CONTINUE', True, red)
        to_continue_width = to_continue.get_rect().width
        screen.blit(to_continue, ((570 - to_continue_width) // 2 + 600, 615))
    else:
        waiting_for = he_font110.render('◊û◊ó◊õ◊î'[::-1], True, red)
        waiting_for_width = waiting_for.get_rect().width
        screen.blit(waiting_for, ((570 - waiting_for_width) // 2 + 600, 420))

        the_opponent = he_font110.render('◊ú◊ô◊®◊ô◊ë...'[::-1], True, red)
        the_opponent_width = the_opponent.get_rect().width
        screen.blit(the_opponent, ((570 - the_opponent_width) // 2 + 600, 530))

    pygame.display.flip()

# ◊ë◊ï◊ì◊ß◊™ ◊ê◊ù ◊î◊û◊ô◊ú◊î ◊ê◊û◊ô◊™◊ô◊™
def is_real(word):
    if word == word_list[0]:
        return True
    if word < word_list[0] or word > word_list[-1]:
        return False
    if binary_search(1, len(word_list), word) == 1:
        return True
    return False

# ◊û◊ß◊ë◊ú◊™ ◊ô◊ï◊ñ◊® ◊ï◊û◊ó◊ñ◊ô◊®◊î ◊ê◊™ ◊î◊©◊ù ◊©◊ú◊ï ◊ëAD
def find_user(user2):
    if user2 == 's9077186':
        return '◊ê◊û◊ô◊® ◊ú◊ô◊ë◊®◊û◊ü'
    try:
        user = aduser.ADUser.from_cn(user2)
        # user = adobject.ADObject.from_filter("(&(objectClass=user)(cn="+user2+"))")[0]
    except:
        pass
    try:
        first_name = user.get_attribute("givenname")[0]
    except:
        first_name = ""
    try:
        last_name = user.get_attribute("sn")[0]
    except:
        last_name = ""
        pass

    full_name = first_name + " " + last_name if first_name != "" and ord(first_name[0]) >= 1488 and ord(first_name[0]) <= 1514 else first_name

    if full_name == "":
        if user2[0] == 's' and find_user('m'+user2[1:]) != "":
            full_name = find_user('m' + user2[1:])
        else:
            full_name = user2

    return full_name

# ◊ó◊ô◊§◊ï◊© ◊ë◊ô◊†◊ê◊®◊ô, ◊û◊ê◊û◊™ ◊ê◊ù ◊î◊û◊ô◊ú◊î ◊ß◊ô◊ô◊û◊™ ◊ê◊ï ◊ú◊ê
def binary_search(low, high, x):
    # Check base case
    if high >= low:

        mid = (high + low) // 2

        # If element is present at the middle itself
        if word_list[mid] == x:
            return 1

        # If element is smaller than mid, then it can only
        # be present in left subarray
        elif word_list[mid] > x:
            return binary_search(low, mid - 1, x)

        # Else the element can only be present in right subarray
        else:
            return binary_search(mid + 1, high, x)

    else:
        # Element is not present in the array
        return 0

# ◊û◊ß◊ë◊ú◊™ ◊ê◊ï◊™ ◊ï◊û◊ó◊ñ◊ô◊®◊î ◊û◊¢◊®◊ö ◊©◊ú ◊î◊û◊ô◊ß◊ï◊û◊ô◊ù ◊©◊ú ◊î◊ê◊ï◊™ ◊ë◊û◊ô◊ú◊î
def search(letter, word):
    a = []
    for i in range(5):
        if letter == word[i] or not langEN and hebrew_letter_extension(letter) == word[i]:
            a.append(i)
    return a

# ◊û◊ß◊ë◊ú◊™ ◊ê◊ï◊™ ◊ï◊û◊ó◊ñ◊ô◊®◊î ◊ê◊™ ◊î◊ê◊ï◊™ ◊î◊î◊ï◊§◊õ◊ô◊™, ◊ê◊ó◊®◊™ None
def hebrew_letter_extension(letter):
    for index, item in enumerate(regular_letters):
        if item == letter:
            return ending_letters[index]
    for index, item in enumerate(ending_letters):
        if item == letter:
            return regular_letters[index]
    return None

# ◊û◊¶◊ô◊ô◊® ◊ê◊™ ◊î◊¶◊ë◊ô◊¢◊î ◊©◊ú ◊†◊ô◊ó◊ï◊©◊ô ◊î◊ô◊®◊ô◊ë
def draw_opponent_last_word(colors2):
    word_number = len(colors2) - 1
    last_word = colors2[-1]
    if langEN:
        for j in range(5):
            pygame.draw.rect(screen, background_color, pygame.Rect(1050 + j * (sqare_size + 15), 165 + word_number * (sqare_size + 20), sqare_size + 10,sqare_size + 10))
            pygame.draw.rect(screen, last_word[j], pygame.Rect(1055 + j * (sqare_size + 15), 170 + word_number * (sqare_size + 20), sqare_size, sqare_size))
            time.sleep(time_delay)
            pygame.display.flip()
    else:
        for j in range(5):
            pygame.draw.rect(screen, background_color, pygame.Rect(1050 + (4 - j) * (sqare_size + 15), 165 + word_number * (sqare_size + 20), sqare_size + 10,sqare_size + 10))
            pygame.draw.rect(screen, last_word[j], pygame.Rect(1055 + (4 - j) * (sqare_size + 15), 170 + word_number * (sqare_size + 20), sqare_size, sqare_size))
            time.sleep(time_delay)
            pygame.display.flip()

# ◊û◊¶◊ô◊ô◊® ◊ê◊™ ◊î◊†◊ô◊ó◊ï◊©◊ô◊ù ◊©◊ú ◊î◊ô◊®◊ô◊ë ◊ú◊ê◊ó◊® ◊™◊ï◊¶◊ê◊î
def draw_opponent_guesses(guesses2, colors2, delay = 0):
    for i in range(len(guesses2)):
        for j in range(5):
            draw_opponent_letter(guesses2[i][j], i, j, colors2[i][j], white)
            time.sleep(delay)

# ◊ë◊©◊ô◊û◊ï◊© ◊®◊ß ◊ëdraw_boar
def draw_opponent_word(colors2):
    if langEN:
        for i in range(len(colors2)):
            for j in range(5):
                pygame.draw.rect(screen, background_color,pygame.Rect(1050 + j * (sqare_size + 15), 165 + i * (sqare_size + 20), sqare_size + 10,sqare_size + 10))
                pygame.draw.rect(screen, colors2[i][j], pygame.Rect(1055 + j * (sqare_size + 15), 170 + i * (sqare_size + 20), sqare_size, sqare_size))
    else:
        for i in range(len(colors2)):
            for j in range(4,-1,-1):
                pygame.draw.rect(screen, background_color,pygame.Rect(1050 + j * (sqare_size + 15), 165 + i * (sqare_size + 20), sqare_size + 10,sqare_size + 10))
                pygame.draw.rect(screen, colors2[i][j], pygame.Rect(1055 + j * (sqare_size + 15), 170 + i * (sqare_size + 20), sqare_size, sqare_size))
    pygame.display.flip()

# ◊ú◊ê ◊ë◊©◊ô◊û◊ï◊©
def color_keyboard(color, letter):
    for i in range(10):
        if letter == letter_list1[i]:
            pygame.draw.rect(screen, black, pygame.Rect(134 + i * 74, 813, key_size + 10, key_size + 10))
            pygame.draw.rect(screen, color, pygame.Rect(139 + i * 74, 818, key_size, key_size))
            le = keyboard_font.render(letter, True, black)
            le_width = le.get_rect().width
            screen.blit(le, (139 + i * 74 + (key_size - le_width) // 2, 825))
            return None
    for i in range(9):
        if letter == letter_list2[i]:
            pygame.draw.rect(screen, black, pygame.Rect(170 + i * 74, 886, key_size + 10, key_size + 10))
            pygame.draw.rect(screen, color, pygame.Rect(175 + i * 74, 891, key_size, key_size))
            le = keyboard_font.render(letter, True, black)
            le_width = le.get_rect().width
            screen.blit(le, (175 + i * 74 + (key_size - le_width) // 2, 898))
            return None
    for i in range(7):
        if letter == letter_list3[i]:
            pygame.draw.rect(screen, black, pygame.Rect(244 + i * 74, 959, key_size + 10, key_size + 10))
            pygame.draw.rect(screen, color, pygame.Rect(249 + i * 74, 964, key_size, key_size))
            le = keyboard_font.render(letter, True, black)
            le_width = le.get_rect().width
            screen.blit(le, (249 + i * 74 + (key_size - le_width) // 2, 971))
            return None

# ◊§◊ï◊†◊ß◊¶◊ô◊î ◊ó◊©◊ï◊ë◊î! ◊û◊ß◊ë◊ú◊™ ◊†◊ô◊ó◊ï◊© ◊ï◊û◊ô◊ú◊™ ◊ô◊¢◊ì ◊ï◊û◊ó◊ñ◊ô◊®◊î ◊û◊¢◊®◊ö ◊©◊ú ◊î◊¶◊ë◊ô◊¢◊î ◊©◊ú ◊î◊ê◊ï◊™◊ô◊ï◊™
def compare(curr, aim):
    colors = [gray for i in range(5)]
    used = []
    for i in range(5):
        if curr[i] == aim[i]:
            colors[i] = green
            used.append(i)
    for i in range(5):
        ext = None
        if not langEN:
            ext = hebrew_letter_extension(curr[i])
        if curr[i] in aim and curr[i] != aim[i] or ext != None and ext in aim and ext != aim[i]:
            places = search(curr[i], aim)
            for item in places:
                if item not in used and colors[i] != green:
                    colors[i] = yellow
                    used.append(item)
    return colors

# ◊û◊¶◊ô◊ô◊® ◊ê◊™ ◊ê◊ï◊™◊ô◊ï◊™ ◊î◊ô◊®◊ô◊ë ◊ë1v1
def draw_opponent_letter(letter, word_num, letter_num, bg_color, color):
    if langEN:
        pygame.draw.rect(screen, background_color,pygame.Rect(1050 + letter_num * (sqare_size + 15), 165 + word_num * (sqare_size + 20), sqare_size + 10,sqare_size + 10))
        pygame.draw.rect(screen, bg_color, pygame.Rect(1055 + letter_num * (sqare_size + 15), 170 + word_num * (sqare_size + 20), sqare_size, sqare_size))
        text = font.render(letter, True, color)
        letter_width = text.get_rect().width
        letter_height = text.get_rect().height - 10
        screen.blit(text, (1055 + letter_num * (sqare_size + 15) + (sqare_size - letter_width) // 2, 170 + word_num * (sqare_size + 20) + (sqare_size - letter_height) // 2))
    else:
        pygame.draw.rect(screen, background_color, pygame.Rect(1050 + (4 - letter_num) * (sqare_size + 15), 165 + word_num * (sqare_size + 20), sqare_size + 10, sqare_size + 10))
        pygame.draw.rect(screen, bg_color, pygame.Rect(1055 + (4 - letter_num) * (sqare_size + 15), 170 + word_num * (sqare_size + 20), sqare_size, sqare_size))
        text = he_font.render(letter, True, color)
        letter_width = text.get_rect().width
        letter_height = text.get_rect().height + 20
        screen.blit(text, (1055 + (4 - letter_num) * (sqare_size + 15) + (sqare_size - letter_width) // 2, 170 + word_num * (sqare_size + 20) + (sqare_size - letter_height) // 2))
    pygame.display.flip()

# ◊§◊ï◊†◊ß◊¶◊ô◊î ◊ó◊©◊ï◊ë◊î! ◊û◊¶◊ô◊ô◊®◊™ ◊ê◊ï◊™ ◊ë◊î◊ô◊†◊™◊ü ◊ê◊ï◊™, ◊û◊ô◊ß◊ï◊ù (◊ë◊©◊ï◊®◊î ◊ï◊ë◊ò◊ï◊®) ◊¶◊ë◊¢ ◊®◊ß◊¢ ◊ï◊¶◊ë◊¢ ◊ê◊ï◊™
def draw_letter(letter, word_num, letter_num, bg_color, color):
    if langEN:
        pygame.draw.rect(screen, background_color,pygame.Rect(250 + letter_num * (sqare_size + 15), 165 + word_num * (sqare_size + 20), sqare_size + 10,sqare_size + 10))

        pygame.draw.rect(screen, bg_color, pygame.Rect(255 + letter_num * (sqare_size + 15), 170 + word_num * (sqare_size + 20), sqare_size, sqare_size))
        text = font.render(letter, True, color)
        letter_width = text.get_rect().width
        letter_height = text.get_rect().height - 10
        screen.blit(text, (255 + letter_num * (sqare_size + 15) + (sqare_size - letter_width) // 2, 170 + word_num * (sqare_size + 20) + (sqare_size - letter_height) // 2))
    else:
        pygame.draw.rect(screen, background_color,pygame.Rect(250 + (4 - letter_num) * (sqare_size + 15), 165 + word_num * (sqare_size + 20), sqare_size + 10,sqare_size + 10))
        pygame.draw.rect(screen, bg_color, pygame.Rect(255 + (4 - letter_num) * (sqare_size + 15), 170 + word_num * (sqare_size + 20), sqare_size, sqare_size))
        text = he_font.render(letter, True, color)
        letter_width = text.get_rect().width
        letter_height = text.get_rect().height + 20
        screen.blit(text, (255 + (4 - letter_num) * (sqare_size + 15) + (sqare_size - letter_width) // 2, 170 + word_num * (sqare_size + 20) + (sqare_size - letter_height) // 2))
    pygame.display.flip()

# ◊û◊¶◊ô◊ô◊® ◊ê◊™ ◊ú◊ï◊ó ◊î◊™◊ï◊¶◊ê◊ï◊™ ◊ë1v1
def scoreboard(wins, losses):
    pygame.draw.rect(screen, black, pygame.Rect(760, 150, 250, 135), 10)
    scoreboard_text = scoreboard_font.render('◊ú◊ï◊ó ◊™◊ï◊¶◊ê◊ï◊™!'[::-1], True, black)
    scoreboard_text_width = scoreboard_text.get_rect().width
    screen.blit(scoreboard_text, (720 + (330 - scoreboard_text_width) // 2, 155))

    score_text = score_font.render(f'{wins} - {losses}', True, black)
    score_text_width = score_text.get_rect().width
    screen.blit(score_text, (720 + (330 - score_text_width) // 2, 190))

    pygame.display.flip()

# ◊û◊ß◊ë◊ú◊™ ◊ê◊ï◊™ ◊ï◊û◊ó◊ñ◊ô◊®◊î ◊û◊¢◊®◊ö ◊©◊ú ◊î◊ê◊ï◊™◊ô◊ï◊™ ◊ú◊¶◊ë◊ô◊¢◊î (◊®◊ú◊ï◊ï◊†◊ò◊ô ◊ú◊ê◊ï◊™◊ô◊ï◊™ ◊°◊ï◊§◊ô◊ï◊™)
def letters_to_append(letter):
    letters = []
    if langEN:
        letters.append(letter)
        return letters
    for j in range(5):
        if letter == regular_letters[j] or letter == ending_letters[j]:
            letters.append(regular_letters[j])
            letters.append(ending_letters[j])
            return letters
    letters.append(letter)
    return letters

# ◊û◊¶◊ô◊ô◊® ◊ê◊™ ◊î◊û◊ß◊ú◊ì◊™ ◊û◊ó◊ì◊© ◊ê◊ó◊®◊ô ◊õ◊ú ◊†◊ô◊ó◊ï◊©
def draw_keyboard(gray_places, yellow_places, green_places):
    if langEN:
        for i in range(10):
            if letter_list1[i] in gray_places:
                color = gray
            elif letter_list1[i] in yellow_places:
                color = yellow
            elif letter_list1[i] in green_places:
                color = green
            else:
                color = white
            pygame.draw.rect(screen, black, pygame.Rect(134 + i * 74, 813, key_size + 10, key_size + 10))
            pygame.draw.rect(screen, color, pygame.Rect(139 + i * 74, 818, key_size, key_size))
            l = keyboard_font.render(letter_list1[i], True, black)
            l_width = l.get_rect().width
            screen.blit(l, (139 + i * 74 + (key_size - l_width) // 2, 825))
        for i in range(9):
            if letter_list2[i] in gray_places:
                color = gray
            elif letter_list2[i] in yellow_places:
                color = yellow
            elif letter_list2[i] in green_places:
                color = green
            else:
                color = white
            pygame.draw.rect(screen, black, pygame.Rect(170 + i * 74, 886, key_size + 10, key_size + 10))
            pygame.draw.rect(screen, color, pygame.Rect(175 + i * 74, 891, key_size, key_size))
            l = keyboard_font.render(letter_list2[i], True, black)
            l_width = l.get_rect().width
            screen.blit(l, (175 + i * 74 + (key_size - l_width) // 2, 898))
        for i in range(7):
            if letter_list3[i] in gray_places:
                color = gray
            elif letter_list3[i] in yellow_places:
                color = yellow
            elif letter_list3[i] in green_places:
                color = green
            else:
                color = white
            pygame.draw.rect(screen, black, pygame.Rect(244 + i * 74, 959, key_size + 10, key_size + 10))
            pygame.draw.rect(screen, color, pygame.Rect(249 + i * 74, 964, key_size, key_size))
            le = keyboard_font.render(letter_list3[i], True, black)
            le_width = le.get_rect().width
            screen.blit(le, (249 + i * 74 + (key_size - le_width) // 2, 971))
    else:
        for i in range(8):
            if letter_list1[i] in gray_places:
                color = gray
            elif letter_list1[i] in yellow_places:
                color = yellow
            elif letter_list1[i] in green_places:
                color = green
            else:
                color = white
            pygame.draw.rect(screen, black, pygame.Rect(194 + i * 74, 813, key_size + 10, key_size + 10))
            pygame.draw.rect(screen, color, pygame.Rect(199 + i * 74, 818, key_size, key_size))
            l = he_keyboard_font.render(letter_list1[i], True, black)
            l_width = l.get_rect().width
            screen.blit(l, (199 + i * 74 + (key_size - l_width) // 2, 809))
        for i in range(10):
            if letter_list2[i] in gray_places:
                color = gray
            elif letter_list2[i] in yellow_places:
                color = yellow
            elif letter_list2[i] in green_places:
                color = green
            else:
                color = white
            pygame.draw.rect(screen, black, pygame.Rect(120 + i * 74, 886, key_size + 10, key_size + 10))
            pygame.draw.rect(screen, color, pygame.Rect(125 + i * 74, 891, key_size, key_size))
            l = he_keyboard_font.render(letter_list2[i], True, black)
            l_width = l.get_rect().width
            screen.blit(l, (125 + i * 74 + (key_size - l_width) // 2, 882))
        for i in range(9):
            if letter_list3[i] in gray_places:
                color = gray
            elif letter_list3[i] in yellow_places:
                color = yellow
            elif letter_list3[i] in green_places:
                color = green
            else:
                color = white
            pygame.draw.rect(screen, black, pygame.Rect(157 + i * 74, 959, key_size + 10, key_size + 10))
            pygame.draw.rect(screen, color, pygame.Rect(162 + i * 74, 964, key_size, key_size))
            le = he_keyboard_font.render(letter_list3[i], True, black)
            le_width = le.get_rect().width
            screen.blit(le, (162 + i * 74 + (key_size - le_width) // 2, 955))

def draw_credits():
    pygame.draw.rect(screen, red, pygame.Rect(10, 10, 150, 40))
    pygame.draw.rect(screen, black, pygame.Rect(13, 13, 144, 34))
    if langEN:
        credit = credit_font.render('CREDITS', True, white)
        screen.blit(credit, (26, 19))
    else:
        credit = he_font30.render('◊™◊ï◊ì◊ï◊™!'[::-1], True, white)
        screen.blit(credit, (center_pos(10, 150, credit.get_rect().width), 8))

def draw_profile_button():
    pygame.draw.rect(screen, purple2, pygame.Rect(10, 225, 150, 40))
    pygame.draw.rect(screen, black, pygame.Rect(13, 228, 144, 34))
    if langEN:
        credit = credit_font.render('PROFILE', True, white)
        screen.blit(credit, (center_pos(10, 150, credit.get_rect().width), 234))
    else:
        credit = he_font30.render('◊§◊®◊ï◊§◊ô◊ú!'[::-1], True, white)
        screen.blit(credit, (center_pos(10, 150, credit.get_rect().width), 223))

def draw_leaderboard_button():
    pygame.draw.rect(screen, light_orange, pygame.Rect(10, 280, 150, 40))
    pygame.draw.rect(screen, black, pygame.Rect(13, 283, 144, 34))
    if langEN:
        credit = font14.render('LEADERBOARD', True, white)
        screen.blit(credit, (center_pos(10, 150, credit.get_rect().width), 292))
    else:
        credit = he_font25.render('◊ò◊ë◊ú◊™ ◊©◊ô◊ê◊ô◊ù!'[::-1], True, white)
        screen.blit(credit, (center_pos(10, 150, credit.get_rect().width), 282))

def draw_leaderboard():
    leaderboard_color = None
    leaderboard_color2 = None
    filt = None
    if leaderboard_mode == 0:
        leaderboard_color = light_orange
        leaderboard_color2 = light_orange2
        arrow_left = pygame.image.load('images\\left_orange.png')
        arrow_right = pygame.image.load('images\\right_orange.png')
        arrow_up = pygame.image.load('images\\up_orange.png')
        arrow_down = pygame.image.load('images\\down_orange.png')
        filt = {'type': 'overall'}
    elif leaderboard_mode == 1:
        leaderboard_color = light_red
        leaderboard_color2 = light_red2
        filt = {'type': 'plays_count'}
        arrow_left = pygame.image.load('images\\left_red.png')
        arrow_right = pygame.image.load('images\\right_red.png')
        arrow_up = pygame.image.load('images\\up_red.png')
        arrow_down = pygame.image.load('images\\down_red.png')
    elif leaderboard_mode == 2:
        leaderboard_color = light_blue2
        leaderboard_color2 = light_blue3
        filt = {'type': 'wins_count'}
        arrow_left = pygame.image.load('images\\left_blue.png')
        arrow_right = pygame.image.load('images\\right_blue.png')
        arrow_up = pygame.image.load('images\\up_blue.png')
        arrow_down = pygame.image.load('images\\down_blue.png')
    elif leaderboard_mode == 3:
        leaderboard_color = l_pink
        leaderboard_color2 = l_pink2
        filt = {'type': 'avg'}
        arrow_left = pygame.image.load('images\\left_pink.png')
        arrow_right = pygame.image.load('images\\right_pink.png')
        arrow_up = pygame.image.load('images\\up_pink.png')
        arrow_down = pygame.image.load('images\\down_pink.png')
    elif leaderboard_mode == 4:
        leaderboard_color = l_green
        leaderboard_color2 = l_green2
        arrow_left = pygame.image.load('images\\left_green.png')
        arrow_right = pygame.image.load('images\\right_green.png')
        arrow_up = pygame.image.load('images\\up_green.png')
        arrow_down = pygame.image.load('images\\down_green.png')
        filt = {'type': 'winnings'}

    # pygame.draw.rect(screen, leaderboard_color, pygame.Rect(250, 165, 470, 590))
    # pygame.draw.rect(screen, black, pygame.Rect(255, 170, 460, 580))
    pygame.draw.rect(screen, black, pygame.Rect(250, 165, 470, 590))
    pygame.draw.rect(screen, leaderboard_color, pygame.Rect(255, 170, 460, 580))
    pygame.draw.rect(screen, gray, pygame.Rect(260, 175, 450, 570))
    pygame.draw.line(screen, red, (658, 182), (698, 222), 13)
    pygame.draw.line(screen, red, (698, 182), (658, 222), 13)

    screen.blit(arrow_left, (320, 205))
    screen.blit(arrow_right, (568, 205))
    screen.blit(arrow_up, (650, 370))
    screen.blit(arrow_down, (650, 490))

    draw_leaderboard_mode(leaderboard_mode, leaderboard_color)
    col = db["leaderboard"]
    cursor = col.find(filt)
    for doc in cursor:
        overall_dict = doc
        players = list(overall_dict)[:-1]
        scores = list(overall_dict.values())[:-1]
        for i in range(leaderboard_page * 9 + 1, leaderboard_page * 9 + 10):
            if i < len(players):
                draw_player_on_leaderboard(players[i], scores[i], i, leaderboard_color, leaderboard_color2)

    pygame.display.flip()
    return players

def draw_leaderboard_mode(mode_num, leaderboard_color):
    if mode_num == 0:
        txt = he_font55.render('◊õ◊ú◊ú◊ô'[::-1], True, leaderboard_color)
        screen.blit(txt, (center_pos(250, 470, txt.get_rect().width), 185))
    elif mode_num == 1:
        txt = he_font45.render('◊û◊©◊ó◊ß◊ô◊ù'[::-1], True, leaderboard_color)
        screen.blit(txt, (center_pos(250, 470, txt.get_rect().width), 195))
    elif mode_num == 2:
        txt = he_font45.render('◊†◊¶◊ó◊ï◊†◊ï◊™'[::-1], True, leaderboard_color)
        screen.blit(txt, (center_pos(250, 470, txt.get_rect().width), 195))
    elif mode_num == 3:
        txt = he_font45.render('◊û◊û◊ï◊¶◊¢'[::-1], True, leaderboard_color)
        txt2 = he_font45.render('◊†◊ô◊ó◊ï◊©◊ô◊ù'[::-1], True, leaderboard_color)
        screen.blit(txt, (center_pos(250, 470, txt.get_rect().width), 175))
        screen.blit(txt2, (center_pos(250, 470, txt2.get_rect().width), 215))
    elif mode_num == 4:
        txt = he_font45.render('◊î◊ê◊ú◊ï◊£'[::-1], True, leaderboard_color)
        txt2 = he_font45.render('◊î◊ô◊ï◊û◊ô'[::-1], True, leaderboard_color)
        screen.blit(txt, (center_pos(250, 470, txt.get_rect().width), 175))
        screen.blit(txt2, (center_pos(250, 470, txt2.get_rect().width), 215))

def draw_player_on_leaderboard(player, score, position, leaderboard_color, leaderboard_color2):
    up = 0
    if position % 2 == 1:
        color = leaderboard_color
    else:
        color = leaderboard_color2
    if position == 1:
        up = 15
        he_font = he_font40
        font = ffont25
        color = gold
    elif position == 2:
        up = 6
        he_font = he_font35
        font = ffont25
        color = silver
    elif position == 3:
        up = 6
        he_font = he_font35
        font = ffont25
        color = bronze
    else:
        he_font = he_font30
        font = ffont
    if player == username:
        color = green
    place = he_font.render(f'#{position}', True, color)
    screen.blit(place, (590, 240 + (((position-1)%9)+1) * 50 - up))
    name_txt = find_user(player)
    if name_txt != "" and ord(name_txt[0]) >= 1488 and ord(name_txt[0]) <= 1514:
        name = he_font.render(name_txt[::-1], True, color)
        screen.blit(name, (center_pos(400, 150, name.get_rect().width), 240 + (((position-1)%9)+1) * 50 - up))
    else:
        name = font.render(name_txt, True, color)
        screen.blit(name, (center_pos(400, 150, name.get_rect().width), 252 + (((position-1)%9)+1) * 50 - up))
    score_txt = he_font.render(str(round(score, 2)), True, color)
    screen.blit(score_txt, (center_pos(280, 80, score_txt.get_rect().width), 240 + (((position-1)%9)+1) * 50 - up))

# ◊§◊ï◊†◊ß◊¶◊ô◊î ◊û◊®◊õ◊ñ◊ô◊™! ◊û◊¶◊ô◊ô◊®◊™ ◊ê◊™ ◊î◊û◊°◊ö ◊ë◊®◊í◊¢ ◊†◊™◊ï◊ü
def draw_board():
    # BACKGROUND
    screen.blit(bg, (0, 0))

    if mode == "daily":
        switch_lang_button()
        draw_best_score(best_score)
        draw_distribution_button()
        draw_profile_button()
        draw_leaderboard_button()
        draw_days_to_end()


    if mode != "retro":
        # WORDLE TITLE
        screen.blit(title, (225, 30)) if langEN else screen.blit(he_title, (320, -38))
        """screen.blit(nexttitle, (1000, 25))"""
    else:
        retro_color_name()


    # CREDITS
    draw_credits()

    #  I WANNA ENTER TO THE DISTRIBUTION GROUP
    # pygame.draw.rect(screen, black, pygame.Rect(820, 28, 155, 60))
    # pygame.draw.rect(screen, white, pygame.Rect(823, 31, 149, 54))
    # screen.blit(dist, (826, 33))


    #

    # BLACK SQUARES
    for i in range(5):
        for j in range(6):
            if j >= len(guesses):
                pygame.draw.rect(screen, background_color,pygame.Rect(250 + i * (sqare_size + 15), 165 + j * (sqare_size + 20), sqare_size + 10,sqare_size + 10))
                pygame.draw.rect(screen, black, pygame.Rect(255 + i * (sqare_size + 15), 170 + j * (sqare_size + 20), sqare_size,sqare_size))

    # DRAW GUESSED WORDS
    for i in range(len(guesses)):
        for j in range(5):
            draw_letter(guesses[i][j], i, j, colors[i][j], white)

    # DRAW CURRENT WORD

    for i in range(len(curr_word)):
        if len(curr_word) == 5 and not is_real(curr_word):
            draw_letter(curr_word[i], len(guesses), i, black, red)
        else:
            draw_letter(curr_word[i], len(guesses), i, black, white)


    # KEYBOARD
    draw_keyboard(gray_places, yellow_places, green_places)
    if langEN:
        pygame.draw.rect(screen, black, pygame.Rect(134, 959, key_size + 10 + 36, key_size + 10))
        pygame.draw.rect(screen, white, pygame.Rect(139, 964, key_size + 36, key_size))
        pygame.draw.rect(screen, black, pygame.Rect(762, 959, key_size + 10 + 36, key_size + 10))
        pygame.draw.rect(screen, white, pygame.Rect(767, 964, key_size + 36, key_size))
        screen.blit(delete_button, (144, 982))
        screen.blit(enter_button, (777, 982))
    else:
        pygame.draw.rect(screen, black, pygame.Rect(786, 813, key_size + 10 + 36, key_size + 10))
        pygame.draw.rect(screen, white, pygame.Rect(791, 818, key_size + 36, key_size))
        pygame.draw.rect(screen, black, pygame.Rect(823, 959, key_size + 10 + 36, key_size + 10))
        pygame.draw.rect(screen, white, pygame.Rect(828, 964, key_size + 36, key_size))
        screen.blit(he_delete_button, (810, 825))
        screen.blit(he_enter_button, (848, 958))

    if end_screen_on:
        if x_got_clicked:
            draw_menu_button()
        else:
            end_screen(is_won)

    if mode == "daily" and leaderboard_on:
        draw_leaderboard()
    if mode == "retro":
        retro_extension()
    if mode == "1v1" and lobby:
        extension()

    if mode == "1v1" and not lobby:
        draw_name()
        scoreboard(my_wins, opponent_wins)
        try:
            if not won:
                draw_opponent_word(opp_colors)
            else:
                draw_opponent_guesses(opp_guesses, opp_colors)
        except:
            pass
    if message_on:
        draw_congrats(last_date_won)

    pygame.display.flip()

# ◊õ◊ú ◊î◊™◊ï◊°◊§◊ï◊™ ◊ëretro mode
def retro_extension():
    if Mouse_x >= 25 and Mouse_x <= 225 and Mouse_y >= 475 and Mouse_y <= 535:
        next_day_color = green
    else:
        next_day_color = black
    pygame.draw.rect(screen, next_day_color, pygame.Rect(25, 475, 200, 60), 7)
    next_day = he_font45.render('◊ú◊ô◊ï◊ù ◊î◊ë◊ê!'[::-1], True, black)
    next_day_width = next_day.get_rect().width
    screen.blit(next_day, ((190 - next_day_width) // 2 + 30, 473))

    if Mouse_x >= 25 and Mouse_x <= 225 and Mouse_y >= 575 and Mouse_y <= 635:
        previous_day_color = claret
    else:
        previous_day_color = black
    pygame.draw.rect(screen, previous_day_color, pygame.Rect(13, 575, 224, 60), 7)
    next_day = he_font45.render('◊ú◊ô◊ï◊ù ◊î◊ß◊ï◊ì◊ù!'[::-1], True, black)
    next_day_width = next_day.get_rect().width
    screen.blit(next_day, ((190 - next_day_width) // 2 + 30, 573))

    if Mouse_x >= 745 and Mouse_x <= 985 and Mouse_y >= 240 and Mouse_y <= 300:
        next_player_color = turquoise
    else:
        next_player_color = black
    pygame.draw.rect(screen, next_player_color, pygame.Rect(745, 240, 240, 60), 7)
    next_day = he_font45.render('◊ú◊©◊ó◊ß◊ü ◊î◊ë◊ê!'[::-1], True, black)
    next_day_width = next_day.get_rect().width
    screen.blit(next_day, ((240 - next_day_width) // 2 + 745, 238))

    ratio = f'{player_index + 1} / {len(all_plays)}'
    ratio_text = fffont.render(ratio, True, black)
    ratio_width = ratio_text.get_rect().width
    screen.blit(ratio_text, ((240 - ratio_width) // 2 + 745, 310))

    if Mouse_x >= 730 and Mouse_x <= 990 and Mouse_y >= 640 and Mouse_y <= 700:
        main_page_color = light_blue
    else:
        main_page_color = black
    pygame.draw.rect(screen, main_page_color, pygame.Rect(730, 640, 260, 60), 7)
    next_day = he_font45.render('◊ú◊¢◊û◊ï◊ì ◊î◊®◊ê◊©◊ô!'[::-1], True, black)
    next_day_width = next_day.get_rect().width
    screen.blit(next_day, ((260 - next_day_width) // 2 + 730, 638))

    date_day = all_dates[date_index][8:10]
    date_month = all_dates[date_index][5:7]
    date_year = all_dates[date_index][0:4]
    date = f'{date_day}/{date_month}/{date_year}'

    date_text = he_font60.render(date, True, black)
    date_text_width = date_text.get_rect().width
    screen.blit(date_text, ((470 - date_text_width)//2 + 250,80))

    draw_best_score(find_best_score(all_plays))

    pygame.display.flip()

# ◊û◊¶◊ô◊ô◊® ◊ê◊™ ◊î◊©◊ù ◊©◊ú ◊î◊ô◊ï◊ñ◊® ◊ë1v1
def draw_name():
    other_name = find_user(other_username)
    name = name_font.render(other_name[::-1], True, black)
    name_width = name.get_rect().width
    screen.blit(name, (1050 + (470 - name_width)//2, 40))
    pygame.display.flip()

# ◊î◊ï◊ì◊¢◊ï◊™ ◊î◊ï◊°◊§◊î ◊ú◊™◊§◊ï◊¶◊î
def draw_distribution_output(state):
    message_text = '◊†◊ï◊°◊§◊™ ◊ú◊™◊§◊ï◊¶◊î ◊ë◊î◊¶◊ú◊ó◊î!'[::-1] if state == 1 else '◊û◊©◊î◊ï ◊î◊©◊™◊ë◊© :)'[::-1]
    message = he_font60.render(message_text, True, black)
    message_width = message.get_rect().width
    pygame.draw.rect(screen, black, pygame.Rect(230 + (470 - message_width) // 2, 300, message_width + 40, 90))
    pygame.draw.rect(screen, light_green if state == 1 else red, pygame.Rect(240 + (470 - message_width) // 2, 310, message_width + 20, 70))
    screen.blit(message, ((470 - message_width) // 2 + 250 , 300))
    pygame.display.flip()
    time.sleep(2.5)
    draw_board()

# ◊†◊ô◊í◊© ◊ú◊©◊®◊™ ◊ï◊û◊õ◊†◊ô◊° ◊ú◊™◊§◊ï◊¶◊î
def add_user_to_distribution():
    url = 'http://windowsapp:8080/addtodist'
    u = getpass.getuser()
    user_to_add = {'username': u}
    headers = {'Content-Type': 'application/json'}
    try:
        response = requests.post(url, json=user_to_add, headers=headers)
    except:
        draw_distribution_output(0)
        return None
    if response.status_code == 200 and response.text == 'success':
        draw_distribution_output(1)
    else:
        draw_distribution_output(0)

def add_photo():
    url = 'http://windowsapp:8080/adduserphoto'
    user_to_add = {'username': username}
    headers = {'Content-Type': 'application/json'}
    try:
        response = requests.post(url, json=user_to_add, headers=headers)
    except:
        pass
#add_photo()

# ◊û◊ô◊ô◊ú ◊û◊®◊õ◊ñ◊ô
def email():
    outlook = win32.Dispatch('outlook.application')
    mail = outlook.CreateItem(0)
    mail.to = "wordle@army.idf.il"
    mail.subject = "WORDLE TZAHALI"
    block = ""
    for guess in colors:
        reversed_guess = [x for x in guess[::-1]] if langEN else guess
        for color in reversed_guess:
            if color == gray:
                block += black_heart_emoji
            if color == yellow:
                block += yellow_heart_emoji
            if color == green:
                block += green_heart_emoji
        block += "<br>"
        message1 = f'◊î◊¶◊ú◊ó◊™◊ô ◊ê◊™ ◊î◊ï◊ï◊®◊ì◊ú ◊î◊ô◊ï◊û◊ô {"◊ë◊ê◊†◊í◊ú◊ô◊™" if langEN else "◊ë◊¢◊ë◊®◊ô◊™"} ◊ë-{str(word_n)}'
        message2 = f'◊î◊§◊¢◊ù ◊ú◊ê ◊î◊¶◊ú◊ó◊™◊ô ◊ê◊™ ◊î◊ï◊ï◊®◊ì◊ú {"◊ë◊ê◊†◊í◊ú◊ô◊™" if langEN else "◊ë◊¢◊ë◊®◊ô◊™"}...'
    if word_n != 6 or colors[-1] == [green for i in range(5)]:
        mail.HtmlBody = """\
                                <html>
                                <head>
                                    <meta charset="utf-8">
                                </head>
                                <body dir="rtl">
                                    <p style="font-size: 32px; font-family: Heebo">
                                    """ \
                                    + message1 +\
                                    """ ◊†◊°◊ô◊ï◊†◊ï◊™!!
                                    <br><br>""" + block + """<br>
                                    ◊ó◊ï◊©◊ë◊ô◊ù ◊©◊ê◊™◊ù ◊ò◊ï◊ë◊ô◊ù ◊ô◊ï◊™◊® ◊û◊û◊†◊ô?! ◊ë◊ï◊ê◊ï ◊†◊®◊ê◊î ◊ê◊™◊õ◊ù!!
                                    <br><br>\\\hmpublicvfs\Software\wordle<br><br>
                        </p>
                    </body>
                    </html>
                    """
    else:
        mail.HtmlBody = """\
                                        <html>
                                        <head>
                                            <meta charset="utf-8">
                                        </head>
                                        <body dir="rtl">
                                            <p style="font-size: 32px; font-family: Heebo">
                                            """ \
                        + message2 + \
                        \
                        """ 
                        <br><br>""" + block + """<br>
                                            ◊ó◊õ◊ï ◊ú◊û◊ó◊®!!
                                            <br><br>\\\hmpublicvfs\Software\wordle<br><br>
                                </p>
                            </body>
                            </html>
                            """
    mail.Display(True)

# ◊û◊ô◊ô◊ú ◊§◊ô◊ì◊ë◊ß◊ô◊ù
def email2():
    outlook = win32.Dispatch('outlook.application')
    mail = outlook.CreateItem(0)
    mail.to = "s8875898@army.idf.il"
    mail.subject = "WORDLE TZAHALI"
    mail.HtmlBody = """\
                                <html>
                                <head>
                                    <meta charset="utf-8">
                                </head>
                                <body dir="rtl">
                                    <p style="font-size: 32px; font-family: Heebo">
                                    ◊™◊ß◊©◊ô◊ë ◊¢◊û◊ô◊™ ◊†◊©◊ë◊¢/◊™ ◊©◊ê◊™◊î ◊û◊ò◊ï◊®◊£!! <br> ◊î◊†◊î ◊û◊î ◊©◊ô◊© ◊ú◊ô ◊ú◊î◊ï◊°◊ô◊£!  
                                    </p>
                                </body>
                                </html>
                                """
    mail.Display(True)

# ◊û◊ô◊ô◊ú ◊î◊õ◊†◊°◊î ◊ú◊™◊§◊ï◊¶◊î, ◊õ◊ë◊® ◊ú◊ê ◊ë◊©◊ô◊û◊ï◊© :)
def email3():
    outlook = win32.Dispatch('outlook.application')
    mail = outlook.CreateItem(0)
    mail.to = "s8875898@army.idf.il"
    mail.subject = "WORDLE TZAHALI"
    mail.HtmlBody = """\
                                    <html>
                                    <head>
                                        <meta charset="utf-8">
                                    </head>
                                    <body dir="rtl">
                                        <p style="font-size: 50px; font-family: Heebo">
                                        ◊ë◊ê◊û◊ê◊©◊ö ◊™◊õ◊†◊ô◊° ◊ê◊ï◊™◊ô ◊ú◊™◊§◊ï◊¶◊î◊î◊î◊î◊î◊î◊î  
                                        </p>
                                    </body>
                                    </html>
                                    """
    mail.Display(True)

# ◊û◊ô◊ô◊ú 1v1
def email4():
    outlook = win32.Dispatch('outlook.application')
    mail = outlook.CreateItem(0)
    mail.to = "wordle@army.idf.il"
    mail.subject = "WORDLE TZAHALI"
    mail.HtmlBody = """\
                                        <html>
                                        <head>
                                            <meta charset="utf-8">
                                        </head>
                                        <body dir="rtl">
                                            <p style="font-size: 32px; font-family: Heebo">
                                            ◊ë◊ï◊ê◊ï ◊©◊ó◊ß◊ï ◊†◊í◊ì◊ô ◊ï◊ï◊®◊ì◊ú 1 ◊†◊í◊ì 1!!
                                            <br><br>
                                            ◊î◊ß◊ï◊ì ◊ú◊ó◊ì◊® ◊î◊ï◊ê: 
                                            """+ key +"""
                                            <br><br>\\\hmpublicvfs\Software\wordle
                                            </p>
                                        </body>
                                        </html>
                                        """
    mail.Display(True)

def retro_color_name():
    name_text = find_user(suser)
    if name_text != "" and ord(name_text[0]) >= 1488 and ord(name_text[0]) <= 1514:
        reg_name = True
        name = he_font.render(name_text[::-1], True, black)
    else:
        name = font60.render(name_text, True, black)
        reg_name = False
    name_width = name.get_rect().width
    b = (470 - name_width) // 2 + 250
    screen.blit(name, (b, 0 if reg_name else 34))
    if Mouse_x >= b and Mouse_x <= (b + name_width) and Mouse_y >= 40 and Mouse_y <= 87:
        if reg_name:
            name = he_font.render(name_text[::-1], True, purple2)
        else:
            name = font60.render(name_text, True, purple2)
        screen.blit(name, (b, 0 if reg_name else 34))

    if Mouse_x >= 25 and Mouse_x <= 225 and Mouse_y >= 475 and Mouse_y <= 535:
        next_day_color = green
    else:
        next_day_color = black
    pygame.draw.rect(screen, next_day_color, pygame.Rect(25, 475, 200, 60), 7)
    if Mouse_x >= 25 and Mouse_x <= 225 and Mouse_y >= 575 and Mouse_y <= 635:
        previous_day_color = claret
    else:
        previous_day_color = black
    pygame.draw.rect(screen, previous_day_color, pygame.Rect(13, 575, 224, 60), 7)
    if Mouse_x >= 745 and Mouse_x <= 985 and Mouse_y >= 240 and Mouse_y <= 300:
        next_player_color = turquoise
    else:
        next_player_color = black
    pygame.draw.rect(screen, next_player_color, pygame.Rect(745, 240, 240, 60), 7)
    if Mouse_x >= 730 and Mouse_x <= 990 and Mouse_y >= 640 and Mouse_y <= 700:
        main_page_color = light_blue
    else:
        main_page_color = black
    pygame.draw.rect(screen, main_page_color, pygame.Rect(730, 640, 260, 60), 7)
    pygame.display.flip()

def draw_days_to_end():
    end = datetime.date(2023, 12, 24)
    delta = (end - today).days
    str_delta = str(delta)[::-1]
    fonty = he_font25
    if delta >= 10:
        text = f'◊¢◊ï◊ì {str_delta} ◊ï◊ï◊®◊ì◊ú◊ô◊ù ◊¢◊ì ◊©◊ê◊†◊ô ◊ë◊ó◊ï◊•!'
        color = black
    elif delta >= 6:
        text = f'◊®◊ß ◊¢◊ï◊ì {str_delta} ◊ï◊ï◊®◊ì◊ú◊ô◊ù!'
        color = [218, 99, 17]
    elif delta >= 3:
        text = f'◊¢◊ï◊ì {str_delta} ◊ô◊û◊ô◊ù ◊ï◊ê◊†◊ô ◊ë◊ó◊ï◊•!'
        color = claret
    elif delta == 2:
        text = '◊®◊ß ◊¢◊ï◊ì ◊ô◊ï◊û◊ô◊ô◊ù!'
        color = red
    elif delta == 1:
        text = '◊û◊ó◊® ◊ê◊†◊ô ◊ë◊ó◊ï◊•!'
        color = red
    elif delta == 0:
        text = '◊ë◊ô◊ô ◊ë◊ô◊ô :('
        color = green
    else:
        text = '◊™◊ï◊ì◊î ◊ú◊õ◊ù ◊¢◊ú ◊©◊ô◊®◊ï◊™ ◊û◊ì◊î◊ô◊ù! ◊ê◊ú ◊™◊§◊°◊ô◊ß◊ï ◊ú◊¢◊©◊ï◊™ ◊ï◊ï◊®◊ì◊ú◊ô◊ù!'
        color = black
        # fonty = he_font30
    message = fonty.render(text[::-1], True, color)
    screen.blit(message, (center_pos(0, 1000, message.get_rect().width), 1055))


# starting default settings!
db, collection1, word_list, normal_words, letter_list1, letter_list2, letter_list3, images, target, best_score, last_date_won, images_array = default_settings()
bright_bg, orange_bg, pink_bg, yellow_bg, purple_bg, gray_bg, image, dist = images_array


# 1v1 default settings:
filled_opponent = False
key = None
joinable = False
join_room_clicked = False
opp_colors = []
opp_guesses = []
mode_clicked = 0
len_colors = 0
game_num = 0
waiting_for_opponent = False
opp_ready = False
my_wins = 0
opponent_wins = 0

# Retro default settings:
date_index = 0
player_index = 0
all_plays = []
suser = username

# speed default settings:
counter = 240
text = "0:59"

# leaderboard settings:
leaderboard_on = False
leaderboard_players = []
leaderboard_scores = []
profile_on_leader = False
leaderboard_mode = 0
leaderboard_page = 0

# starting default settings:
X, Y = (0, 0)
mode = "daily"
changed = False
image_on = False
message_on = False if last_date_won == None else True
lobby = False
x_got_clicked = False
end_screen_on = False
red_word = False
won = False
is_won = 0
flag = True
guesses = []
colors = []
gray_places = []
yellow_places = []
green_places = []
curr_word = ""
word_n = 0
letter_n = 0
bg = bright_bg
background_color = share_color

query1 = {"user": username}
query2 = {"data": "general"}
query3 = {"data": "opponent"}
mydoc = collection1.find(query1)
for x in mydoc:
    if x != None:
        guesses = x['guesses']
        colors = x['colors']
        gray_places = x['gray_places']
        yellow_places = x['yellow_places']
        green_places = x['green_places']
        word_n = x['word_n']
        is_won = x['is_won']
draw_board()
running = True
win32api.LoadKeyboardLayout('00000409', 1)
while running:

    for event in pygame.event.get():
        if event.type == pygame.VIDEORESIZE:
            screen = pygame.display.set_mode((event.w, event.h), pygame.RESIZABLE)
            draw_board()
        if event.type == pygame.QUIT:
            sys.exit()

        Mouse_x, Mouse_y = pygame.mouse.get_pos()
        # print(win32api.GetKeyboardLayoutName())
        # print(target)
        # print(Mouse_x,Mouse_y)
        # print(leaderboard_players)
        # print(image_on, end_screen_on, x_got_clicked)
        # print(opp_ready)
        # print(f'opp_colors is {opp_colors} and len_colors is {len_colors}')

        if mode == "retro":
            retro_color_name()
        if mode == "1v1" and lobby:
            if key != None:
                opponent = collection_player.find(query3)
                for x in opponent:
                    if x != None:
                        other_username = x["username"]

                        joinable = False
                        lobby = False
                        curr_word = ""
                        letter_n = 0
                        draw_board()

        if mode == "daily":
            for x in collection1.find(query1):
                if x != None and word_n != x['word_n']:
                    guesses = x['guesses']
                    colors = x['colors']
                    gray_places = x['gray_places']
                    yellow_places = x['yellow_places']
                    green_places = x['green_places']
                    word_n = x['word_n']
                    is_won = x['is_won']
                    changed = True
            if changed:
                draw_board()
                changed = False
            if leaderboard_on:
                for i in range(9):
                    if X > 298 and X < 612 and Y > (300 + 50 * i) and Y < (325 + 50 * i) and not profile_on_leader:
                        draw_profile(leaderboard_players[(i+1)+(leaderboard_page)*9])
                        profile_on_leader = True

        if mode == "1v1" and not lobby:
            # print(f'the opponent is {opp_ready} and you are {waiting_for_opponent} on the waiting')
            if creator == username:
                query4 = {"user": other_username}
                opp = collection_player.find(query4)
                for x in opp:
                    opp_colors = x["colors"]
                    opp_guesses = x["guesses"]
                    opp_ready = x["opp_ready"]
                if opp_ready == "midgame" and waiting_for_opponent:
                    if is_won == 1:
                        my_wins += 1
                    else:
                        opponent_wins += 1
                    x_got_clicked = False
                    end_screen_on = False
                    won = False
                    is_won = 0
                    guesses = []
                    colors = []
                    gray_places = []
                    yellow_places = []
                    green_places = []
                    curr_word = ""
                    word_n = 0
                    letter_n = 0

                    game_num += 1
                    target = targets[game_num]
                    filled_opponent = False
                    opp_colors = []
                    opp_guesses = []
                    mode_clicked = 0
                    len_colors = 0

                    waiting_for_opponent = False
                    draw_board()

                if not waiting_for_opponent and not end_screen_on and opp_ready == "midgame":
                    if len(opp_colors) > len_colors:
                        len_colors = len(opp_colors)
                        draw_opponent_last_word(opp_colors)

                        insert_player_status("midgame")

                    if len(opp_colors) != 0 and opp_colors[-1] == [green for i in range(5)]:
                        won = True
                        is_won = 2
                        end_screen_on = True
                        if not filled_opponent:
                            draw_opponent_guesses(opp_guesses, opp_colors, 0.1)
                            filled_opponent = True
                        if not x_got_clicked:
                            end_screen_1v1(is_won)
                        insert_player_status("no")

                    elif len_colors == 6:
                        won = True
                        is_won = 1
                        end_screen_on = True
                        if not filled_opponent:
                            draw_opponent_guesses(opp_guesses, opp_colors, 0.1)
                            filled_opponent = True
                        if not x_got_clicked:
                            end_screen_1v1(is_won)
                        insert_player_status("no")
            else:
                query5 = {"user": creator}
                opp = collection_opponent.find(query5)
                for x in opp:
                    opp_colors = x["colors"]
                    opp_guesses = x["guesses"]
                    opp_ready = x["opp_ready"]
                if opp_ready == "midgame" and waiting_for_opponent:
                    if is_won == 1:
                        my_wins += 1
                    else:
                        opponent_wins += 1
                    x_got_clicked = False
                    end_screen_on = False
                    won = False
                    is_won = 0
                    guesses = []
                    colors = []
                    gray_places = []
                    yellow_places = []
                    green_places = []
                    curr_word = ""
                    word_n = 0
                    letter_n = 0

                    game_num += 1
                    target = targets[game_num]
                    filled_opponent = False
                    opp_colors = []
                    opp_guesses = []
                    mode_clicked = 0
                    len_colors = 0
                    waiting_for_opponent = False
                    draw_board()

                if not waiting_for_opponent and not end_screen_on and opp_ready == "midgame":
                    if len(opp_colors) > len_colors:
                        len_colors = len(opp_colors)
                        draw_opponent_last_word(opp_colors)

                        insert_opponent_status("midgame")

                    if len(opp_colors) != 0 and opp_colors[-1] == [green for i in range(5)]:
                        won = True
                        is_won = 2
                        end_screen_on = True
                        if not filled_opponent:
                            draw_opponent_guesses(opp_guesses, opp_colors, 0.1)
                            filled_opponent = True
                        if not x_got_clicked:
                            end_screen_1v1(is_won)
                            end_screen_on = True
                        insert_opponent_status("no")

                    elif len_colors == 6:
                        won = True
                        is_won = 1
                        end_screen_on = True
                        if not filled_opponent:
                            draw_opponent_guesses(opp_guesses, opp_colors, 0.1)
                            filled_opponent = True
                        if not x_got_clicked:
                            end_screen_1v1(is_won)
                            end_screen_on = True
                        insert_opponent_status("no")

        if mode == "speed":
            if event.type == pygame.USEREVENT and counter > 0 and won == False:
                counter -= 1
                text = "0:" + str(counter//4).rjust(2, "0")
            clock_color = black
            if counter <= 5 * 4:
                if counter % 2 == 1:
                    clock_color = red
            elif counter <= 10 * 4:
                if counter % 4 == 0 or counter % 4 == 1:
                    clock_color = red

            pygame.draw.rect(screen, clock_color, pygame.Rect(762, 323, 216, 100))
            pygame.draw.rect(screen, light_yellow, pygame.Rect(770, 331, 200, 84))
            screen.blit(font.render(text, True, clock_color), (788, 338))
            pygame.display.flip()

        if letter_n == 5 and not image_on:
            if not is_real(curr_word) and not lobby:
                for i in range(5):
                    draw_letter(curr_word[i], word_n, i, black, red)
                    red_word = True
            if lobby:
                db = client['wordle'] if langEN else client['hewordle']
                collection_names = db.list_collection_names()
                if curr_word in collection_names:
                    collection2 = db[curr_word]
                    general = collection2.find(query2)
                    for x in general:
                        creator = x["creator"]
                        targets = x["targets"]
                        target = targets[game_num]

                    if username != creator:
                        joinable = True
                        join_room()
                        for i in range(5):
                            draw_letter(curr_word[i], word_n, i, black, light_green)
                            red_word = True

        if letter_n == 4 and red_word:
            if lobby:
                joinable = False
                join_room()
            for i in range(4):
                draw_letter(curr_word[i], word_n, i, black, white)
                red_word = False

        if word_n > 0 and not x_got_clicked and not waiting_for_opponent:
            if colors[-1] == [green for i in range(5)]:
                is_won = 1
                if mode == "daily":
                    end_screen(is_won)
                elif mode == "speed" or mode == "regular" or mode == "hard":
                    end_screen2(is_won)
                elif mode == "1v1":
                    try:
                        if not filled_opponent:
                            draw_opponent_guesses(opp_guesses, opp_colors, 0.1)
                            filled_opponent = True
                        end_screen_1v1(is_won)
                        end_screen_on = True
                        if creator == username:
                            if opp_ready == "midgame":
                                insert_player_status("midgame")
                            if opp_ready == "no":
                                insert_player_status("no")
                        else:
                            if opp_ready == "midgame":
                                insert_opponent_status("midgame")
                            if opp_ready == "no":
                                insert_opponent_status("no")
                    except:
                        pass
                won = True
                end_screen_on = True
            if word_n == 6 and not won:
                is_won = 2
                if mode == "daily":
                    end_screen(is_won)
                elif mode == "speed" or mode == "regular" or mode == "hard":
                    end_screen2(is_won)
                elif mode == "1v1":
                    try:
                        if not filled_opponent:
                            draw_opponent_guesses(opp_guesses, opp_colors, 0.1)
                            filled_opponent = True
                        end_screen_1v1(is_won)
                        end_screen_on = True
                        if creator == username:
                            if opp_ready == "midgame":
                                insert_player_status("midgame")
                            if opp_ready == "no":
                                insert_player_status("no")
                                won = True
                        else:
                            if opp_ready == "midgame":
                                insert_opponent_status("midgame")
                            if opp_ready == "no":
                                insert_opponent_status("no")
                                won = True
                    except:
                        pass

                end_screen_on = True

        if not x_got_clicked and mode == "speed" and counter == 0:
            is_won = 2
            end_screen2(is_won)
            won = True
            end_screen_on = True

        if event.type == pygame.MOUSEBUTTONDOWN:
            X = event.pos[0]
            Y = event.pos[1]
            if mode == "daily":
                if leaderboard_on:
                    if X > 640 and X < 687 and Y > 375 and Y < 447:
                        if leaderboard_page > 0:
                            leaderboard_page -= 1
                            leaderboard_players = draw_leaderboard()
                    if X > 640 and X < 687 and Y > 492 and Y < 567:
                        if leaderboard_page <= len(leaderboard_players) // 9 - 1:
                            leaderboard_page += 1
                            leaderboard_players = draw_leaderboard()
                    if X > 321 and X < 400 and Y > 206 and Y < 254:
                        leaderboard_mode = (leaderboard_mode + 1) % 5
                        leaderboard_page = 0
                        leaderboard_players = draw_leaderboard()
                    if X > 568 and X < 644 and Y > 206 and Y < 254:
                        leaderboard_mode = (leaderboard_mode - 1) % 5
                        leaderboard_page = 0
                        leaderboard_players = draw_leaderboard()
                if message_on:
                    if X > 700 and X < 750 and Y > 250 and Y < 290:
                        message_on = False
                        draw_board()
                if X > 10 and X < 160 and Y > 145 and Y < 210:
                    add_user_to_distribution()
                if X > 10 and X < 160 and Y > 65 and Y < 130:
                    langEN ^= True
                    # starting default settings!
                    db, collection1, word_list, normal_words, letter_list1, letter_list2, letter_list3, images, target, best_score, last_date_won, images_array = default_settings()
                    bright_bg, orange_bg, pink_bg, yellow_bg, purple_bg, gray_bg, image, dist = images_array
                    message_on = False if last_date_won == None else True
                    bg = bright_bg
                    leaderboard_on = False
                    leaderboard_players = []
                    leaderboard_scores = []
                    leaderboard_mode = 0
                    leaderboard_page = 0
                    profile_on_leader = False
                    guesses = []
                    colors = []
                    gray_places = []
                    yellow_places = []
                    green_places = []
                    word_n = 0
                    is_won = 0
                    mydoc = collection1.find(query1)
                    for x in mydoc:
                        if x != None:
                            guesses = x['guesses']
                            colors = x['colors']
                            gray_places = x['gray_places']
                            yellow_places = x['yellow_places']
                            green_places = x['green_places']
                            word_n = x['word_n']
                            is_won = x['is_won']
                    image_on = False
                    x_got_clicked = False
                    end_screen_on = False
                    red_word = False
                    won = False
                    curr_word = ""
                    letter_n = 0
                    win32api.LoadKeyboardLayout('00000409', 1) if langEN else win32api.LoadKeyboardLayout('0000040D', 1)
                    draw_board()
                if X > 10 and X < 160 and Y > 225 and Y < 265:
                    if end_screen_on and not x_got_clicked:
                        x_got_clicked = True
                        draw_board()
                    draw_profile(username)
                    image_on = True
                    leaderboard_on = False
                if X > 10 and X < 160 and Y > 280 and Y < 320:
                    if end_screen_on and not x_got_clicked:
                        x_got_clicked = True
                        draw_board()
                    leaderboard_players = draw_leaderboard()
                    image_on = True
                    leaderboard_on = True
                for i in range(len(best_score[0])):
                    if X > 790 and X < 970 and Y >= 85 + i * 35 and Y <= 105 + i * 35:
                        if end_screen_on and not x_got_clicked:
                            x_got_clicked = True
                            draw_board()
                        draw_profile(best_score[0][i])
                        image_on = True
                        leaderboard_on = False

            if mode == "retro":
                for i in range(len(best_score[0])):
                    if X > 790 and X < 970 and Y >= 85 + i * 35 and Y <= 105 + i * 35:
                        draw_profile(best_score[0][i])
                        image_on = True
                if X > 25 and X < 225 and Y > 475 and Y < 535:
                    date_index = (date_index + 1) % len(all_dates)
                    player_index = 0
                    all_plays = []
                    collection6 = db[all_dates[date_index]]
                    cursor = collection6.find({})
                    for play in cursor:
                        all_plays.append(play)
                    x = all_plays[player_index]
                    if x != None:
                        suser = x['user']
                        guesses = x['guesses']
                        colors = x['colors']
                        gray_places = x['gray_places']
                        yellow_places = x['yellow_places']
                        green_places = x['green_places']
                        word_n = x['word_n']
                        is_won = x['is_won']
                    image_on = False
                    draw_board()
                    best_score = find_best_score(all_plays)

                if X > 25 and X < 225 and Y > 575 and Y < 635:
                    date_index = (date_index - 1) % len(all_dates)
                    player_index = 0
                    all_plays = []
                    collection6 = db[all_dates[date_index]]
                    cursor = collection6.find({})
                    for play in cursor:
                        all_plays.append(play)
                    x = all_plays[player_index]
                    if x != None:
                        suser = x['user']
                        guesses = x['guesses']
                        colors = x['colors']
                        gray_places = x['gray_places']
                        yellow_places = x['yellow_places']
                        green_places = x['green_places']
                        word_n = x['word_n']
                        is_won = x['is_won']
                    image_on = False
                    draw_board()
                    best_score = find_best_score(all_plays)

                if X > 745 and X < 985 and Y > 240 and Y < 300 and len(all_plays) > 1:
                    player_index = (player_index + 1) % len(all_plays)
                    x = all_plays[player_index]
                    if x != None:
                        suser = x['user']
                        guesses = x['guesses']
                        colors = x['colors']
                        gray_places = x['gray_places']
                        yellow_places = x['yellow_places']
                        green_places = x['green_places']
                        word_n = x['word_n']
                        is_won = x['is_won']
                    print(len(all_plays))
                    image_on = False
                    draw_board()

                if X > 730 and X < 990 and Y > 640 and Y < 700:
                    guesses, colors, gray_places, yellow_places, green_places, is_won, word_n = db1
                    curr_word = ""
                    letter_n = 0
                    won = True
                    end_screen_on = True
                    bg = bright_bg
                    background_color = share_color
                    mode = "daily"
                    all_plays = []
                    player_index = 0
                    date_index = 0
                    suser = username
                    x_got_clicked = False
                    image_on = False
                    best_score = find_best_score(get_todays_plays())
                    screen = pygame.display.set_mode(pygame.display.get_surface().get_size(), pygame.RESIZABLE)
                    draw_board()

                if X > 250 and X < 720 and Y > 40 and Y < 87:
                    draw_profile(suser)
                    image_on = True


            if mode == "1v1":
                if lobby:
                    if X > 950 and X < 1220 and Y > 200 and Y < 400:
                        mode_clicked = 1
                        extension()
                    elif X > 1320 and X < 1590 and Y > 200 and Y < 400:
                        mode_clicked = 2
                        extension()
                    else:
                        if X < 920 or X > 1620 or Y < 450 or Y > 580:
                            mode_clicked = 0
                            extension()

                    if X > 1148 and X < 1387 and Y > 123 and Y < 173:
                        screen = pygame.display.set_mode(pygame.display.get_surface().get_size(), pygame.RESIZABLE)
                        guesses, colors, gray_places, yellow_places, green_places, is_won, word_n = db1
                        curr_word = ""
                        letter_n = 0
                        won = True
                        end_screen_on = True
                        lobby = False
                        bg = bright_bg
                        background_color = share_color
                        mode = "daily"
                        draw_board()

                    if X > 920 and X < 1620 and Y > 640 and Y < 770:
                        if joinable:
                            db = client['wordle'] if langEN else client['hewordle']
                            collection_opponent = db[curr_word]
                            x = collection_opponent.insert_one({"username": username, "data": "opponent"})
                            general = collection_opponent.find(query2)

                            def insert_opponent_status(ready_status):
                                collection_opponent.delete_one({"user": username})
                                data2 = {"user": username, "guesses": guesses, "colors": colors, "opp_ready": ready_status}
                                x = collection_opponent.insert_one(data2)

                            for x in general:
                                other_username = x["creator"]

                            joinable = False
                            lobby = False
                            curr_word = ""
                            letter_n = 0

                            draw_board()



                    if X > 920 and X < 1620 and Y > 450 and Y < 580:
                        if mode_clicked != 0:
                            try:
                                collection_player.drop()
                            except:
                                pass
                            key = generate_code()
                            db = client['wordle'] if langEN else client['hewordle']
                            collection_player = db[key]
                            def insert_player_status(ready_status):
                                collection_player.delete_one({"user": username})
                                data1 = {"user": username, "guesses": guesses, "colors": colors, "opp_ready": ready_status}
                                x = collection_player.insert_one(data1)

                            if mode_clicked == 1:
                                #target = random.choice(normal_words)
                                #target = "RATIO"
                                targets = random.sample(normal_words, 75)
                                target = targets[game_num]
                            else:
                                #target = random.choice(word_list)
                                targets = random.sample(word_list, 75)
                                target = targets[game_num]
                            x = collection_player.insert_one({"targets": targets, "creator": username, "data": "general"})
                    if key != None and X > 1040 and X < 1520 and Y > 820 and Y < 1060:
                        email4()


            # X got clicked on the image
            if image_on:
                if X > 650 and X < 713 and Y > 150 and Y < 216:
                    if profile_on_leader:
                        draw_leaderboard()
                        profile_on_leader = False
                    else:
                        image_on = False
                        leaderboard_on = False
                        draw_board()

                # if X > 455 and X < 720 and Y > 744 and Y < 777:
                    # email2()

            # Credits got clicked
            if not end_screen_on or end_screen_on and x_got_clicked:
                if X > 10 and X < 160 and Y > 10 and Y < 50:
                    screen.blit(image, (250,150))
                    pygame.display.flip()
                    image_on = True

            # ENGLISH screen letter input
            if langEN and word_n < 6 and letter_n < 5 and not won and not image_on and not message_on:
                for i in range(10):
                    if X > 134 + i * 74 and X < 134 + i * 74 + key_size + 10 and Y > 813 and Y < 813 + key_size + 10:
                        if flag:
                            draw_letter(letter_list1[i], word_n, letter_n, black, white)
                        curr_word += letter_list1[i]
                        letter_n += 1
                    if i < 9:
                        if X > 170 + i * 74 and X < 170 + i * 74 + key_size + 10 and Y > 886 and Y < 886 + key_size + 10:
                            if flag:
                                draw_letter(letter_list2[i], word_n, letter_n, black, white)
                            curr_word += letter_list2[i]
                            letter_n += 1
                    if i < 7:
                        if X > 244 + i * 74 and X < 244 + i * 74 + key_size + 10 and Y > 959 and Y < 959 + key_size + 10:
                            if flag:
                                draw_letter(letter_list3[i], word_n, letter_n, black, white)
                            curr_word += letter_list3[i]
                            letter_n += 1
            # HEBREW screen letter input
            if not langEN and word_n < 6 and letter_n < 5 and not won and not image_on and not message_on:
                for i in range(10):
                    if i < 8:
                        if X > 194 + i * 74 and X < 194 + i * 74 + key_size + 10 and Y > 813 and Y < 813 + key_size + 10:
                            if flag:
                                draw_letter(letter_list1[i], word_n, letter_n, black, white)
                            curr_word += letter_list1[i]
                            letter_n += 1
                    if X > 120 + i * 74 and X < 120 + i * 74 + key_size + 10 and Y > 886 and Y < 886 + key_size + 10:
                        if flag:
                            draw_letter(letter_list2[i], word_n, letter_n, black, white)
                        curr_word += letter_list2[i]
                        letter_n += 1
                    if i < 9:
                        if X > 157 + i * 74 and X < 157 + i * 74 + key_size + 10 and Y > 959 and Y < 959 + key_size + 10:
                            if flag:
                                draw_letter(letter_list3[i], word_n, letter_n, black, white)
                            curr_word += letter_list3[i]
                            letter_n += 1

            # main page got clicked
            if end_screen_on and not x_got_clicked:
                if (mode == "speed" or mode == "regular" or mode == "hard") and X > 365 and X < 604 and Y > 633 and Y < 681 or (mode == "1v1" and X > 767 and X < 1006 and Y > 450 and Y < 500):
                    guesses, colors, gray_places, yellow_places, green_places, is_won, word_n = db1
                    curr_word = ""
                    letter_n = 0
                    won = True
                    end_screen_on = True
                    bg = bright_bg
                    background_color = share_color
                    mode = "daily"
                    screen = pygame.display.set_mode(pygame.display.get_surface().get_size(), pygame.RESIZABLE)
                    draw_board()
                    print("main page!")
                # Continue got clicked
                if X > 322 and X < 648 and Y > 715 and Y < 795 and (mode == "speed" or mode == "regular" or mode == "hard"):
                    x_got_clicked = False
                    end_screen_on = False
                    won = False
                    is_won = 0
                    guesses = []
                    colors = []
                    gray_places = []
                    yellow_places = []
                    green_places = []
                    curr_word = ""
                    word_n = 0
                    letter_n = 0
                    if mode == "regular":
                        draw_board()
                        target = random.choice(normal_words)
                        print("continue")
                    elif mode == "speed":
                        draw_board()
                        target = random.choice(normal_words)
                        counter = 240
                    elif mode == "hard":
                        draw_board()
                        target = random.choice(word_list)

                # Continue got clicked on the 1v1
                if mode == "1v1" and X > 720 and X < 1050 and Y > 525 and Y < 606:
                    if opp_ready == "no":
                        if creator == username:
                            insert_player_status("yes")
                        else:
                            insert_opponent_status("yes")
                        waiting_for_opponent = True
                        waiting_screen()
                    elif opp_ready == "yes":
                        if is_won == 1:
                            my_wins += 1
                        else:
                            opponent_wins += 1
                        x_got_clicked = False
                        end_screen_on = False
                        won = False
                        is_won = 0
                        guesses = []
                        colors = []
                        gray_places = []
                        yellow_places = []
                        green_places = []
                        curr_word = ""
                        word_n = 0
                        letter_n = 0

                        game_num += 1
                        target = targets[game_num]
                        filled_opponent = False
                        opp_colors = []
                        opp_guesses = []
                        mode_clicked = 0
                        len_colors = 0
                        if creator == username:
                            insert_player_status("midgame")
                        else:
                            insert_opponent_status("midgame")
                        draw_board()



                # X got clicked on the end screen
                if X > 705 and X < 745 and Y > 520 and Y < 560 and mode == "daily" or X > 705 and X < 745 and Y > 610 and Y < 650 and (mode == "hard" or mode == "regular" or mode == "speed") or mode == "1v1" and X > 1090 and X < 1140 and Y > 425 and Y < 467 and not waiting_for_opponent:
                    x_got_clicked = True
                    draw_board()
                    # draw_menu_button()
                    print("x_got_clicked")

                # share your score got clicked
                if X > 300 and X < 670 and Y > 750 and Y < 800 and not x_got_clicked and mode == "daily":
                    email()
                if not x_got_clicked and mode == "daily":
                    if X > 410 and X < 560 and Y > 680 and Y < 730:
                        db1 = [guesses, colors, gray_places, yellow_places, green_places, is_won, word_n]
                        x_got_clicked = True
                        end_screen_on = False
                        bg = gray_bg
                        background_color = white
                        dates = []
                        for item in db.list_collection_names():
                            if len(item) == 10:
                                dates.append(item)
                        all_dates = sorted(dates, reverse=True)
                        collection6 = db[all_dates[date_index]]
                        cursor = collection6.find({})
                        for play in cursor:
                            all_plays.append(play)
                        mode = "retro"
                        draw_board()
                        print(all_plays)

                    if X > 250 and X < 483 and Y > 878 and Y < 915:
                        # RESET !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                        mode = "regular"
                        db1 = [guesses, colors, gray_places, yellow_places, green_places, is_won, word_n]
                        x_got_clicked = False
                        end_screen_on = False
                        won = False
                        is_won = 0
                        guesses = []
                        colors = []
                        gray_places = []
                        yellow_places = []
                        green_places = []
                        curr_word = ""
                        word_n = 0
                        letter_n = 0
                        bg = orange_bg
                        background_color = claret
                        draw_board()
                        target = random.choice(normal_words)
                    if X > 543 and X < 723 and Y > 878 and Y < 915:
                        mode = "hard"
                        db1 = [guesses, colors, gray_places, yellow_places, green_places, is_won, word_n]
                        x_got_clicked = False
                        end_screen_on = False
                        won = False
                        is_won = 0
                        guesses = []
                        colors = []
                        gray_places = []
                        yellow_places = []
                        green_places = []
                        curr_word = ""
                        word_n = 0
                        letter_n = 0
                        bg = pink_bg
                        background_color = purple
                        draw_board()
                        target = random.choice(word_list)
                    if X > 270 and X < 461 and Y > 929 and Y < 966:
                        mode = "speed"
                        db1 = [guesses, colors, gray_places, yellow_places, green_places, is_won, word_n]
                        counter = 240
                        x_got_clicked = False
                        end_screen_on = False
                        won = False
                        is_won = 0
                        guesses = []
                        colors = []
                        gray_places = []
                        yellow_places = []
                        green_places = []
                        curr_word = ""
                        word_n = 0
                        letter_n = 0
                        bg = yellow_bg
                        background_color = black
                        draw_board()
                        target = random.choice(normal_words)
                    if X > 560 and X < 705 and Y > 929 and Y < 966:
                        mode = "1v1"
                        # 1v1 default settings:
                        filled_opponent = False
                        key = None
                        joinable = False
                        join_room_clicked = False
                        opp_colors = []
                        opp_guesses = []
                        mode_clicked = 0
                        len_colors = 0
                        my_wins = 0
                        opponent_wins = 0
                        game_num = 0
                        creator = username
                        lobby = True
                        screen = pygame.display.set_mode((1700, 1100), pygame.RESIZABLE)
                        db1 = [guesses, colors, gray_places, yellow_places, green_places, is_won, word_n]
                        x_got_clicked = False
                        end_screen_on = False
                        won = False
                        is_won = 0
                        guesses = []
                        colors = []
                        gray_places = []
                        yellow_places = []
                        green_places = []
                        curr_word = ""
                        word_n = 0
                        letter_n = 0
                        bg = purple_bg
                        background_color = purple2
                        draw_board()

            # if show menu button get clicked
            if x_got_clicked and not image_on:
                if X > 391 and X < 582 and Y > 762 and Y < 802:
                    if mode == "daily":
                        end_screen(is_won)
                        end_screen_on = True
                        x_got_clicked = False
                    elif mode == "speed" or mode == "regular" or mode == "hard":
                        end_screen2(is_won)
                        end_screen_on = True
                        x_got_clicked = False
                if X > 789 and X < 980 and Y > 590 and Y < 630:
                    if mode == "1v1":
                        end_screen_1v1(is_won)
                        end_screen_on = True
                        x_got_clicked = False

            if mode == "1v1":
                if X > 1090 and X < 1140 and Y > 425 and Y < 467:
                    if waiting_for_opponent and opp_ready == "no":
                        if creator == username:
                            insert_player_status("no")
                        else:
                            insert_opponent_status("no")
                        waiting_for_opponent = False
                        end_screen_1v1(is_won)
                        end_screen_on = True

        if event.type == pygame.KEYDOWN:
            # keyboard letter input
            if word_n < 6 and letter_n < 5 and not won and not image_on and not message_on and not waiting_for_opponent:
                char = event.unicode.upper()
                if langEN and char >= "A" and char <= "Z" or not langEN and char >= "◊ê" and char <="◊™":
                    if flag:
                        draw_letter(char, word_n, letter_n,black, white)
                    curr_word += char
                    letter_n += 1
                    #draw_board()

        # delete button or backspace got clicked
        if event.type == pygame.KEYDOWN and event.key == pygame.K_BACKSPACE or event.type == pygame.MOUSEBUTTONDOWN and X > 134 and X < 235 and Y > 959 and Y < 1024 and langEN or event.type == pygame.MOUSEBUTTONDOWN and X > 786 and X < 887 and Y > 813 and Y < 878 and not langEN:
            if letter_n > 0 and not image_on and not message_on and not won and not waiting_for_opponent:
                if flag:
                    if langEN:
                        pygame.draw.rect(screen, background_color, pygame.Rect(250 + (letter_n-1) * (sqare_size + 15), 165 + word_n * (sqare_size + 20), sqare_size + 10, sqare_size + 10))
                        pygame.draw.rect(screen, black, pygame.Rect(255 + (letter_n - 1) * (sqare_size + 15), 170 + word_n * (sqare_size + 20), sqare_size, sqare_size))
                    else:
                        pygame.draw.rect(screen, background_color, pygame.Rect(250 + (5 - letter_n) * (sqare_size + 15), 165 + word_n * (sqare_size + 20), sqare_size + 10, sqare_size + 10))
                        pygame.draw.rect(screen, black, pygame.Rect(255 + (5 - letter_n) * (sqare_size + 15), 170 + word_n * (sqare_size + 20), sqare_size, sqare_size))
                pygame.display.flip()
                letter_n -= 1
                curr_word = curr_word[:-1]
                #draw_board()

        # return or enter button got clicked
        if not lobby and not waiting_for_opponent:
            if event.type == pygame.KEYDOWN and event.key == pygame.K_RETURN or event.type == pygame.MOUSEBUTTONDOWN and X > 762 and X < 863 and Y > 959 and Y < 1024 and langEN or event.type == pygame.MOUSEBUTTONDOWN and X > 823 and X < 924 and Y > 959 and Y < 1024 and not langEN:
                if letter_n == 5 and is_real(curr_word) and not image_on and not message_on and not won:

                    # ADDING THE GUESS TO THE GUESSES LIST
                    guesses.append(curr_word)

                    # ADDING THE COLOR PATTERN TO A LIST
                    colorr = compare(curr_word, target)
                    colors.append(colorr)

                    # ADDING THE COLOR PATTERN OF THE KEYBOARD
                    for i in range(5):
                        if colorr[i] == gray and curr_word[i] not in gray_places and curr_word[i] not in green_places and curr_word[i] not in yellow_places:
                            for letter in letters_to_append(curr_word[i]):
                                gray_places.append(letter)

                        if colorr[i] == yellow and curr_word[i] not in yellow_places and curr_word[i] not in green_places:
                            for letter in letters_to_append(curr_word[i]):
                                yellow_places.append(letter)
                            if curr_word[i] in gray_places:
                                for letter in letters_to_append(curr_word[i]):
                                    gray_places.remove(letter)
                        if colorr[i] == green and curr_word[i] not in green_places:
                            for letter in letters_to_append(curr_word[i]):
                                green_places.append(letter)
                            if curr_word[i] in yellow_places:
                                for letter in letters_to_append(curr_word[i]):
                                    yellow_places.remove(letter)
                            if curr_word[i] in gray_places:
                                for letter in letters_to_append(curr_word[i]):
                                    gray_places.remove(letter)

                    if flag:

                        for i in range(5):
                            draw_letter(curr_word[i], word_n, i, colorr[i], white)
                            time.sleep(time_delay)
                        draw_keyboard(gray_places, yellow_places, green_places)
                        pygame.display.flip()

                    curr_word = ""
                    letter_n = 0
                    word_n += 1

                    if mode == "daily":
                        collection1.delete_one({"user": username})
                        mydata = {"user": username, "guesses": guesses, "colors": colors, "gray_places": gray_places, "yellow_places": yellow_places, "green_places": green_places, "is_won": is_won, "word_n": word_n}
                        x = collection1.insert_one(mydata)
                    if mode == "1v1":
                        if creator == username:
                            insert_player_status("midgame")
                        else:
                            insert_opponent_status("midgame")



                        # for x in collection1.find():
                            # print(x)

                    # draw_board()


            # print("this is", curr_word)
            # print("the grays are", gray_places,"\n","the yellows are", yellow_places,"\n","the greens are", green_places)

    clock.tick(fps)



